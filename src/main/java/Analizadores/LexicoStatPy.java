/* The following code was generated by JFlex 1.7.0 */

package analizadores;
import java_cup.runtime.Symbol; 
import java.util.ArrayList;
import java.util.List;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>src/main/java/Analizadores/LexerStatPy.jflex</tt>
 */
public class LexicoStatPy implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\4\1\1\1\101\1\101\1\3\22\0\1\10\1\2\1\11"+
    "\1\0\1\21\1\0\1\67\1\16\1\72\1\73\1\14\1\70\1\77"+
    "\1\71\1\6\1\13\1\27\1\30\1\31\2\5\1\24\1\23\2\25"+
    "\1\26\1\100\1\76\1\65\1\66\1\64\2\0\1\46\1\45\1\51"+
    "\1\36\1\44\1\33\1\55\1\40\1\42\1\61\1\50\1\43\1\57"+
    "\1\17\1\34\1\60\1\15\1\35\1\53\1\20\1\54\1\56\1\37"+
    "\1\62\1\63\1\15\1\74\1\12\1\75\1\0\1\15\1\0\1\46"+
    "\1\45\1\51\1\36\1\44\1\33\1\55\1\40\1\42\1\61\1\50"+
    "\1\43\1\57\1\17\1\34\1\60\1\15\1\35\1\53\1\20\1\54"+
    "\1\56\1\37\1\62\1\63\1\15\1\22\1\7\1\32\7\0\1\101"+
    "\113\0\1\15\37\0\1\15\76\0\2\41\115\0\1\52\u1ea8\0\1\101"+
    "\1\101\u0100\0\1\47\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udee5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\2\1"+
    "\1\7\1\10\1\11\1\1\2\11\1\12\1\13\1\14"+
    "\3\11\1\1\4\11\1\1\4\11\1\15\1\16\1\17"+
    "\1\1\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\0\1\32\1\0\1\33\1\0"+
    "\1\34\3\0\1\35\1\0\2\11\1\0\3\11\1\36"+
    "\3\11\1\0\1\37\1\11\1\37\7\11\2\0\6\11"+
    "\1\40\1\41\1\42\1\43\1\44\1\0\1\33\1\0"+
    "\2\34\1\0\1\35\1\0\2\11\1\0\1\11\1\45"+
    "\3\11\1\0\1\11\1\0\1\11\2\46\1\0\6\11"+
    "\1\0\1\11\2\0\3\11\1\0\2\11\1\0\1\11"+
    "\1\33\1\47\4\0\1\11\1\50\1\0\1\11\1\0"+
    "\2\11\1\0\2\11\1\0\1\11\1\0\1\11\2\51"+
    "\1\52\1\53\1\11\1\0\1\11\1\54\2\55\2\0"+
    "\3\11\2\56\1\11\2\57\4\0\1\11\1\0\1\11"+
    "\2\60\1\11\1\0\2\11\2\61\2\62\2\63\1\0"+
    "\1\11\2\0\2\11\1\0\2\11\1\0\1\11\2\64"+
    "\1\65\1\0\2\11\1\0\1\11\1\66\1\67\1\66"+
    "\1\67\1\0\3\11\1\70\1\71\1\70\1\71\1\0"+
    "\1\11\1\72\2\73\1\0\1\11\2\74\1\75\1\0"+
    "\1\11\2\0\2\11\1\0\1\11\2\0\2\11\1\0"+
    "\1\11\1\0\1\76\1\11\1\76\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\2\77"+
    "\1\0\1\11\2\100";

  private static int [] zzUnpackAction() {
    int [] result = new int[265];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\102\0\102\0\204\0\306\0\u0108\0\102\0\u014a"+
    "\0\u018c\0\u01ce\0\102\0\u0210\0\u0252\0\u0294\0\u02d6\0\102"+
    "\0\102\0\102\0\u0318\0\u035a\0\u039c\0\u03de\0\u0420\0\u0462"+
    "\0\u04a4\0\u04e6\0\u0528\0\u056a\0\u05ac\0\u05ee\0\u0630\0\u0672"+
    "\0\u06b4\0\u06f6\0\u0738\0\102\0\102\0\102\0\102\0\102"+
    "\0\102\0\102\0\102\0\102\0\102\0\u077a\0\102\0\u018c"+
    "\0\102\0\u07bc\0\u07fe\0\u0840\0\u0882\0\u08c4\0\102\0\u0906"+
    "\0\u0948\0\u098a\0\u09cc\0\u0a0e\0\u0a50\0\u0a92\0\u0ad4\0\u0b16"+
    "\0\u0b58\0\u0b9a\0\u0bdc\0\102\0\u0c1e\0\u0210\0\u0c60\0\u0ca2"+
    "\0\u0ce4\0\u0d26\0\u0d68\0\u0daa\0\u0dec\0\u0e2e\0\u0e70\0\u0eb2"+
    "\0\u0ef4\0\u0f36\0\u0f78\0\u0fba\0\u0ffc\0\102\0\102\0\102"+
    "\0\102\0\u077a\0\u103e\0\u018c\0\u1080\0\102\0\u10c2\0\u1104"+
    "\0\u0882\0\u1146\0\u1188\0\u11ca\0\u120c\0\u124e\0\u0210\0\u1290"+
    "\0\u12d2\0\u1314\0\u1356\0\u1398\0\u13da\0\u141c\0\102\0\u0210"+
    "\0\u145e\0\u14a0\0\u14e2\0\u1524\0\u1566\0\u15a8\0\u15ea\0\u162c"+
    "\0\u166e\0\u16b0\0\u16f2\0\u1734\0\u1776\0\u17b8\0\u17fa\0\u183c"+
    "\0\u187e\0\u18c0\0\u1902\0\u1944\0\u0840\0\u1986\0\u19c8\0\u1a0a"+
    "\0\u1a4c\0\u1a8e\0\u0210\0\u1ad0\0\u1b12\0\u1b54\0\u1b96\0\u1bd8"+
    "\0\u1c1a\0\u1c5c\0\u1c9e\0\u1ce0\0\u1d22\0\u1d64\0\u1da6\0\102"+
    "\0\u0210\0\u0210\0\u0210\0\u1de8\0\u1e2a\0\u1e6c\0\u0210\0\102"+
    "\0\u0210\0\u1eae\0\u1ef0\0\u1f32\0\u1f74\0\u1fb6\0\102\0\u0210"+
    "\0\u1ff8\0\102\0\u0210\0\u203a\0\u207c\0\u20be\0\u2100\0\u2142"+
    "\0\u2184\0\u21c6\0\102\0\u0210\0\u2208\0\u224a\0\u228c\0\u22ce"+
    "\0\102\0\u0210\0\102\0\u0210\0\102\0\u0210\0\u2310\0\u2352"+
    "\0\u2394\0\u23d6\0\u2418\0\u245a\0\u249c\0\u24de\0\u2520\0\u1944"+
    "\0\u2562\0\u25a4\0\u25e6\0\u0210\0\u2628\0\u266a\0\u26ac\0\u26ee"+
    "\0\u2730\0\102\0\102\0\u0210\0\u0210\0\u2772\0\u27b4\0\u27f6"+
    "\0\u2838\0\102\0\102\0\u0210\0\u0210\0\u287a\0\u28bc\0\u0210"+
    "\0\102\0\u0210\0\u28fe\0\u2940\0\102\0\u0210\0\u0210\0\u2982"+
    "\0\u29c4\0\u2a06\0\u2a48\0\u2a8a\0\u2acc\0\u2b0e\0\u2b50\0\u2b92"+
    "\0\u2bd4\0\u2c16\0\u2c58\0\u2c9a\0\u2cdc\0\u2d1e\0\102\0\u2d60"+
    "\0\u0210\0\u2da2\0\u2de4\0\u2e26\0\u2e68\0\u2eaa\0\u2eec\0\u2f2e"+
    "\0\u2f70\0\u2fb2\0\u2ff4\0\102\0\u0210\0\u3036\0\u3078\0\102"+
    "\0\u0210";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[265];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\2\5\1\6\1\7\1\10\1\5"+
    "\1\11\1\2\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\7\6\1\22\1\23\2\14\1\24\1\25"+
    "\1\14\1\26\1\27\1\14\1\30\1\31\1\14\1\2"+
    "\1\14\1\32\1\33\1\34\1\14\1\35\1\36\1\37"+
    "\4\14\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\171\0\1\55"+
    "\16\0\2\5\3\0\1\5\76\0\1\6\1\56\14\0"+
    "\7\6\57\0\1\57\72\0\11\60\1\61\1\62\67\60"+
    "\13\0\1\63\1\64\72\0\1\14\7\0\1\14\1\0"+
    "\2\14\2\0\7\14\1\0\6\14\1\0\5\14\1\0"+
    "\2\14\1\0\11\14\16\0\1\65\1\0\2\65\1\0"+
    "\4\65\1\0\1\66\3\65\1\67\2\65\1\70\60\65"+
    "\5\0\1\14\7\0\1\14\1\0\2\14\2\0\7\14"+
    "\1\0\6\14\1\0\2\14\1\71\2\14\1\0\2\14"+
    "\1\0\11\14\23\0\1\14\7\0\1\14\1\0\2\14"+
    "\2\0\7\14\1\0\2\14\1\72\3\14\1\73\1\74"+
    "\4\14\1\0\2\14\1\0\11\14\23\0\1\14\7\0"+
    "\1\14\1\0\2\14\2\0\7\14\1\0\1\14\1\75"+
    "\4\14\1\0\4\14\1\76\1\0\2\14\1\0\11\14"+
    "\23\0\1\14\7\0\1\14\1\0\2\14\2\0\7\14"+
    "\1\0\1\14\1\77\4\14\1\0\2\14\1\100\2\14"+
    "\1\0\2\14\1\0\11\14\23\0\1\14\7\0\1\14"+
    "\1\0\2\14\2\0\7\14\1\0\2\14\1\101\2\14"+
    "\1\102\1\0\5\14\1\0\2\14\1\0\11\14\35\0"+
    "\1\103\13\0\1\104\53\0\1\14\7\0\1\14\1\0"+
    "\1\105\1\14\2\0\7\14\1\0\1\106\5\14\1\0"+
    "\5\14\1\0\2\14\1\0\11\14\23\0\1\14\7\0"+
    "\1\14\1\0\2\14\2\0\7\14\1\0\6\14\1\0"+
    "\1\14\1\107\3\14\1\0\2\14\1\0\6\14\1\110"+
    "\2\14\23\0\1\14\7\0\1\14\1\0\2\14\2\0"+
    "\7\14\1\0\1\14\1\111\1\112\3\14\1\0\5\14"+
    "\1\0\2\14\1\0\11\14\23\0\1\14\7\0\1\14"+
    "\1\0\2\14\2\0\7\14\1\0\1\14\1\113\3\14"+
    "\1\114\1\0\4\14\1\115\1\0\2\14\1\0\11\14"+
    "\36\0\1\116\16\0\1\117\47\0\1\14\7\0\1\14"+
    "\1\0\1\14\1\120\2\0\7\14\1\0\4\14\1\121"+
    "\1\14\1\0\5\14\1\0\2\14\1\0\11\14\23\0"+
    "\1\14\7\0\1\14\1\0\2\14\2\0\7\14\1\0"+
    "\2\14\1\122\3\14\1\0\5\14\1\0\2\14\1\0"+
    "\11\14\23\0\1\14\7\0\1\14\1\0\2\14\2\0"+
    "\7\14\1\0\1\14\1\123\4\14\1\0\4\14\1\124"+
    "\1\0\2\14\1\0\11\14\23\0\1\14\7\0\1\14"+
    "\1\0\2\14\2\0\7\14\1\0\6\14\1\0\4\14"+
    "\1\125\1\0\2\14\1\0\11\14\104\0\1\126\101\0"+
    "\1\127\101\0\1\130\102\0\1\131\17\0\1\132\1\0"+
    "\2\132\12\0\7\132\50\0\11\133\1\134\1\135\67\133"+
    "\1\63\1\136\1\63\1\137\76\63\2\64\1\0\11\64"+
    "\1\140\65\64\16\0\1\67\74\0\1\65\4\0\1\141"+
    "\2\65\77\0\1\67\3\0\1\142\64\0\1\14\7\0"+
    "\1\14\1\0\2\14\2\0\7\14\1\0\4\14\1\143"+
    "\1\14\1\0\5\14\1\0\2\14\1\0\11\14\23\0"+
    "\1\14\7\0\1\14\1\0\2\14\2\0\7\14\1\0"+
    "\6\14\1\0\5\14\1\0\2\14\1\0\1\14\1\144"+
    "\7\14\36\0\1\145\66\0\1\14\7\0\1\14\1\0"+
    "\1\14\1\146\2\0\7\14\1\0\6\14\1\0\5\14"+
    "\1\0\2\14\1\0\11\14\23\0\1\14\7\0\1\14"+
    "\1\0\2\14\2\0\7\14\1\0\2\14\1\147\3\14"+
    "\1\0\5\14\1\0\2\14\1\0\11\14\23\0\1\14"+
    "\7\0\1\14\1\0\2\14\2\0\7\14\1\0\6\14"+
    "\1\0\1\14\1\150\3\14\1\0\2\14\1\0\11\14"+
    "\23\0\1\14\7\0\1\14\1\0\2\14\2\0\7\14"+
    "\1\0\6\14\1\0\5\14\1\0\2\14\1\0\1\14"+
    "\1\151\7\14\23\0\1\14\7\0\1\14\1\0\2\14"+
    "\2\0\7\14\1\0\1\152\5\14\1\0\5\14\1\0"+
    "\2\14\1\0\11\14\23\0\1\14\7\0\1\14\1\0"+
    "\2\14\2\0\7\14\1\0\6\14\1\153\1\154\4\14"+
    "\1\0\2\14\1\0\11\14\23\0\1\14\7\0\1\14"+
    "\1\0\2\14\2\0\7\14\1\0\6\14\1\155\1\156"+
    "\4\14\1\0\2\14\1\0\11\14\36\0\1\157\66\0"+
    "\1\14\7\0\1\14\1\0\1\14\1\160\2\0\7\14"+
    "\1\0\6\14\1\0\5\14\1\0\2\14\1\0\11\14"+
    "\23\0\1\14\7\0\1\14\1\0\2\14\2\0\7\14"+
    "\1\0\6\14\1\0\5\14\1\0\2\14\1\161\1\162"+
    "\10\14\23\0\1\14\7\0\1\14\1\0\2\14\2\0"+
    "\7\14\1\0\6\14\1\0\2\14\1\163\2\14\1\0"+
    "\2\14\1\0\11\14\23\0\1\14\7\0\1\14\1\0"+
    "\2\14\2\0\7\14\1\0\1\14\1\164\4\14\1\0"+
    "\5\14\1\0\2\14\1\0\11\14\23\0\1\14\7\0"+
    "\1\14\1\0\2\14\2\0\7\14\1\0\6\14\1\0"+
    "\2\14\1\165\2\14\1\0\2\14\1\0\11\14\23\0"+
    "\1\14\7\0\1\14\1\0\1\166\1\14\2\0\7\14"+
    "\1\0\6\14\1\0\5\14\1\0\2\14\1\0\11\14"+
    "\23\0\1\14\7\0\1\14\1\0\2\14\2\0\7\14"+
    "\1\0\6\14\1\0\4\14\1\167\1\0\2\14\1\0"+
    "\11\14\23\0\1\14\7\0\1\14\1\0\2\14\2\0"+
    "\7\14\1\0\6\14\1\0\5\14\1\0\2\14\1\170"+
    "\1\171\10\14\53\0\1\172\105\0\2\173\44\0\1\14"+
    "\7\0\1\14\1\0\2\14\2\0\7\14\1\0\2\14"+
    "\1\174\3\14\1\0\5\14\1\0\2\14\1\0\11\14"+
    "\23\0\1\14\7\0\1\14\1\0\2\14\2\0\7\14"+
    "\1\0\6\14\1\173\1\175\4\14\1\0\2\14\1\0"+
    "\11\14\23\0\1\14\7\0\1\14\1\0\2\14\2\0"+
    "\7\14\1\0\6\14\1\0\4\14\1\176\1\0\2\14"+
    "\1\0\11\14\23\0\1\14\7\0\1\14\1\0\2\14"+
    "\2\0\7\14\1\0\6\14\1\177\1\200\4\14\1\0"+
    "\2\14\1\0\11\14\23\0\1\14\7\0\1\14\1\0"+
    "\2\14\2\0\7\14\1\0\6\14\1\0\1\14\1\201"+
    "\3\14\1\0\2\14\1\0\11\14\23\0\1\14\7\0"+
    "\1\14\1\0\2\14\2\0\7\14\1\0\6\14\1\202"+
    "\1\203\4\14\1\0\2\14\1\0\11\14\16\0\11\133"+
    "\1\61\1\135\100\133\1\204\1\135\67\133\1\0\1\136"+
    "\100\0\2\64\1\0\10\64\1\205\1\140\65\64\23\0"+
    "\1\206\1\0\1\207\1\210\1\0\1\211\56\0\1\14"+
    "\7\0\1\14\1\0\2\14\2\0\7\14\1\0\6\14"+
    "\1\0\5\14\1\0\2\14\1\0\3\14\1\212\5\14"+
    "\23\0\1\14\7\0\1\14\1\0\2\14\2\0\7\14"+
    "\1\0\6\14\1\0\2\14\1\213\2\14\1\0\2\14"+
    "\1\0\11\14\72\0\1\214\32\0\1\14\7\0\1\14"+
    "\1\0\2\14\2\0\7\14\1\0\6\14\1\0\5\14"+
    "\1\0\2\14\1\0\1\14\1\215\7\14\23\0\1\14"+
    "\7\0\1\14\1\0\2\14\2\0\7\14\1\0\6\14"+
    "\1\0\5\14\1\0\2\14\1\216\1\217\10\14\23\0"+
    "\1\14\7\0\1\14\1\0\2\14\2\0\7\14\1\0"+
    "\6\14\1\0\3\14\1\220\1\14\1\0\2\14\1\0"+
    "\11\14\23\0\1\14\7\0\1\14\1\0\2\14\2\0"+
    "\7\14\1\0\6\14\1\221\1\222\3\14\1\223\1\0"+
    "\2\14\1\0\11\14\36\0\1\224\66\0\1\14\7\0"+
    "\1\14\1\0\1\14\1\225\2\0\7\14\1\0\6\14"+
    "\1\0\5\14\1\0\2\14\1\0\11\14\61\0\1\226"+
    "\43\0\1\14\7\0\1\14\1\0\2\14\2\0\7\14"+
    "\1\0\6\14\1\0\1\14\1\227\3\14\1\0\2\14"+
    "\1\0\11\14\62\0\1\230\42\0\1\14\7\0\1\14"+
    "\1\0\2\14\2\0\7\14\1\0\6\14\1\0\2\14"+
    "\1\231\2\14\1\0\2\14\1\0\11\14\23\0\1\14"+
    "\7\0\1\14\1\0\2\14\2\0\7\14\1\0\6\14"+
    "\1\0\5\14\1\0\2\14\1\0\7\14\1\232\1\14"+
    "\23\0\1\14\7\0\1\14\1\0\2\14\2\0\7\14"+
    "\1\0\6\14\1\0\1\14\1\233\3\14\1\0\2\14"+
    "\1\0\11\14\23\0\1\14\7\0\1\14\1\0\2\14"+
    "\2\0\7\14\1\0\6\14\1\0\4\14\1\234\1\0"+
    "\2\14\1\0\11\14\23\0\1\14\7\0\1\14\1\0"+
    "\2\14\2\0\7\14\1\0\6\14\1\0\5\14\1\0"+
    "\2\14\1\235\1\236\10\14\23\0\1\14\7\0\1\14"+
    "\1\0\2\14\2\0\7\14\1\0\2\14\1\237\3\14"+
    "\1\0\5\14\1\0\2\14\1\0\11\14\62\0\1\240"+
    "\42\0\1\14\7\0\1\14\1\0\2\14\2\0\7\14"+
    "\1\0\6\14\1\0\2\14\1\241\2\14\1\0\2\14"+
    "\1\0\11\14\57\0\2\242\57\0\1\243\66\0\1\14"+
    "\7\0\1\14\1\0\2\14\2\0\7\14\1\0\6\14"+
    "\1\242\1\244\4\14\1\0\2\14\1\0\11\14\23\0"+
    "\1\14\7\0\1\14\1\0\1\14\1\245\2\0\7\14"+
    "\1\0\6\14\1\0\5\14\1\0\2\14\1\0\11\14"+
    "\23\0\1\14\7\0\1\14\1\0\2\14\2\0\7\14"+
    "\1\0\1\246\5\14\1\0\5\14\1\0\2\14\1\0"+
    "\11\14\54\0\1\247\50\0\1\14\7\0\1\14\1\0"+
    "\2\14\2\0\7\14\1\0\3\14\1\250\2\14\1\0"+
    "\5\14\1\0\2\14\1\0\11\14\23\0\1\14\7\0"+
    "\1\14\1\0\2\14\2\0\7\14\1\0\1\14\1\251"+
    "\4\14\1\0\5\14\1\0\2\14\1\0\11\14\35\0"+
    "\1\252\67\0\1\14\7\0\1\14\1\0\1\253\1\14"+
    "\2\0\7\14\1\0\6\14\1\0\5\14\1\0\2\14"+
    "\1\0\11\14\16\0\11\254\1\61\1\255\67\254\23\0"+
    "\4\256\60\0\1\256\15\0\7\256\75\0\3\256\101\0"+
    "\2\207\1\257\55\0\1\14\7\0\1\14\1\0\2\14"+
    "\2\0\7\14\1\0\6\14\1\0\4\14\1\260\1\0"+
    "\2\14\1\0\11\14\61\0\1\261\43\0\1\14\7\0"+
    "\1\14\1\0\2\14\2\0\7\14\1\0\6\14\1\0"+
    "\1\14\1\262\3\14\1\0\2\14\1\0\11\14\62\0"+
    "\1\263\42\0\1\14\7\0\1\14\1\0\2\14\2\0"+
    "\7\14\1\0\6\14\1\0\2\14\1\264\2\14\1\0"+
    "\2\14\1\0\11\14\23\0\1\14\7\0\1\14\1\0"+
    "\2\14\2\0\7\14\1\0\6\14\1\0\1\14\1\265"+
    "\3\14\1\0\2\14\1\0\11\14\35\0\1\266\67\0"+
    "\1\14\7\0\1\14\1\0\1\267\1\14\2\0\7\14"+
    "\1\0\6\14\1\0\5\14\1\0\2\14\1\0\11\14"+
    "\23\0\1\14\7\0\1\14\1\0\2\14\2\0\7\14"+
    "\1\0\6\14\1\0\5\14\1\0\2\14\1\0\1\14"+
    "\1\270\7\14\62\0\1\271\42\0\1\14\7\0\1\14"+
    "\1\0\2\14\2\0\7\14\1\0\6\14\1\0\2\14"+
    "\1\272\2\14\1\0\2\14\1\0\11\14\62\0\1\273"+
    "\42\0\1\14\7\0\1\14\1\0\2\14\2\0\7\14"+
    "\1\0\6\14\1\0\2\14\1\274\2\14\1\0\2\14"+
    "\1\0\11\14\23\0\1\14\7\0\1\14\1\0\2\14"+
    "\2\0\7\14\1\0\6\14\1\0\5\14\1\275\1\276"+
    "\1\14\1\0\11\14\52\0\1\277\52\0\1\14\7\0"+
    "\1\14\1\0\2\14\2\0\7\14\1\0\1\14\1\300"+
    "\4\14\1\0\5\14\1\0\2\14\1\0\11\14\35\0"+
    "\1\301\133\0\1\302\35\0\1\14\7\0\1\14\1\0"+
    "\1\303\1\14\2\0\7\14\1\0\6\14\1\0\5\14"+
    "\1\0\2\14\1\0\11\14\23\0\1\14\7\0\1\14"+
    "\1\0\2\14\2\0\7\14\1\0\6\14\1\0\5\14"+
    "\1\0\1\14\1\304\1\0\11\14\23\0\1\14\7\0"+
    "\1\14\1\0\2\14\2\0\7\14\1\0\6\14\1\305"+
    "\1\306\4\14\1\0\2\14\1\0\11\14\23\0\1\14"+
    "\7\0\1\14\1\0\2\14\2\0\7\14\1\0\2\14"+
    "\1\307\3\14\1\0\5\14\1\0\2\14\1\0\11\14"+
    "\16\0\11\254\1\0\1\255\67\254\11\0\1\310\122\0"+
    "\1\65\76\0\3\256\55\0\1\14\7\0\1\14\1\0"+
    "\2\14\2\0\7\14\1\0\6\14\1\0\1\14\1\311"+
    "\3\14\1\0\2\14\1\0\11\14\52\0\1\312\52\0"+
    "\1\14\7\0\1\14\1\0\2\14\2\0\7\14\1\0"+
    "\1\14\1\313\4\14\1\0\5\14\1\0\2\14\1\0"+
    "\11\14\23\0\1\14\7\0\1\14\1\0\2\14\2\0"+
    "\7\14\1\0\6\14\1\0\2\14\1\314\2\14\1\0"+
    "\2\14\1\0\11\14\57\0\2\315\44\0\1\14\7\0"+
    "\1\14\1\0\2\14\2\0\7\14\1\0\6\14\1\315"+
    "\1\316\4\14\1\0\2\14\1\0\11\14\23\0\1\14"+
    "\7\0\1\14\1\0\2\14\2\0\7\14\1\0\6\14"+
    "\1\0\1\14\1\317\3\14\1\0\2\14\1\0\11\14"+
    "\61\0\1\320\43\0\1\14\7\0\1\14\1\0\2\14"+
    "\2\0\7\14\1\0\6\14\1\0\1\14\1\321\3\14"+
    "\1\0\2\14\1\0\11\14\73\0\1\322\64\0\1\323"+
    "\46\0\1\14\7\0\1\14\1\0\2\14\2\0\7\14"+
    "\1\0\6\14\1\0\5\14\1\0\2\14\1\0\2\14"+
    "\1\324\6\14\23\0\1\14\7\0\1\14\1\0\2\14"+
    "\2\0\7\14\1\0\5\14\1\325\1\0\5\14\1\0"+
    "\2\14\1\0\11\14\67\0\1\326\35\0\1\14\7\0"+
    "\1\14\1\0\2\14\2\0\7\14\1\0\6\14\1\0"+
    "\5\14\1\0\1\14\1\327\1\0\11\14\23\0\1\14"+
    "\7\0\1\14\1\0\2\14\2\0\7\14\1\0\6\14"+
    "\1\0\2\14\1\330\2\14\1\0\2\14\1\0\11\14"+
    "\23\0\1\14\7\0\1\14\1\0\2\14\2\0\7\14"+
    "\1\0\1\14\1\331\4\14\1\0\5\14\1\0\2\14"+
    "\1\0\11\14\100\0\1\332\1\333\23\0\1\14\7\0"+
    "\1\14\1\0\2\14\2\0\7\14\1\0\6\14\1\0"+
    "\5\14\1\0\2\14\1\0\7\14\1\334\1\335\53\0"+
    "\1\336\51\0\1\14\7\0\1\14\1\0\2\14\2\0"+
    "\7\14\1\0\2\14\1\337\3\14\1\0\5\14\1\0"+
    "\2\14\1\0\11\14\23\0\1\14\7\0\1\14\1\0"+
    "\1\14\1\340\2\0\7\14\1\0\6\14\1\0\5\14"+
    "\1\0\2\14\1\0\11\14\62\0\1\341\42\0\1\14"+
    "\7\0\1\14\1\0\2\14\2\0\7\14\1\0\6\14"+
    "\1\0\2\14\1\342\2\14\1\0\2\14\1\0\11\14"+
    "\64\0\1\343\40\0\1\14\7\0\1\14\1\0\2\14"+
    "\2\0\7\14\1\0\6\14\1\0\4\14\1\344\1\0"+
    "\2\14\1\0\11\14\23\0\1\14\7\0\1\14\1\0"+
    "\2\14\2\0\7\14\1\0\6\14\1\0\5\14\1\0"+
    "\2\14\1\345\1\346\10\14\23\0\1\14\7\0\1\14"+
    "\1\0\2\14\2\0\7\14\1\0\2\14\1\347\3\14"+
    "\1\0\5\14\1\0\2\14\1\0\11\14\73\0\1\350"+
    "\31\0\1\14\7\0\1\14\1\0\2\14\2\0\7\14"+
    "\1\0\6\14\1\0\5\14\1\0\2\14\1\0\2\14"+
    "\1\351\6\14\63\0\1\352\12\0\1\353\26\0\1\14"+
    "\7\0\1\14\1\0\2\14\2\0\7\14\1\0\6\14"+
    "\1\0\3\14\1\354\1\14\1\0\2\14\1\0\5\14"+
    "\1\355\3\14\61\0\1\356\43\0\1\14\7\0\1\14"+
    "\1\0\2\14\2\0\7\14\1\0\6\14\1\0\1\14"+
    "\1\357\3\14\1\0\2\14\1\0\11\14\64\0\1\360"+
    "\74\0\2\361\44\0\1\14\7\0\1\14\1\0\2\14"+
    "\2\0\7\14\1\0\6\14\1\0\4\14\1\362\1\0"+
    "\2\14\1\0\11\14\23\0\1\14\7\0\1\14\1\0"+
    "\2\14\2\0\7\14\1\0\6\14\1\361\1\363\4\14"+
    "\1\0\2\14\1\0\11\14\52\0\1\364\52\0\1\14"+
    "\7\0\1\14\1\0\2\14\2\0\7\14\1\0\1\14"+
    "\1\365\4\14\1\0\5\14\1\0\2\14\1\0\11\14"+
    "\53\0\1\366\110\0\1\367\42\0\1\14\7\0\1\14"+
    "\1\0\2\14\2\0\7\14\1\0\2\14\1\370\3\14"+
    "\1\0\5\14\1\0\2\14\1\0\11\14\23\0\1\14"+
    "\7\0\1\14\1\0\2\14\2\0\7\14\1\0\6\14"+
    "\1\0\2\14\1\371\2\14\1\0\2\14\1\0\11\14"+
    "\63\0\1\372\41\0\1\14\7\0\1\14\1\0\2\14"+
    "\2\0\7\14\1\0\6\14\1\0\3\14\1\373\1\14"+
    "\1\0\2\14\1\0\11\14\53\0\1\374\51\0\1\14"+
    "\7\0\1\14\1\0\2\14\2\0\7\14\1\0\2\14"+
    "\1\375\3\14\1\0\5\14\1\0\2\14\1\0\11\14"+
    "\64\0\1\376\40\0\1\14\7\0\1\14\1\0\2\14"+
    "\2\0\7\14\1\0\6\14\1\0\4\14\1\377\1\0"+
    "\2\14\1\0\11\14\64\0\1\u0100\40\0\1\14\7\0"+
    "\1\14\1\0\2\14\2\0\7\14\1\0\6\14\1\0"+
    "\4\14\1\u0101\1\0\2\14\1\0\11\14\61\0\1\u0102"+
    "\43\0\1\14\7\0\1\14\1\0\2\14\2\0\7\14"+
    "\1\0\6\14\1\0\1\14\1\u0103\3\14\1\0\2\14"+
    "\1\0\11\14\70\0\2\u0104\33\0\1\14\7\0\1\14"+
    "\1\0\2\14\2\0\7\14\1\0\6\14\1\0\5\14"+
    "\1\0\2\14\1\u0104\1\u0105\10\14\62\0\1\u0106\42\0"+
    "\1\14\7\0\1\14\1\0\2\14\2\0\7\14\1\0"+
    "\6\14\1\0\2\14\1\u0107\2\14\1\0\2\14\1\0"+
    "\11\14\70\0\2\u0108\33\0\1\14\7\0\1\14\1\0"+
    "\2\14\2\0\7\14\1\0\6\14\1\0\5\14\1\0"+
    "\2\14\1\u0108\1\u0109\10\14\16\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12474];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\3\1\1\11\3\1\1\11\4\1\3\11"+
    "\21\1\12\11\1\0\1\11\1\0\1\11\1\0\1\1"+
    "\3\0\1\11\1\0\2\1\1\0\7\1\1\0\1\11"+
    "\11\1\2\0\6\1\4\11\1\1\1\0\1\1\1\0"+
    "\1\11\1\1\1\0\1\1\1\0\2\1\1\0\5\1"+
    "\1\0\1\1\1\0\1\1\1\11\1\1\1\0\6\1"+
    "\1\0\1\1\2\0\3\1\1\0\2\1\1\0\3\1"+
    "\4\0\2\1\1\0\1\1\1\0\2\1\1\0\2\1"+
    "\1\0\1\1\1\0\1\1\1\11\4\1\1\0\2\1"+
    "\1\11\1\1\2\0\3\1\1\11\2\1\1\11\1\1"+
    "\4\0\1\1\1\0\1\1\1\11\2\1\1\0\2\1"+
    "\1\11\1\1\1\11\1\1\1\11\1\1\1\0\1\1"+
    "\2\0\2\1\1\0\2\1\1\0\4\1\1\0\2\1"+
    "\1\0\1\1\2\11\2\1\1\0\3\1\2\11\2\1"+
    "\1\0\2\1\1\11\1\1\1\0\1\1\1\11\2\1"+
    "\1\0\1\1\2\0\2\1\1\0\1\1\2\0\2\1"+
    "\1\0\1\1\1\0\1\11\2\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\11"+
    "\1\1\1\0\1\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[265];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    
    public List<Symbol> T_SIMBOLOS = new ArrayList<Symbol>();
    public List<Errores.ErrorLexico> ErroresLexicos = new ArrayList<Errores.ErrorLexico>();


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexicoStatPy(java.io.Reader in) {
      yyline = 1; 
    yychar = 0; 
    
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 260) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { Errores.ErrorLexico err=new Errores.ErrorLexico(yytext(),yyline,yychar);
    ErroresLexicos.add(err);
    System.out.println("Este es un error lexico: "+yytext()+", en la linea: "+yyline+", en la columna: "+yychar);
            } 
            // fall through
          case 65: break;
          case 2: 
            { yychar=0;
            } 
            // fall through
          case 66: break;
          case 3: 
            { T_SIMBOLOS.add(new Symbol(sym.NOT,yyline,yychar, yytext()));
        return new Symbol(sym.NOT,yyline,yychar, yytext());
            } 
            // fall through
          case 67: break;
          case 4: 
            { /*Ignorar Espacios en Blanco*/
            } 
            // fall through
          case 68: break;
          case 5: 
            { T_SIMBOLOS.add(new Symbol(sym.ENTERO,yyline,yychar, yytext()));
        return new Symbol(sym.ENTERO,yyline,yychar, yytext());
            } 
            // fall through
          case 69: break;
          case 6: 
            { T_SIMBOLOS.add(new Symbol(sym.PUNTO,yyline,yychar, yytext()));
     return new Symbol(sym.PUNTO,yyline,yychar, yytext());
            } 
            // fall through
          case 70: break;
          case 7: 
            { T_SIMBOLOS.add(new Symbol(sym.DIVIDIDO,yyline,yychar, yytext()));
        return new Symbol(sym.DIVIDIDO,yyline,yychar, yytext());
            } 
            // fall through
          case 71: break;
          case 8: 
            { T_SIMBOLOS.add(new Symbol(sym.POR,yyline,yychar, yytext()));
        return new Symbol(sym.POR,yyline,yychar, yytext());
            } 
            // fall through
          case 72: break;
          case 9: 
            { T_SIMBOLOS.add(new Symbol(sym.IDENT,yyline,yychar, yytext()));
                      return new Symbol(sym.IDENT,yyline,yychar, yytext());
            } 
            // fall through
          case 73: break;
          case 10: 
            { T_SIMBOLOS.add(new Symbol(sym.DOLAR,yyline,yychar, yytext()));
     return new Symbol(sym.DOLAR,yyline,yychar, yytext());
            } 
            // fall through
          case 74: break;
          case 11: 
            { T_SIMBOLOS.add(new Symbol(sym.BRAIZQ,yyline,yychar, yytext()));
    return new Symbol(sym.BRAIZQ,yyline,yychar, yytext());
            } 
            // fall through
          case 75: break;
          case 12: 
            { T_SIMBOLOS.add(new Symbol(sym.BRADER,yyline,yychar, yytext()));
     return new Symbol(sym.BRADER,yyline,yychar, yytext());
            } 
            // fall through
          case 76: break;
          case 13: 
            { T_SIMBOLOS.add(new Symbol(sym.MAYOR,yyline,yychar, yytext()));
        return new Symbol(sym.MAYOR,yyline,yychar, yytext());
            } 
            // fall through
          case 77: break;
          case 14: 
            { T_SIMBOLOS.add(new Symbol(sym.MENOR,yyline,yychar, yytext()));
        return new Symbol(sym.MENOR,yyline,yychar, yytext());
            } 
            // fall through
          case 78: break;
          case 15: 
            { T_SIMBOLOS.add(new Symbol(sym.IGUAL,yyline,yychar, yytext()));
     return new Symbol(sym.IGUAL,yyline,yychar, yytext());
            } 
            // fall through
          case 79: break;
          case 16: 
            { T_SIMBOLOS.add(new Symbol(sym.MAS,yyline,yychar, yytext()));
        return new Symbol(sym.MAS,yyline,yychar, yytext());
            } 
            // fall through
          case 80: break;
          case 17: 
            { T_SIMBOLOS.add(new Symbol(sym.MENOS,yyline,yychar, yytext()));
        return new Symbol(sym.MENOS,yyline,yychar, yytext());
            } 
            // fall through
          case 81: break;
          case 18: 
            { T_SIMBOLOS.add(new Symbol(sym.PARIZQ,yyline,yychar, yytext()));
        return new Symbol(sym.PARIZQ,yyline,yychar, yytext());
            } 
            // fall through
          case 82: break;
          case 19: 
            { T_SIMBOLOS.add(new Symbol(sym.PARDER,yyline,yychar, yytext()));
        return new Symbol(sym.PARDER,yyline,yychar, yytext());
            } 
            // fall through
          case 83: break;
          case 20: 
            { T_SIMBOLOS.add(new Symbol(sym.LLAIZQ,yyline,yychar, yytext()));
    return new Symbol(sym.LLAIZQ,yyline,yychar, yytext());
            } 
            // fall through
          case 84: break;
          case 21: 
            { T_SIMBOLOS.add(new Symbol(sym.LLADER,yyline,yychar, yytext()));
     return new Symbol(sym.LLADER,yyline,yychar, yytext());
            } 
            // fall through
          case 85: break;
          case 22: 
            { T_SIMBOLOS.add(new Symbol(sym.PTOCOMA,yyline,yychar, yytext()));
     return new Symbol(sym.PTOCOMA,yyline,yychar, yytext());
            } 
            // fall through
          case 86: break;
          case 23: 
            { T_SIMBOLOS.add(new Symbol(sym.COMA,yyline,yychar, yytext()));
     return new Symbol(sym.COMA,yyline,yychar, yytext());
            } 
            // fall through
          case 87: break;
          case 24: 
            { T_SIMBOLOS.add(new Symbol(sym.DOSPTO,yyline,yychar, yytext()));
     return new Symbol(sym.DOSPTO,yyline,yychar, yytext());
            } 
            // fall through
          case 88: break;
          case 25: 
            { T_SIMBOLOS.add(new Symbol(sym.NOTEQUALS,yyline,yychar, yytext()));
        return new Symbol(sym.NOTEQUALS,yyline,yychar, yytext());
            } 
            // fall through
          case 89: break;
          case 26: 
            { T_SIMBOLOS.add(new Symbol(sym.OR,yyline,yychar, yytext()));
        return new Symbol(sym.OR,yyline,yychar, yytext());
            } 
            // fall through
          case 90: break;
          case 27: 
            { T_SIMBOLOS.add(new Symbol(sym.CADENA,yyline,yychar, yytext()));
          return new Symbol(sym.CADENA,yyline,yychar, yytext());
            } 
            // fall through
          case 91: break;
          case 28: 
            { /*Ignorar Espacios Comentarios*/
            } 
            // fall through
          case 92: break;
          case 29: 
            { T_SIMBOLOS.add(new Symbol(sym.CHAR,yyline,yychar, yytext()));
          return new Symbol(sym.CHAR,yyline,yychar, yytext());
            } 
            // fall through
          case 93: break;
          case 30: 
            { T_SIMBOLOS.add(new Symbol(sym.DO,yyline,yychar, yytext()));
       return new Symbol(sym.DO,yyline,yychar, yytext());
            } 
            // fall through
          case 94: break;
          case 31: 
            { T_SIMBOLOS.add(new Symbol(sym.IF,yyline,yychar, yytext()));
       return new Symbol(sym.IF,yyline,yychar, yytext());
            } 
            // fall through
          case 95: break;
          case 32: 
            { T_SIMBOLOS.add(new Symbol(sym.MAYORIGUAL,yyline,yychar, yytext()));
        return new Symbol(sym.MAYORIGUAL,yyline,yychar, yytext());
            } 
            // fall through
          case 96: break;
          case 33: 
            { T_SIMBOLOS.add(new Symbol(sym.MENORIGUAL,yyline,yychar, yytext()));
        return new Symbol(sym.MENORIGUAL,yyline,yychar, yytext());
            } 
            // fall through
          case 97: break;
          case 34: 
            { T_SIMBOLOS.add(new Symbol(sym.EQUALS,yyline,yychar, yytext()));
        return new Symbol(sym.EQUALS,yyline,yychar, yytext());
            } 
            // fall through
          case 98: break;
          case 35: 
            { T_SIMBOLOS.add(new Symbol(sym.AND,yyline,yychar, yytext()));
        return new Symbol(sym.AND,yyline,yychar, yytext());
            } 
            // fall through
          case 99: break;
          case 36: 
            { T_SIMBOLOS.add(new Symbol(sym.DECIMAL,yyline,yychar, yytext()));
      return new Symbol(sym.DECIMAL,yyline,yychar, yytext());
            } 
            // fall through
          case 100: break;
          case 37: 
            { T_SIMBOLOS.add(new Symbol(sym.FOR,yyline,yychar, yytext()));
       return new Symbol(sym.FOR,yyline,yychar, yytext());
            } 
            // fall through
          case 101: break;
          case 38: 
            { T_SIMBOLOS.add(new Symbol(sym.INT,yyline,yychar, yytext()));
       return new Symbol(sym.INT,yyline,yychar, yytext());
            } 
            // fall through
          case 102: break;
          case 39: 
            { /*Ignorar Espacios*/
            } 
            // fall through
          case 103: break;
          case 40: 
            { T_SIMBOLOS.add(new Symbol(sym.TRUE,yyline,yychar, yytext()));
       return new Symbol(sym.TRUE,yyline,yychar, yytext());
            } 
            // fall through
          case 104: break;
          case 41: 
            { T_SIMBOLOS.add(new Symbol(sym.ELSE,yyline,yychar, yytext()));
       return new Symbol(sym.ELSE,yyline,yychar, yytext());
            } 
            // fall through
          case 105: break;
          case 42: 
            { T_SIMBOLOS.add(new Symbol(sym.EJEX,yyline,yychar, yytext()));
              return new Symbol(sym.EJEX,yyline,yychar, yytext());
            } 
            // fall through
          case 106: break;
          case 43: 
            { T_SIMBOLOS.add(new Symbol(sym.BOOL,yyline,yychar, yytext()));
         return new Symbol(sym.BOOL,yyline,yychar, yytext());
            } 
            // fall through
          case 107: break;
          case 44: 
            { T_SIMBOLOS.add(new Symbol(sym.PCHAR,yyline,yychar, yytext()));
         return new Symbol(sym.PCHAR,yyline,yychar, yytext());
            } 
            // fall through
          case 108: break;
          case 45: 
            { T_SIMBOLOS.add(new Symbol(sym.CASE,yyline,yychar, yytext()));
       return new Symbol(sym.CASE,yyline,yychar, yytext());
            } 
            // fall through
          case 109: break;
          case 46: 
            { T_SIMBOLOS.add(new Symbol(sym.VOID,yyline,yychar, yytext()));
        return new Symbol(sym.VOID,yyline,yychar, yytext());
            } 
            // fall through
          case 110: break;
          case 47: 
            { T_SIMBOLOS.add(new Symbol(sym.MAIN,yyline,yychar, yytext()));
        return new Symbol(sym.MAIN,yyline,yychar, yytext());
            } 
            // fall through
          case 111: break;
          case 48: 
            { T_SIMBOLOS.add(new Symbol(sym.FALSE,yyline,yychar, yytext()));
       return new Symbol(sym.FALSE,yyline,yychar, yytext());
            } 
            // fall through
          case 112: break;
          case 49: 
            { T_SIMBOLOS.add(new Symbol(sym.WRITE,yyline,yychar, yytext()));
              return new Symbol(sym.WRITE,yyline,yychar, yytext());
            } 
            // fall through
          case 113: break;
          case 50: 
            { T_SIMBOLOS.add(new Symbol(sym.WHILE,yyline,yychar, yytext()));
       return new Symbol(sym.WHILE,yyline,yychar, yytext());
            } 
            // fall through
          case 114: break;
          case 51: 
            { T_SIMBOLOS.add(new Symbol(sym.BREAK,yyline,yychar, yytext()));
       return new Symbol(sym.BREAK,yyline,yychar, yytext());
            } 
            // fall through
          case 115: break;
          case 52: 
            { T_SIMBOLOS.add(new Symbol(sym.TITULO,yyline,yychar, yytext()));
              return new Symbol(sym.TITULO,yyline,yychar, yytext());
            } 
            // fall through
          case 116: break;
          case 53: 
            { T_SIMBOLOS.add(new Symbol(sym.DOUBLE,yyline,yychar, yytext()));
         return new Symbol(sym.DOUBLE,yyline,yychar, yytext());
            } 
            // fall through
          case 117: break;
          case 54: 
            { T_SIMBOLOS.add(new Symbol(sym.STRING,yyline,yychar, yytext()));
         return new Symbol(sym.STRING,yyline,yychar, yytext());
            } 
            // fall through
          case 118: break;
          case 55: 
            { T_SIMBOLOS.add(new Symbol(sym.SWITCH,yyline,yychar, yytext()));
       return new Symbol(sym.SWITCH,yyline,yychar, yytext());
            } 
            // fall through
          case 119: break;
          case 56: 
            { T_SIMBOLOS.add(new Symbol(sym.TITULOX,yyline,yychar, yytext()));
              return new Symbol(sym.TITULOX,yyline,yychar, yytext());
            } 
            // fall through
          case 120: break;
          case 57: 
            { T_SIMBOLOS.add(new Symbol(sym.TITULOY,yyline,yychar, yytext()));
              return new Symbol(sym.TITULOY,yyline,yychar, yytext());
            } 
            // fall through
          case 121: break;
          case 58: 
            { T_SIMBOLOS.add(new Symbol(sym.DEFAULT,yyline,yychar, yytext()));
       return new Symbol(sym.DEFAULT,yyline,yychar, yytext());
            } 
            // fall through
          case 122: break;
          case 59: 
            { T_SIMBOLOS.add(new Symbol(sym.CONSOLE,yyline,yychar, yytext()));
              return new Symbol(sym.CONSOLE,yyline,yychar, yytext());
            } 
            // fall through
          case 123: break;
          case 60: 
            { T_SIMBOLOS.add(new Symbol(sym.VALORES,yyline,yychar, yytext()));
              return new Symbol(sym.VALORES,yyline,yychar, yytext());
            } 
            // fall through
          case 124: break;
          case 61: 
            { T_SIMBOLOS.add(new Symbol(sym.NEWVAL,yyline,yychar, yytext()));
              return new Symbol(sym.NEWVAL,yyline,yychar, yytext());
            } 
            // fall through
          case 125: break;
          case 62: 
            { T_SIMBOLOS.add(new Symbol(sym.GRAFPI,yyline,yychar, yytext()));
              return new Symbol(sym.GRAFPI,yyline,yychar, yytext());
            } 
            // fall through
          case 126: break;
          case 63: 
            { T_SIMBOLOS.add(new Symbol(sym.GRAFBAR,yyline,yychar, yytext()));
                   return new Symbol(sym.GRAFBAR,yyline,yychar, yytext());
            } 
            // fall through
          case 127: break;
          case 64: 
            { T_SIMBOLOS.add(new Symbol(sym.DEFGLOB,yyline,yychar, yytext()));
                   return new Symbol(sym.DEFGLOB,yyline,yychar, yytext());
            } 
            // fall through
          case 128: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
