/* The following code was generated by JFlex 1.7.0 */

package analizadores;
import java_cup.runtime.Symbol; 
import java.util.ArrayList;
import java.util.List;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>src/main/java/Analizadores/LexerStatPy.jflex</tt>
 */
public class LexicoStatPy implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\4\1\1\1\76\1\76\1\3\22\0\1\10\1\2\1\11"+
    "\1\0\1\21\1\0\1\65\1\16\1\70\1\71\1\14\1\66\1\75"+
    "\1\67\1\6\1\13\1\27\1\30\1\31\2\5\1\24\1\23\2\25"+
    "\1\26\1\0\1\74\1\63\1\64\1\62\2\0\1\37\1\47\1\51"+
    "\1\45\1\35\1\36\1\50\1\52\1\44\1\57\1\15\1\40\1\54"+
    "\1\17\1\46\1\55\1\15\1\33\1\42\1\20\1\34\1\53\1\56"+
    "\1\60\1\61\1\15\1\72\1\12\1\73\1\0\1\15\1\0\1\37"+
    "\1\47\1\51\1\45\1\35\1\36\1\50\1\52\1\44\1\57\1\15"+
    "\1\40\1\54\1\17\1\46\1\55\1\15\1\33\1\42\1\20\1\34"+
    "\1\53\1\56\1\60\1\61\1\15\1\22\1\7\1\32\7\0\1\76"+
    "\113\0\1\15\37\0\1\15\76\0\2\43\115\0\1\41\u1ea8\0\1\76"+
    "\1\76\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\2\1"+
    "\1\7\1\10\1\11\1\1\2\11\1\12\1\13\1\14"+
    "\2\11\1\1\1\11\1\1\7\11\1\15\1\16\1\17"+
    "\1\1\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\0\1\31\1\0\1\32\1\0\1\33"+
    "\3\0\1\34\1\0\1\11\1\0\3\11\1\0\1\11"+
    "\1\0\12\11\1\35\1\36\1\37\1\40\1\41\1\0"+
    "\1\32\1\0\2\33\1\0\1\34\1\0\1\11\1\0"+
    "\3\11\1\0\1\11\2\42\6\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\32\1\43\4\0\1\11\1\0"+
    "\1\11\1\44\2\0\1\11\1\0\3\11\1\0\1\11"+
    "\1\45\1\11\2\46\2\47\1\0\1\11\4\0\1\11"+
    "\1\0\1\11\1\50\1\0\1\11\1\0\2\11\1\0"+
    "\1\11\1\0\2\11\2\51\1\0\1\11\2\52\2\53"+
    "\1\0\1\11\1\54\1\0\1\11\1\0\3\11\1\55"+
    "\1\56\1\55\1\56\1\0\1\11\1\0\1\11\2\57"+
    "\2\60\1\61\1\0\1\11\2\0\2\11\1\0\1\11"+
    "\2\0\2\11\1\0\1\11\1\0\1\62\1\11\1\62"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\2\63\1\0\1\11\2\64";

  private static int [] zzUnpackAction() {
    int [] result = new int[215];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\77\0\77\0\176\0\275\0\374\0\77\0\u013b"+
    "\0\u017a\0\u01b9\0\77\0\u01f8\0\u0237\0\u0276\0\u02b5\0\77"+
    "\0\77\0\77\0\u02f4\0\u0333\0\u0372\0\u03b1\0\u03f0\0\u042f"+
    "\0\u046e\0\u04ad\0\u04ec\0\u052b\0\u056a\0\u05a9\0\u05e8\0\u0627"+
    "\0\u0666\0\u06a5\0\77\0\77\0\77\0\77\0\77\0\77"+
    "\0\77\0\77\0\77\0\u06e4\0\77\0\u017a\0\77\0\u0723"+
    "\0\u0762\0\u07a1\0\u07e0\0\u081f\0\77\0\u085e\0\u089d\0\u08dc"+
    "\0\u091b\0\u095a\0\u0999\0\u09d8\0\u0a17\0\u0a56\0\u0a95\0\u0ad4"+
    "\0\u0b13\0\u0b52\0\u0b91\0\u0bd0\0\u0c0f\0\u0c4e\0\u0c8d\0\u0ccc"+
    "\0\77\0\77\0\77\0\77\0\u06e4\0\u0d0b\0\u017a\0\u0d4a"+
    "\0\77\0\u0d89\0\u0dc8\0\u07e0\0\u0e07\0\u0e46\0\u0e85\0\u0ec4"+
    "\0\u0f03\0\u0f42\0\u0f81\0\u0fc0\0\77\0\u01f8\0\u0fff\0\u103e"+
    "\0\u107d\0\u10bc\0\u10fb\0\u113a\0\u1179\0\u11b8\0\u11f7\0\u1236"+
    "\0\u1275\0\u12b4\0\u12f3\0\u07a1\0\u1332\0\u1371\0\u13b0\0\u13ef"+
    "\0\u142e\0\u146d\0\u14ac\0\u01f8\0\u14eb\0\u152a\0\u1569\0\u15a8"+
    "\0\u15e7\0\u1626\0\u1665\0\u16a4\0\u16e3\0\u01f8\0\u1722\0\77"+
    "\0\u01f8\0\77\0\u01f8\0\u1761\0\u17a0\0\u17df\0\u181e\0\u185d"+
    "\0\u189c\0\u18db\0\u191a\0\u1959\0\77\0\u1998\0\u19d7\0\u1a16"+
    "\0\u1a55\0\u1a94\0\u1ad3\0\u1b12\0\u1b51\0\u1b90\0\u1bcf\0\77"+
    "\0\u01f8\0\u12f3\0\u1c0e\0\u1c4d\0\u1c8c\0\77\0\u01f8\0\u1ccb"+
    "\0\u1d0a\0\u01f8\0\u1d49\0\u1d88\0\u1dc7\0\u1e06\0\u1e45\0\u1e84"+
    "\0\77\0\77\0\u01f8\0\u01f8\0\u1ec3\0\u1f02\0\u1f41\0\u1f80"+
    "\0\77\0\u01f8\0\77\0\u01f8\0\u01f8\0\u1fbf\0\u1ffe\0\u203d"+
    "\0\u207c\0\u20bb\0\u20fa\0\u2139\0\u2178\0\u21b7\0\u21f6\0\u2235"+
    "\0\u2274\0\u22b3\0\u22f2\0\u2331\0\77\0\u2370\0\u01f8\0\u23af"+
    "\0\u23ee\0\u242d\0\u246c\0\u24ab\0\u24ea\0\u2529\0\u2568\0\u25a7"+
    "\0\u25e6\0\77\0\u01f8\0\u2625\0\u2664\0\77\0\u01f8";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[215];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\2\5\1\6\1\7\1\10\1\5"+
    "\1\11\1\2\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\7\6\1\22\2\14\1\23\1\24\2\14"+
    "\1\25\1\26\1\27\1\30\1\31\2\14\1\32\1\33"+
    "\1\14\1\34\1\35\1\14\1\36\3\14\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\164\0\1\53\15\0\2\5\3\0\1\5"+
    "\73\0\1\6\1\54\14\0\7\6\54\0\1\55\67\0"+
    "\11\56\1\57\1\60\64\56\13\0\1\61\1\62\67\0"+
    "\1\14\7\0\1\14\1\0\2\14\2\0\7\14\1\0"+
    "\6\14\1\0\1\14\1\0\16\14\15\0\1\63\1\0"+
    "\2\63\1\0\4\63\1\0\1\64\3\63\1\65\2\63"+
    "\1\66\55\63\5\0\1\14\7\0\1\14\1\0\2\14"+
    "\2\0\7\14\1\0\2\14\1\67\3\14\1\0\1\14"+
    "\1\0\16\14\22\0\1\14\7\0\1\14\1\0\2\14"+
    "\2\0\7\14\1\0\6\14\1\0\1\14\1\70\1\71"+
    "\15\14\22\0\1\14\7\0\1\14\1\0\2\14\2\0"+
    "\7\14\1\0\6\14\1\0\1\14\1\0\13\14\1\72"+
    "\2\14\22\0\1\14\7\0\1\14\1\0\2\14\2\0"+
    "\7\14\1\0\4\14\1\73\1\14\1\0\1\14\1\0"+
    "\16\14\35\0\1\74\63\0\1\14\7\0\1\14\1\0"+
    "\1\14\1\75\2\0\7\14\1\0\6\14\1\0\1\14"+
    "\1\0\16\14\34\0\1\76\64\0\1\14\7\0\1\14"+
    "\1\0\1\77\1\14\2\0\7\14\1\0\6\14\1\0"+
    "\1\14\1\0\16\14\22\0\1\14\7\0\1\14\1\0"+
    "\2\14\2\0\7\14\1\0\2\14\1\100\3\14\1\0"+
    "\1\14\1\0\2\14\1\101\13\14\22\0\1\14\7\0"+
    "\1\14\1\0\2\14\2\0\7\14\1\0\1\102\5\14"+
    "\1\0\1\14\1\0\16\14\22\0\1\14\7\0\1\14"+
    "\1\0\2\14\2\0\7\14\1\0\6\14\1\0\1\14"+
    "\1\0\2\14\1\103\3\14\1\104\7\14\22\0\1\14"+
    "\7\0\1\14\1\0\2\14\2\0\7\14\1\0\4\14"+
    "\1\105\1\14\1\0\1\14\1\0\2\14\1\106\13\14"+
    "\22\0\1\14\7\0\1\14\1\0\2\14\2\0\7\14"+
    "\1\0\4\14\1\107\1\14\1\0\1\14\1\0\16\14"+
    "\22\0\1\14\7\0\1\14\1\0\2\14\2\0\7\14"+
    "\1\0\1\110\5\14\1\0\1\14\1\0\16\14\101\0"+
    "\1\111\76\0\1\112\76\0\1\113\77\0\1\114\16\0"+
    "\1\115\1\0\2\115\12\0\7\115\45\0\11\116\1\117"+
    "\1\120\64\116\1\61\1\121\1\61\1\122\73\61\2\62"+
    "\1\0\11\62\1\123\62\62\16\0\1\65\71\0\1\63"+
    "\4\0\1\124\2\63\74\0\1\65\3\0\1\125\61\0"+
    "\1\14\7\0\1\14\1\0\2\14\2\0\7\14\1\0"+
    "\6\14\1\0\1\14\1\0\12\14\1\126\3\14\35\0"+
    "\1\127\63\0\1\14\7\0\1\14\1\0\1\14\1\130"+
    "\2\0\7\14\1\0\6\14\1\0\1\14\1\0\16\14"+
    "\22\0\1\14\7\0\1\14\1\0\2\14\2\0\7\14"+
    "\1\0\2\14\1\131\3\14\1\0\1\14\1\0\16\14"+
    "\22\0\1\14\7\0\1\14\1\0\2\14\2\0\7\14"+
    "\1\0\5\14\1\132\1\0\1\14\1\0\16\14\50\0"+
    "\1\133\50\0\1\14\7\0\1\14\1\0\2\14\2\0"+
    "\7\14\1\0\1\134\5\14\1\0\1\14\1\0\16\14"+
    "\35\0\1\135\63\0\1\14\7\0\1\14\1\0\1\14"+
    "\1\136\2\0\7\14\1\0\6\14\1\0\1\14\1\0"+
    "\16\14\22\0\1\14\7\0\1\14\1\0\2\14\2\0"+
    "\7\14\1\0\3\14\1\137\2\14\1\0\1\14\1\0"+
    "\16\14\22\0\1\14\7\0\1\14\1\0\2\14\2\0"+
    "\7\14\1\0\1\14\1\140\4\14\1\0\1\14\1\0"+
    "\16\14\22\0\1\14\7\0\1\14\1\0\2\14\2\0"+
    "\7\14\1\0\4\14\1\141\1\14\1\0\1\14\1\0"+
    "\16\14\22\0\1\14\7\0\1\14\1\0\1\142\1\14"+
    "\2\0\7\14\1\0\6\14\1\0\1\14\1\0\16\14"+
    "\22\0\1\14\7\0\1\14\1\0\2\14\2\0\7\14"+
    "\1\0\4\14\1\143\1\14\1\0\1\14\1\0\16\14"+
    "\22\0\1\14\7\0\1\14\1\0\2\14\2\0\7\14"+
    "\1\0\5\14\1\144\1\0\1\14\1\0\16\14\22\0"+
    "\1\14\7\0\1\14\1\0\2\14\2\0\7\14\1\0"+
    "\6\14\1\0\1\14\1\145\1\146\15\14\22\0\1\14"+
    "\7\0\1\14\1\0\2\14\2\0\7\14\1\0\6\14"+
    "\1\0\1\14\1\147\1\150\15\14\22\0\1\14\7\0"+
    "\1\14\1\0\2\14\2\0\7\14\1\0\6\14\1\0"+
    "\1\14\1\151\1\152\15\14\15\0\11\116\1\57\1\120"+
    "\75\116\1\153\1\120\64\116\1\0\1\121\75\0\2\62"+
    "\1\0\10\62\1\154\1\123\62\62\23\0\1\155\1\0"+
    "\1\156\1\157\1\0\1\160\53\0\1\14\7\0\1\14"+
    "\1\0\2\14\2\0\7\14\1\0\6\14\1\0\1\14"+
    "\1\0\7\14\1\161\6\14\51\0\1\162\47\0\1\14"+
    "\7\0\1\14\1\0\2\14\2\0\7\14\1\0\1\14"+
    "\1\163\4\14\1\0\1\14\1\0\16\14\22\0\1\14"+
    "\7\0\1\14\1\0\2\14\2\0\7\14\1\0\6\14"+
    "\1\0\1\14\1\0\14\14\1\164\1\14\22\0\1\14"+
    "\7\0\1\14\1\0\2\14\2\0\7\14\1\0\6\14"+
    "\1\165\1\14\1\0\16\14\60\0\2\166\37\0\1\14"+
    "\7\0\1\14\1\0\2\14\2\0\7\14\1\0\6\14"+
    "\1\0\1\14\1\166\1\167\15\14\22\0\1\14\7\0"+
    "\1\14\1\0\2\14\2\0\7\14\1\0\6\14\1\0"+
    "\1\14\1\170\1\171\15\14\22\0\1\14\7\0\1\14"+
    "\1\0\2\14\2\0\7\14\1\0\6\14\1\0\1\14"+
    "\1\0\3\14\1\172\12\14\22\0\1\14\7\0\1\14"+
    "\1\0\2\14\2\0\7\14\1\0\3\14\1\173\2\14"+
    "\1\0\1\14\1\0\16\14\22\0\1\14\7\0\1\14"+
    "\1\0\2\14\2\0\7\14\1\0\6\14\1\174\1\175"+
    "\1\0\16\14\22\0\1\14\7\0\1\14\1\0\2\14"+
    "\2\0\7\14\1\0\1\176\5\14\1\0\1\14\1\0"+
    "\16\14\22\0\1\14\7\0\1\14\1\0\2\14\2\0"+
    "\7\14\1\0\6\14\1\0\1\14\1\0\2\14\1\177"+
    "\13\14\62\0\1\200\36\0\1\14\7\0\1\14\1\0"+
    "\2\14\2\0\7\14\1\0\6\14\1\0\1\14\1\0"+
    "\1\14\1\201\14\14\34\0\1\202\64\0\1\14\7\0"+
    "\1\14\1\0\1\203\1\14\2\0\7\14\1\0\6\14"+
    "\1\0\1\14\1\0\16\14\35\0\1\204\63\0\1\14"+
    "\7\0\1\14\1\0\1\14\1\205\2\0\7\14\1\0"+
    "\6\14\1\0\1\14\1\0\16\14\15\0\11\206\1\57"+
    "\1\207\64\206\23\0\4\210\55\0\1\210\15\0\7\210"+
    "\72\0\3\210\76\0\2\156\1\211\52\0\1\14\7\0"+
    "\1\14\1\0\2\14\2\0\7\14\1\0\4\14\1\212"+
    "\1\14\1\0\1\14\1\0\16\14\55\0\1\213\43\0"+
    "\1\14\7\0\1\14\1\0\2\14\2\0\7\14\1\0"+
    "\5\14\1\214\1\0\1\14\1\0\16\14\52\0\1\215"+
    "\60\0\1\216\64\0\1\14\7\0\1\14\1\0\1\217"+
    "\1\14\2\0\7\14\1\0\6\14\1\0\1\14\1\0"+
    "\16\14\34\0\1\220\64\0\1\14\7\0\1\14\1\0"+
    "\1\221\1\14\2\0\7\14\1\0\6\14\1\0\1\14"+
    "\1\0\16\14\22\0\1\14\7\0\1\14\1\0\2\14"+
    "\2\0\7\14\1\0\5\14\1\222\1\0\1\14\1\0"+
    "\16\14\22\0\1\14\7\0\1\14\1\0\2\14\2\0"+
    "\7\14\1\0\6\14\1\0\1\14\1\223\1\224\15\14"+
    "\63\0\1\225\35\0\1\14\7\0\1\14\1\0\2\14"+
    "\2\0\7\14\1\0\6\14\1\0\1\14\1\0\2\14"+
    "\1\226\13\14\22\0\1\14\7\0\1\14\1\0\2\14"+
    "\2\0\7\14\1\0\1\227\5\14\1\0\1\14\1\0"+
    "\16\14\52\0\1\230\46\0\1\14\7\0\1\14\1\0"+
    "\2\14\2\0\7\14\1\0\2\14\1\231\3\14\1\0"+
    "\1\14\1\0\16\14\15\0\11\206\1\0\1\207\64\206"+
    "\11\0\1\232\117\0\1\63\73\0\3\210\52\0\1\14"+
    "\7\0\1\14\1\0\2\14\2\0\7\14\1\0\5\14"+
    "\1\233\1\0\1\14\1\0\16\14\63\0\1\234\35\0"+
    "\1\14\7\0\1\14\1\0\2\14\2\0\7\14\1\0"+
    "\6\14\1\0\1\14\1\0\2\14\1\235\13\14\65\0"+
    "\1\236\33\0\1\14\7\0\1\14\1\0\2\14\2\0"+
    "\7\14\1\0\6\14\1\0\1\14\1\0\4\14\1\237"+
    "\11\14\60\0\2\240\37\0\1\14\7\0\1\14\1\0"+
    "\2\14\2\0\7\14\1\0\6\14\1\0\1\14\1\240"+
    "\1\241\15\14\22\0\1\14\7\0\1\14\1\0\2\14"+
    "\2\0\7\14\1\0\2\14\1\242\3\14\1\0\1\14"+
    "\1\0\16\14\66\0\1\243\32\0\1\14\7\0\1\14"+
    "\1\0\2\14\2\0\7\14\1\0\6\14\1\0\1\14"+
    "\1\0\5\14\1\244\10\14\55\0\1\245\43\0\1\14"+
    "\7\0\1\14\1\0\2\14\2\0\7\14\1\0\5\14"+
    "\1\246\1\0\1\14\1\0\16\14\22\0\1\14\7\0"+
    "\1\14\1\0\2\14\2\0\7\14\1\0\2\14\1\247"+
    "\3\14\1\0\1\14\1\0\16\14\22\0\1\14\7\0"+
    "\1\14\1\0\2\14\2\0\7\14\1\0\6\14\1\0"+
    "\1\14\1\0\2\14\1\250\13\14\75\0\1\251\1\252"+
    "\22\0\1\14\7\0\1\14\1\0\2\14\2\0\7\14"+
    "\1\0\6\14\1\0\1\14\1\0\14\14\1\253\1\254"+
    "\50\0\1\255\50\0\1\14\7\0\1\14\1\0\2\14"+
    "\2\0\7\14\1\0\1\256\5\14\1\0\1\14\1\0"+
    "\16\14\54\0\1\257\44\0\1\14\7\0\1\14\1\0"+
    "\2\14\2\0\7\14\1\0\4\14\1\260\1\14\1\0"+
    "\1\14\1\0\16\14\52\0\1\261\46\0\1\14\7\0"+
    "\1\14\1\0\2\14\2\0\7\14\1\0\2\14\1\262"+
    "\3\14\1\0\1\14\1\0\16\14\22\0\1\14\7\0"+
    "\1\14\1\0\2\14\2\0\7\14\1\0\6\14\1\263"+
    "\1\264\1\0\16\14\22\0\1\14\7\0\1\14\1\0"+
    "\2\14\2\0\7\14\1\0\1\265\5\14\1\0\1\14"+
    "\1\0\16\14\65\0\1\266\33\0\1\14\7\0\1\14"+
    "\1\0\2\14\2\0\7\14\1\0\6\14\1\0\1\14"+
    "\1\0\4\14\1\267\11\14\64\0\1\270\5\0\1\271"+
    "\26\0\1\14\7\0\1\14\1\0\2\14\2\0\7\14"+
    "\1\0\6\14\1\0\1\14\1\0\3\14\1\272\5\14"+
    "\1\273\4\14\55\0\1\274\43\0\1\14\7\0\1\14"+
    "\1\0\2\14\2\0\7\14\1\0\5\14\1\275\1\0"+
    "\1\14\1\0\16\14\54\0\1\276\102\0\2\277\37\0"+
    "\1\14\7\0\1\14\1\0\2\14\2\0\7\14\1\0"+
    "\4\14\1\300\1\14\1\0\1\14\1\0\16\14\22\0"+
    "\1\14\7\0\1\14\1\0\2\14\2\0\7\14\1\0"+
    "\6\14\1\0\1\14\1\277\1\301\15\14\63\0\1\302"+
    "\35\0\1\14\7\0\1\14\1\0\2\14\2\0\7\14"+
    "\1\0\6\14\1\0\1\14\1\0\2\14\1\303\13\14"+
    "\50\0\1\304\100\0\1\305\46\0\1\14\7\0\1\14"+
    "\1\0\2\14\2\0\7\14\1\0\1\306\5\14\1\0"+
    "\1\14\1\0\16\14\22\0\1\14\7\0\1\14\1\0"+
    "\2\14\2\0\7\14\1\0\2\14\1\307\3\14\1\0"+
    "\1\14\1\0\16\14\64\0\1\310\34\0\1\14\7\0"+
    "\1\14\1\0\2\14\2\0\7\14\1\0\6\14\1\0"+
    "\1\14\1\0\3\14\1\311\12\14\50\0\1\312\50\0"+
    "\1\14\7\0\1\14\1\0\2\14\2\0\7\14\1\0"+
    "\1\313\5\14\1\0\1\14\1\0\16\14\54\0\1\314"+
    "\44\0\1\14\7\0\1\14\1\0\2\14\2\0\7\14"+
    "\1\0\4\14\1\315\1\14\1\0\1\14\1\0\16\14"+
    "\54\0\1\316\44\0\1\14\7\0\1\14\1\0\2\14"+
    "\2\0\7\14\1\0\4\14\1\317\1\14\1\0\1\14"+
    "\1\0\16\14\55\0\1\320\43\0\1\14\7\0\1\14"+
    "\1\0\2\14\2\0\7\14\1\0\5\14\1\321\1\0"+
    "\1\14\1\0\16\14\56\0\2\322\41\0\1\14\7\0"+
    "\1\14\1\0\2\14\2\0\7\14\1\0\6\14\1\322"+
    "\1\323\1\0\16\14\52\0\1\324\46\0\1\14\7\0"+
    "\1\14\1\0\2\14\2\0\7\14\1\0\2\14\1\325"+
    "\3\14\1\0\1\14\1\0\16\14\56\0\2\326\41\0"+
    "\1\14\7\0\1\14\1\0\2\14\2\0\7\14\1\0"+
    "\6\14\1\326\1\327\1\0\16\14\15\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9891];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\3\1\1\11\3\1\1\11\4\1\3\11"+
    "\20\1\11\11\1\0\1\11\1\0\1\11\1\0\1\1"+
    "\3\0\1\11\1\0\1\1\1\0\3\1\1\0\1\1"+
    "\1\0\12\1\4\11\1\1\1\0\1\1\1\0\1\11"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\3\1\1\0"+
    "\1\1\1\11\7\1\1\0\1\1\1\0\1\1\1\0"+
    "\3\1\4\0\1\1\1\0\2\1\2\0\1\1\1\0"+
    "\3\1\1\0\3\1\1\11\1\1\1\11\1\1\1\0"+
    "\1\1\4\0\1\1\1\0\1\1\1\11\1\0\1\1"+
    "\1\0\2\1\1\0\1\1\1\0\2\1\1\11\1\1"+
    "\1\0\3\1\1\11\1\1\1\0\2\1\1\0\1\1"+
    "\1\0\3\1\2\11\2\1\1\0\1\1\1\0\1\1"+
    "\1\11\1\1\1\11\2\1\1\0\1\1\2\0\2\1"+
    "\1\0\1\1\2\0\2\1\1\0\1\1\1\0\1\11"+
    "\2\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\11\1\1\1\0\1\1\1\11"+
    "\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[215];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    
    public List<Symbol> T_SIMBOLOS = new ArrayList<Symbol>();
    public List<Errores.ErrorLexico> ErroresLexicos = new ArrayList<Errores.ErrorLexico>();


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexicoStatPy(java.io.Reader in) {
      yyline = 1; 
    yychar = 0; 
    
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 256) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { Errores.ErrorLexico err=new Errores.ErrorLexico(yytext(),yyline,yychar);
    ErroresLexicos.add(err);
    System.out.println("Este es un error lexico: "+yytext()+", en la linea: "+yyline+", en la columna: "+yychar);
            } 
            // fall through
          case 53: break;
          case 2: 
            { yychar=0;
            } 
            // fall through
          case 54: break;
          case 3: 
            { T_SIMBOLOS.add(new Symbol(sym.NOT,yyline,yychar, yytext()));
        return new Symbol(sym.NOT,yyline,yychar, yytext());
            } 
            // fall through
          case 55: break;
          case 4: 
            { /*Ignorar Espacios en Blanco*/
            } 
            // fall through
          case 56: break;
          case 5: 
            { T_SIMBOLOS.add(new Symbol(sym.ENTERO,yyline,yychar, yytext()));
        return new Symbol(sym.ENTERO,yyline,yychar, yytext());
            } 
            // fall through
          case 57: break;
          case 6: 
            { T_SIMBOLOS.add(new Symbol(sym.PUNTO,yyline,yychar, yytext()));
     return new Symbol(sym.PUNTO,yyline,yychar, yytext());
            } 
            // fall through
          case 58: break;
          case 7: 
            { T_SIMBOLOS.add(new Symbol(sym.DIVIDIDO,yyline,yychar, yytext()));
        return new Symbol(sym.DIVIDIDO,yyline,yychar, yytext());
            } 
            // fall through
          case 59: break;
          case 8: 
            { T_SIMBOLOS.add(new Symbol(sym.POR,yyline,yychar, yytext()));
        return new Symbol(sym.POR,yyline,yychar, yytext());
            } 
            // fall through
          case 60: break;
          case 9: 
            { T_SIMBOLOS.add(new Symbol(sym.IDENT,yyline,yychar, yytext()));
                      return new Symbol(sym.IDENT,yyline,yychar, yytext());
            } 
            // fall through
          case 61: break;
          case 10: 
            { T_SIMBOLOS.add(new Symbol(sym.DOLAR,yyline,yychar, yytext()));
     return new Symbol(sym.DOLAR,yyline,yychar, yytext());
            } 
            // fall through
          case 62: break;
          case 11: 
            { T_SIMBOLOS.add(new Symbol(sym.BRAIZQ,yyline,yychar, yytext()));
    return new Symbol(sym.BRAIZQ,yyline,yychar, yytext());
            } 
            // fall through
          case 63: break;
          case 12: 
            { T_SIMBOLOS.add(new Symbol(sym.BRADER,yyline,yychar, yytext()));
     return new Symbol(sym.BRADER,yyline,yychar, yytext());
            } 
            // fall through
          case 64: break;
          case 13: 
            { T_SIMBOLOS.add(new Symbol(sym.MAYOR,yyline,yychar, yytext()));
        return new Symbol(sym.MAYOR,yyline,yychar, yytext());
            } 
            // fall through
          case 65: break;
          case 14: 
            { T_SIMBOLOS.add(new Symbol(sym.MENOR,yyline,yychar, yytext()));
        return new Symbol(sym.MENOR,yyline,yychar, yytext());
            } 
            // fall through
          case 66: break;
          case 15: 
            { T_SIMBOLOS.add(new Symbol(sym.IGUAL,yyline,yychar, yytext()));
     return new Symbol(sym.IGUAL,yyline,yychar, yytext());
            } 
            // fall through
          case 67: break;
          case 16: 
            { T_SIMBOLOS.add(new Symbol(sym.MAS,yyline,yychar, yytext()));
        return new Symbol(sym.MAS,yyline,yychar, yytext());
            } 
            // fall through
          case 68: break;
          case 17: 
            { T_SIMBOLOS.add(new Symbol(sym.MENOS,yyline,yychar, yytext()));
        return new Symbol(sym.MENOS,yyline,yychar, yytext());
            } 
            // fall through
          case 69: break;
          case 18: 
            { T_SIMBOLOS.add(new Symbol(sym.PARIZQ,yyline,yychar, yytext()));
        return new Symbol(sym.PARIZQ,yyline,yychar, yytext());
            } 
            // fall through
          case 70: break;
          case 19: 
            { T_SIMBOLOS.add(new Symbol(sym.PARDER,yyline,yychar, yytext()));
        return new Symbol(sym.PARDER,yyline,yychar, yytext());
            } 
            // fall through
          case 71: break;
          case 20: 
            { T_SIMBOLOS.add(new Symbol(sym.LLAIZQ,yyline,yychar, yytext()));
    return new Symbol(sym.LLAIZQ,yyline,yychar, yytext());
            } 
            // fall through
          case 72: break;
          case 21: 
            { T_SIMBOLOS.add(new Symbol(sym.LLADER,yyline,yychar, yytext()));
     return new Symbol(sym.LLADER,yyline,yychar, yytext());
            } 
            // fall through
          case 73: break;
          case 22: 
            { T_SIMBOLOS.add(new Symbol(sym.PTOCOMA,yyline,yychar, yytext()));
     return new Symbol(sym.PTOCOMA,yyline,yychar, yytext());
            } 
            // fall through
          case 74: break;
          case 23: 
            { T_SIMBOLOS.add(new Symbol(sym.COMA,yyline,yychar, yytext()));
     return new Symbol(sym.COMA,yyline,yychar, yytext());
            } 
            // fall through
          case 75: break;
          case 24: 
            { T_SIMBOLOS.add(new Symbol(sym.NOTEQUALS,yyline,yychar, yytext()));
        return new Symbol(sym.NOTEQUALS,yyline,yychar, yytext());
            } 
            // fall through
          case 76: break;
          case 25: 
            { T_SIMBOLOS.add(new Symbol(sym.OR,yyline,yychar, yytext()));
        return new Symbol(sym.OR,yyline,yychar, yytext());
            } 
            // fall through
          case 77: break;
          case 26: 
            { T_SIMBOLOS.add(new Symbol(sym.CADENA,yyline,yychar, yytext()));
          return new Symbol(sym.CADENA,yyline,yychar, yytext());
            } 
            // fall through
          case 78: break;
          case 27: 
            { /*Ignorar Espacios Comentarios*/
            } 
            // fall through
          case 79: break;
          case 28: 
            { T_SIMBOLOS.add(new Symbol(sym.CHAR,yyline,yychar, yytext()));
          return new Symbol(sym.CHAR,yyline,yychar, yytext());
            } 
            // fall through
          case 80: break;
          case 29: 
            { T_SIMBOLOS.add(new Symbol(sym.MAYORIGUAL,yyline,yychar, yytext()));
        return new Symbol(sym.MAYORIGUAL,yyline,yychar, yytext());
            } 
            // fall through
          case 81: break;
          case 30: 
            { T_SIMBOLOS.add(new Symbol(sym.MENORIGUAL,yyline,yychar, yytext()));
        return new Symbol(sym.MENORIGUAL,yyline,yychar, yytext());
            } 
            // fall through
          case 82: break;
          case 31: 
            { T_SIMBOLOS.add(new Symbol(sym.EQUALS,yyline,yychar, yytext()));
        return new Symbol(sym.EQUALS,yyline,yychar, yytext());
            } 
            // fall through
          case 83: break;
          case 32: 
            { T_SIMBOLOS.add(new Symbol(sym.AND,yyline,yychar, yytext()));
        return new Symbol(sym.AND,yyline,yychar, yytext());
            } 
            // fall through
          case 84: break;
          case 33: 
            { T_SIMBOLOS.add(new Symbol(sym.DECIMAL,yyline,yychar, yytext()));
      return new Symbol(sym.DECIMAL,yyline,yychar, yytext());
            } 
            // fall through
          case 85: break;
          case 34: 
            { T_SIMBOLOS.add(new Symbol(sym.INT,yyline,yychar, yytext()));
       return new Symbol(sym.INT,yyline,yychar, yytext());
            } 
            // fall through
          case 86: break;
          case 35: 
            { /*Ignorar Espacios*/
            } 
            // fall through
          case 87: break;
          case 36: 
            { T_SIMBOLOS.add(new Symbol(sym.EJEX,yyline,yychar, yytext()));
              return new Symbol(sym.EJEX,yyline,yychar, yytext());
            } 
            // fall through
          case 88: break;
          case 37: 
            { T_SIMBOLOS.add(new Symbol(sym.PCHAR,yyline,yychar, yytext()));
         return new Symbol(sym.PCHAR,yyline,yychar, yytext());
            } 
            // fall through
          case 89: break;
          case 38: 
            { T_SIMBOLOS.add(new Symbol(sym.VOID,yyline,yychar, yytext()));
        return new Symbol(sym.VOID,yyline,yychar, yytext());
            } 
            // fall through
          case 90: break;
          case 39: 
            { T_SIMBOLOS.add(new Symbol(sym.MAIN,yyline,yychar, yytext()));
        return new Symbol(sym.MAIN,yyline,yychar, yytext());
            } 
            // fall through
          case 91: break;
          case 40: 
            { T_SIMBOLOS.add(new Symbol(sym.TF,yyline,yychar, yytext()));
      return new Symbol(sym.TF,yyline,yychar, yytext());
            } 
            // fall through
          case 92: break;
          case 41: 
            { T_SIMBOLOS.add(new Symbol(sym.WRITE,yyline,yychar, yytext()));
              return new Symbol(sym.WRITE,yyline,yychar, yytext());
            } 
            // fall through
          case 93: break;
          case 42: 
            { T_SIMBOLOS.add(new Symbol(sym.TITULO,yyline,yychar, yytext()));
              return new Symbol(sym.TITULO,yyline,yychar, yytext());
            } 
            // fall through
          case 94: break;
          case 43: 
            { T_SIMBOLOS.add(new Symbol(sym.STRING,yyline,yychar, yytext()));
         return new Symbol(sym.STRING,yyline,yychar, yytext());
            } 
            // fall through
          case 95: break;
          case 44: 
            { T_SIMBOLOS.add(new Symbol(sym.DOUBLE,yyline,yychar, yytext()));
         return new Symbol(sym.DOUBLE,yyline,yychar, yytext());
            } 
            // fall through
          case 96: break;
          case 45: 
            { T_SIMBOLOS.add(new Symbol(sym.TITULOX,yyline,yychar, yytext()));
              return new Symbol(sym.TITULOX,yyline,yychar, yytext());
            } 
            // fall through
          case 97: break;
          case 46: 
            { T_SIMBOLOS.add(new Symbol(sym.TITULOY,yyline,yychar, yytext()));
              return new Symbol(sym.TITULOY,yyline,yychar, yytext());
            } 
            // fall through
          case 98: break;
          case 47: 
            { T_SIMBOLOS.add(new Symbol(sym.CONSOLE,yyline,yychar, yytext()));
              return new Symbol(sym.CONSOLE,yyline,yychar, yytext());
            } 
            // fall through
          case 99: break;
          case 48: 
            { T_SIMBOLOS.add(new Symbol(sym.VALORES,yyline,yychar, yytext()));
              return new Symbol(sym.VALORES,yyline,yychar, yytext());
            } 
            // fall through
          case 100: break;
          case 49: 
            { T_SIMBOLOS.add(new Symbol(sym.NEWVAL,yyline,yychar, yytext()));
              return new Symbol(sym.NEWVAL,yyline,yychar, yytext());
            } 
            // fall through
          case 101: break;
          case 50: 
            { T_SIMBOLOS.add(new Symbol(sym.GRAFPI,yyline,yychar, yytext()));
              return new Symbol(sym.GRAFPI,yyline,yychar, yytext());
            } 
            // fall through
          case 102: break;
          case 51: 
            { T_SIMBOLOS.add(new Symbol(sym.GRAFBAR,yyline,yychar, yytext()));
                   return new Symbol(sym.GRAFBAR,yyline,yychar, yytext());
            } 
            // fall through
          case 103: break;
          case 52: 
            { T_SIMBOLOS.add(new Symbol(sym.DEFGLOB,yyline,yychar, yytext()));
                   return new Symbol(sym.DEFGLOB,yyline,yychar, yytext());
            } 
            // fall through
          case 104: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
