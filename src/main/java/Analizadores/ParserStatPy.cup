package analizadores; 
import java_cup.runtime.*;
import java.util.HashMap;
import Estructuras.Variable;
import java.util.ArrayList;
import java.util.List;

parser code 
{:
    
    public void syntax_error(Symbol s){ 
        System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
    } 

    
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido."); 
    } 

    //Tabla de Variables y Tokens
    public HashMap<String, Object> t_variables = new HashMap<String, Object>();
    public String Titulo_Barras,TituloEjeX_Barras,TituloEjeY_Barras;
    public List<String> EjeX= new ArrayList<String>();
    public List<Double> Valores= new ArrayList<Double>();
    
    public String Titulo_Pie;
    public List<String> EjeX_Pie= new ArrayList<String>();
    public List<Double> Valores_Pie= new ArrayList<Double>();
    

    public String Traduccion="";
    

:} 

terminal String BRAIZQ,BRADER,CADENA,DECIMAL,VOID,MAIN,PARDER,PARIZQ,IDENT,IGUAL,DEFGLOB,GRAFBAR,GRAFPI,PTOCOMA,INT,DOUBLE,STRING,ENTERO;
terminal String NEWVAL,DOLAR,COMA,LLAIZQ,LLADER,TITULO,EJEX,VALORES,TITULOY,TITULOX,CONSOLE,WRITE,PUNTO;
terminal String MAS,MENOS,POR,DIVIDIDO;
terminal String MAYOR,MENOR,MAYORIGUAL,MENORIGUAL,EQUALS,NOTEQUALS,NOT,AND,OR;
terminal String UMENOS;
terminal String CHAR,PCHAR,TRUE,FALSE,BOOL,IF,ELSE;


non terminal inicio,instrucciones,globales,barras,pie,listainstrucciones,listaglobales,variablesglobales;
non terminal String expresion;
non terminal variablesjson,listabarras,instruccionesbarras,listastring,arreglostring,listadouble,arreglodouble;
nonterminal  listapie,instruccionespie,listastringpie,arreglostringpie,listadoublepie,arreglodoublepie;
non terminal String aritmetica,logica,symbols,uno;
non terminal String declaracion,print,if,sentencias;
non terminal String listasentencias;

precedence left MAYOR,MENOR,MAYORIGUAL,MENORIGUAL,EQUALS,NOTEQUALS;
precedence left AND, OR;
precedence left MAS,MENOS;
precedence left POR,DIVIDIDO;
precedence right UMENOS,NOT;


start with inicio; 

inicio::= VOID MAIN PARIZQ PARDER BRAIZQ listainstrucciones BRADER
;



listainstrucciones::= listainstrucciones instrucciones
                      |instrucciones
;

instrucciones::= sentencias:a {:System.out.println(a);Traduccion+=a+"\n";:}
                |globales
                |barras
                |pie
;

sentencias::=declaracion:a{:RESULT=a;:}
            | print:a{:RESULT=a;:}
            | if:a{:RESULT=a;:}
;



if::=IF PARIZQ expresion:a PARDER BRAIZQ listasentencias:s BRADER{:RESULT="if "+a+":\n"+"    "+s;:}
     |ELSE IF PARIZQ expresion:a PARDER  BRAIZQ listasentencias:s BRADER{:RESULT="elif "+a+":\n"+"    "+s;:}
     |ELSE BRAIZQ listasentencias:s BRADER{:RESULT="else:\n"+"    "+s;:}
;


listasentencias::=listasentencias:b sentencias:a {:RESULT=b+"\n    "+a;:}
                 | sentencias:a{:RESULT="    "+a;:}
;




declaracion ::=INT IDENT:b IGUAL:c expresion:exp PTOCOMA:d{:RESULT=b+c+exp;:}
            |DOUBLE IDENT:b IGUAL:c expresion:exp PTOCOMA:d{:RESULT=b+c+exp;:}
            |STRING IDENT:b IGUAL:c expresion:exp PTOCOMA:d{:RESULT=b+c+exp;:}
            |PCHAR IDENT:b IGUAL:c expresion:exp PTOCOMA:d{:RESULT=b+c+exp;:}
            |BOOL IDENT:b IGUAL:c expresion:exp PTOCOMA:d{:RESULT=b+c+exp;:}
;

print::=CONSOLE:a PUNTO:b WRITE:c PARIZQ:d expresion:exp PARDER:e PTOCOMA:f{:RESULT="print("+exp+")";:}
;

expresion ::=symbols:a{:RESULT=a;:}
            | uno:a {:RESULT=a;:}
            | aritmetica:a{:RESULT=a;:}
            | logica:a {:RESULT=a;:}
            | PARIZQ expresion:a PARDER{:RESULT="("+a+")";:}
;

symbols::=IDENT:a{:RESULT=a;:}
         |CADENA:a{:RESULT=a;:}
         |CHAR:a{:RESULT=a;:}
         |TRUE:a {:RESULT="True";:}
         |FALSE:a {:RESULT="False";:}
;

aritmetica ::= expresion:a MAS expresion:b {:RESULT=a+"+"+b;:}	
	|  expresion:a MENOS expresion:b	{:RESULT=a+"-"+b;:}	
	|  expresion:a POR expresion:b    {:RESULT=a+"*"+b;:}
	|  expresion:a DIVIDIDO expresion:b {:RESULT=a+"/"+b;:}
        |  DECIMAL:dec {:RESULT=dec;:}	
        |  ENTERO:en {:RESULT=en;:}
;

logica::=expresion:a MAYOR:b expresion:c{:RESULT=a+" "+b+" "+c;:}
        |expresion:a MENOR:b expresion:c{:RESULT=a+" "+b+" "+c;:}
        |expresion:a MAYORIGUAL:b expresion:c{:RESULT=a+" "+b+" "+c;:}
        |expresion:a MENORIGUAL:b expresion:c{:RESULT=a+" "+b+" "+c;:}
        |expresion:a EQUALS:b expresion:c{:RESULT=a+" "+b+" "+c;:}
        |expresion:a NOTEQUALS:b expresion:c{:RESULT=a+" "+b+" "+c;:}
        |expresion:a AND expresion:c{:RESULT=a+" and "+c;:}
        |expresion:a OR expresion:c{:RESULT=a+" or "+c;:}
;


uno::=MENOS:a expresion:b{:RESULT=a+b;:} %prec UMENOS
    |NOT expresion:b   {:RESULT="not "+b;:} %prec NOT
;



globales::=VOID DEFGLOB PARIZQ PARDER BRAIZQ listaglobales BRADER
           
;

listaglobales::=listaglobales variablesglobales
                | variablesglobales
;

variablesglobales::=  STRING IDENT:a IGUAL CADENA:b PTOCOMA{:t_variables.put(a,b.replace("\"",""));:}
                    | DOUBLE IDENT:a IGUAL DECIMAL:b PTOCOMA{:t_variables.put(a,b);:}
                    | DOUBLE IDENT:a IGUAL variablesjson:b PTOCOMA{:t_variables.put(a,b);:}
                    | STRING IDENT:a IGUAL variablesjson:b PTOCOMA{:t_variables.put(a,b);:}   
;

variablesjson::= DOLAR BRAIZQ NEWVAL COMA CADENA:a COMA CADENA:b BRADER{:
Object var=Variable.BuscarVariable(a.replace("\"",""),b.replace("\"",""));
RESULT=var;:}
;

barras::=VOID GRAFBAR PARIZQ PARDER BRAIZQ listabarras BRADER
         
;

listabarras::=listabarras instruccionesbarras
            | instruccionesbarras
;

instruccionesbarras::=STRING TITULO  IGUAL IDENT:a PTOCOMA{:Titulo_Barras=t_variables.get(a).toString();:}
                     |STRING TITULO  IGUAL CADENA:a PTOCOMA{:Titulo_Barras=a.replace("\"","");:}
                     |STRING TITULO  IGUAL variablesjson:a PTOCOMA{:Titulo_Barras=a.toString();:}
                     |STRING TITULOX IGUAL IDENT:a PTOCOMA{:TituloEjeX_Barras=t_variables.get(a).toString();:}
                     |STRING TITULOX IGUAL CADENA:a PTOCOMA{:TituloEjeX_Barras=a.replace("\"","");:}
                     |STRING TITULOX IGUAL variablesjson:a PTOCOMA{:TituloEjeX_Barras=a.toString();:}
                     |STRING TITULOY IGUAL IDENT:a PTOCOMA{:TituloEjeY_Barras=t_variables.get(a).toString();:}
                     |STRING TITULOY IGUAL CADENA:a PTOCOMA{:TituloEjeY_Barras=a.replace("\"","");:}
                     |STRING TITULOY IGUAL variablesjson:a PTOCOMA{:TituloEjeY_Barras=a.toString();:}
                     |STRING LLAIZQ LLADER EJEX IGUAL BRAIZQ listastring BRADER PTOCOMA
                     |DOUBLE LLAIZQ LLADER VALORES IGUAL BRAIZQ listadouble BRADER PTOCOMA  
;


listastring::=listastring COMA arreglostring
               |arreglostring
;

arreglostring ::=CADENA:a{:EjeX.add(a.replace("\"",""));:}
                |IDENT:a{:EjeX.add(t_variables.get(a).toString());:}
                |variablesjson:a{:EjeX.add(a.toString());:}
;

listadouble::=listadouble COMA arreglodouble
              |arreglodouble
;

arreglodouble ::=DECIMAL:a{:Valores.add(Double.parseDouble(a));:}
                |IDENT:a{:String numero=t_variables.get(a).toString();
                          Valores.add(Double.parseDouble(numero));:}
                |variablesjson:a{:String numero=a.toString();
                                  Valores.add(Double.parseDouble(numero));:}
                |ENTERO:a{:Valores.add(Double.parseDouble(a));:}
;

pie::=VOID GRAFPI PARIZQ PARDER BRAIZQ listapie BRADER
;


listapie::=listapie instruccionespie
          |instruccionespie
;

instruccionespie::=STRING TITULO  IGUAL IDENT:a PTOCOMA{:Titulo_Pie=t_variables.get(a).toString();:}
                     |STRING TITULO  IGUAL CADENA:a PTOCOMA{:Titulo_Pie=a.replace("\"","");:}
                     |STRING TITULO  IGUAL variablesjson:a PTOCOMA{:Titulo_Pie=a.toString();:}
                     |STRING LLAIZQ LLADER EJEX IGUAL BRAIZQ listastringpie BRADER PTOCOMA
                     |DOUBLE LLAIZQ LLADER VALORES IGUAL BRAIZQ listadoublepie BRADER PTOCOMA
;


listastringpie::=listastringpie COMA arreglostringpie
                 |arreglostringpie
;

listadoublepie::=listadoublepie COMA arreglodoublepie
                 |arreglodoublepie
;


arreglostringpie::=CADENA:a{:EjeX_Pie.add(a.replace("\"",""));:}
                |IDENT:a{:EjeX_Pie.add(t_variables.get(a).toString());:}
                |variablesjson:a{:EjeX_Pie.add(a.toString());:}
;
arreglodoublepie::=DECIMAL:a{:Valores_Pie.add(Double.parseDouble(a));:}
                |IDENT:a{:String numero=t_variables.get(a).toString();
                          Valores_Pie.add(Double.parseDouble(numero));:}
                |variablesjson:a{:String numero=a.toString();
                                  Valores_Pie.add(Double.parseDouble(numero));:}
                |ENTERO:a{:Valores_Pie.add(Double.parseDouble(a));:}
;