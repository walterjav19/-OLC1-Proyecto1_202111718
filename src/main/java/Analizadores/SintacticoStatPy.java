
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores;

import java_cup.runtime.*;
import java.util.HashMap;
import Estructuras.Variable;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SintacticoStatPy extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public SintacticoStatPy() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SintacticoStatPy(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticoStatPy(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\157\000\002\002\004\000\002\002\011\000\002\007" +
    "\004\000\002\007\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\037\003\000" +
    "\002\037\003\000\002\037\003\000\002\037\003\000\002" +
    "\037\003\000\002\037\003\000\002\036\011\000\002\036" +
    "\012\000\002\036\006\000\002\040\011\000\002\041\024" +
    "\000\002\041\024\000\002\041\023\000\002\041\023\000" +
    "\002\042\015\000\002\042\015\000\002\043\004\000\002" +
    "\043\003\000\002\034\007\000\002\034\007\000\002\034" +
    "\007\000\002\034\007\000\002\034\007\000\002\034\006" +
    "\000\002\035\011\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\005\000\002" +
    "\032\003\000\002\032\003\000\002\032\003\000\002\032" +
    "\003\000\002\032\003\000\002\030\005\000\002\030\005" +
    "\000\002\030\005\000\002\030\005\000\002\030\003\000" +
    "\002\030\003\000\002\031\005\000\002\031\005\000\002" +
    "\031\005\000\002\031\005\000\002\031\005\000\002\031" +
    "\005\000\002\031\005\000\002\031\005\000\002\033\004" +
    "\000\002\033\004\000\002\004\011\000\002\010\004\000" +
    "\002\010\003\000\002\011\007\000\002\011\007\000\002" +
    "\011\007\000\002\011\007\000\002\013\012\000\002\005" +
    "\011\000\002\014\004\000\002\014\003\000\002\015\007" +
    "\000\002\015\007\000\002\015\007\000\002\015\007\000" +
    "\002\015\007\000\002\015\007\000\002\015\007\000\002" +
    "\015\007\000\002\015\007\000\002\015\013\000\002\015" +
    "\013\000\002\016\005\000\002\016\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\020\005\000" +
    "\002\020\003\000\002\021\003\000\002\021\003\000\002" +
    "\021\003\000\002\021\003\000\002\006\011\000\002\022" +
    "\004\000\002\022\003\000\002\023\007\000\002\023\007" +
    "\000\002\023\007\000\002\023\013\000\002\023\013\000" +
    "\002\024\005\000\002\024\003\000\002\026\005\000\002" +
    "\026\003\000\002\025\003\000\002\025\003\000\002\025" +
    "\003\000\002\027\003\000\002\027\003\000\002\027\003" +
    "\000\002\027\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0150\000\004\010\004\001\002\000\004\011\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\013\010\001\002\000\004\012\011\001\002\000" +
    "\004\004\012\001\002\000\034\010\042\014\015\022\017" +
    "\023\043\024\031\040\024\062\034\065\040\066\025\067" +
    "\014\070\041\071\021\073\027\001\002\000\036\005\ufffe" +
    "\010\ufffe\014\ufffe\022\ufffe\023\ufffe\024\ufffe\040\ufffe\062" +
    "\ufffe\065\ufffe\066\ufffe\067\ufffe\070\ufffe\071\ufffe\073\ufffe" +
    "\001\002\000\006\004\u0149\066\u014a\001\002\000\004\043" +
    "\u0146\001\002\000\036\005\ufff8\010\ufff8\014\ufff8\022\ufff8" +
    "\023\ufff8\024\ufff8\040\ufff8\062\ufff8\065\ufff8\066\ufff8\067" +
    "\ufff8\070\ufff8\071\ufff8\073\ufff8\001\002\000\004\014\u0142" +
    "\001\002\000\036\005\ufffd\010\ufffd\014\ufffd\022\ufffd\023" +
    "\ufffd\024\ufffd\040\ufffd\062\ufffd\065\ufffd\066\ufffd\067\ufffd" +
    "\070\ufffd\071\ufffd\073\ufffd\001\002\000\004\013\u013c\001" +
    "\002\000\036\005\ufffc\010\ufffc\014\ufffc\022\ufffc\023\ufffc" +
    "\024\ufffc\040\ufffc\062\ufffc\065\ufffc\066\ufffc\067\ufffc\070" +
    "\ufffc\071\ufffc\073\ufffc\001\002\000\036\005\ufff4\010\ufff4" +
    "\014\ufff4\022\ufff4\023\ufff4\024\ufff4\040\ufff4\062\ufff4\065" +
    "\ufff4\066\ufff4\067\ufff4\070\ufff4\071\ufff4\073\ufff4\001\002" +
    "\000\004\042\u0136\001\002\000\004\013\u0130\001\002\000" +
    "\036\005\ufffb\010\ufffb\014\ufffb\022\ufffb\023\ufffb\024\ufffb" +
    "\040\ufffb\062\ufffb\065\ufffb\066\ufffb\067\ufffb\070\ufffb\071" +
    "\ufffb\073\ufffb\001\002\000\004\004\u0122\001\002\000\036" +
    "\005\ufff9\010\ufff9\014\ufff9\022\ufff9\023\ufff9\024\ufff9\040" +
    "\ufff9\062\ufff9\065\ufff9\066\ufff9\067\ufff9\070\ufff9\071\ufff9" +
    "\073\ufff9\001\002\000\004\014\u011e\001\002\000\036\005" +
    "\u011d\010\042\014\015\022\017\023\043\024\031\040\024" +
    "\062\034\065\040\066\025\067\014\070\041\071\021\073" +
    "\027\001\002\000\036\005\ufffa\010\ufffa\014\ufffa\022\ufffa" +
    "\023\ufffa\024\ufffa\040\ufffa\062\ufffa\065\ufffa\066\ufffa\067" +
    "\ufffa\070\ufffa\071\ufffa\073\ufffa\001\002\000\004\014\u0118" +
    "\001\002\000\036\005\ufff7\010\ufff7\014\ufff7\022\ufff7\023" +
    "\ufff7\024\ufff7\040\ufff7\062\ufff7\065\ufff7\066\ufff7\067\ufff7" +
    "\070\ufff7\071\ufff7\073\ufff7\001\002\000\036\005\ufff6\010" +
    "\ufff6\014\ufff6\022\ufff6\023\ufff6\024\ufff6\040\ufff6\062\ufff6" +
    "\065\ufff6\066\ufff6\067\ufff6\070\ufff6\071\ufff6\073\ufff6\001" +
    "\002\000\036\005\ufff5\010\ufff5\014\ufff5\022\ufff5\023\ufff5" +
    "\024\ufff5\040\ufff5\062\ufff5\065\ufff5\066\ufff5\067\ufff5\070" +
    "\ufff5\071\ufff5\073\ufff5\001\002\000\004\014\u0114\001\002" +
    "\000\004\013\336\001\002\000\010\016\123\017\122\020" +
    "\124\001\002\000\004\014\044\001\002\000\004\015\045" +
    "\001\002\000\026\006\046\007\047\013\057\014\050\025" +
    "\055\044\052\055\063\061\064\063\054\064\056\001\002" +
    "\000\036\012\uffda\021\uffda\043\uffda\044\uffda\045\uffda\046" +
    "\uffda\047\uffda\050\uffda\051\uffda\052\uffda\053\uffda\054\uffda" +
    "\056\uffda\057\uffda\001\002\000\036\012\uffd2\021\uffd2\043" +
    "\uffd2\044\uffd2\045\uffd2\046\uffd2\047\uffd2\050\uffd2\051\uffd2" +
    "\052\uffd2\053\uffd2\054\uffd2\056\uffd2\057\uffd2\001\002\000" +
    "\036\012\uffdb\021\uffdb\043\uffdb\044\uffdb\045\uffdb\046\uffdb" +
    "\047\uffdb\050\uffdb\051\uffdb\052\uffdb\053\uffdb\054\uffdb\056" +
    "\uffdb\057\uffdb\001\002\000\036\012\uffe0\021\uffe0\043\uffe0" +
    "\044\uffe0\045\uffe0\046\uffe0\047\uffe0\050\uffe0\051\uffe0\052" +
    "\uffe0\053\uffe0\054\uffe0\056\uffe0\057\uffe0\001\002\000\026" +
    "\006\046\007\047\013\057\014\050\025\055\044\052\055" +
    "\063\061\064\063\054\064\056\001\002\000\036\012\uffdf" +
    "\021\uffdf\043\uffdf\044\uffdf\045\uffdf\046\uffdf\047\uffdf\050" +
    "\uffdf\051\uffdf\052\uffdf\053\uffdf\054\uffdf\056\uffdf\057\uffdf" +
    "\001\002\000\036\012\uffd8\021\uffd8\043\uffd8\044\uffd8\045" +
    "\uffd8\046\uffd8\047\uffd8\050\uffd8\051\uffd8\052\uffd8\053\uffd8" +
    "\054\uffd8\056\uffd8\057\uffd8\001\002\000\036\012\uffd1\021" +
    "\uffd1\043\uffd1\044\uffd1\045\uffd1\046\uffd1\047\uffd1\050\uffd1" +
    "\051\uffd1\052\uffd1\053\uffd1\054\uffd1\056\uffd1\057\uffd1\001" +
    "\002\000\036\012\uffd7\021\uffd7\043\uffd7\044\uffd7\045\uffd7" +
    "\046\uffd7\047\uffd7\050\uffd7\051\uffd7\052\uffd7\053\uffd7\054" +
    "\uffd7\056\uffd7\057\uffd7\001\002\000\026\006\046\007\047" +
    "\013\057\014\050\025\055\044\052\055\063\061\064\063" +
    "\054\064\056\001\002\000\034\021\116\043\075\044\070" +
    "\045\073\046\074\047\077\050\071\051\076\052\066\053" +
    "\100\054\072\056\067\057\101\001\002\000\036\012\uffde" +
    "\021\uffde\043\uffde\044\uffde\045\uffde\046\uffde\047\uffde\050" +
    "\uffde\051\uffde\052\uffde\053\uffde\054\uffde\056\uffde\057\uffde" +
    "\001\002\000\036\012\uffdd\021\uffdd\043\uffdd\044\uffdd\045" +
    "\uffdd\046\uffdd\047\uffdd\050\uffdd\051\uffdd\052\uffdd\053\uffdd" +
    "\054\uffdd\056\uffdd\057\uffdd\001\002\000\026\006\046\007" +
    "\047\013\057\014\050\025\055\044\052\055\063\061\064" +
    "\063\054\064\056\001\002\000\036\012\uffd9\021\uffd9\043" +
    "\uffd9\044\uffd9\045\uffd9\046\uffd9\047\uffd9\050\uffd9\051\uffd9" +
    "\052\uffd9\053\uffd9\054\uffd9\056\uffd9\057\uffd9\001\002\000" +
    "\036\012\uffc7\021\uffc7\043\uffc7\044\uffc7\045\uffc7\046\uffc7" +
    "\047\uffc7\050\uffc7\051\uffc7\052\uffc7\053\uffc7\054\uffc7\056" +
    "\uffc7\057\uffc7\001\002\000\026\006\046\007\047\013\057" +
    "\014\050\025\055\044\052\055\063\061\064\063\054\064" +
    "\056\001\002\000\026\006\046\007\047\013\057\014\050" +
    "\025\055\044\052\055\063\061\064\063\054\064\056\001" +
    "\002\000\026\006\046\007\047\013\057\014\050\025\055" +
    "\044\052\055\063\061\064\063\054\064\056\001\002\000" +
    "\026\006\046\007\047\013\057\014\050\025\055\044\052" +
    "\055\063\061\064\063\054\064\056\001\002\000\026\006" +
    "\046\007\047\013\057\014\050\025\055\044\052\055\063" +
    "\061\064\063\054\064\056\001\002\000\026\006\046\007" +
    "\047\013\057\014\050\025\055\044\052\055\063\061\064" +
    "\063\054\064\056\001\002\000\026\006\046\007\047\013" +
    "\057\014\050\025\055\044\052\055\063\061\064\063\054" +
    "\064\056\001\002\000\026\006\046\007\047\013\057\014" +
    "\050\025\055\044\052\055\063\061\064\063\054\064\056" +
    "\001\002\000\026\006\046\007\047\013\057\014\050\025" +
    "\055\044\052\055\063\061\064\063\054\064\056\001\002" +
    "\000\026\006\046\007\047\013\057\014\050\025\055\044" +
    "\052\055\063\061\064\063\054\064\056\001\002\000\026" +
    "\006\046\007\047\013\057\014\050\025\055\044\052\055" +
    "\063\061\064\063\054\064\056\001\002\000\026\006\046" +
    "\007\047\013\057\014\050\025\055\044\052\055\063\061" +
    "\064\063\054\064\056\001\002\000\036\012\uffc9\021\uffc9" +
    "\043\075\044\070\045\073\046\074\047\uffc9\050\uffc9\051" +
    "\uffc9\052\uffc9\053\uffc9\054\uffc9\056\uffc9\057\uffc9\001\002" +
    "\000\036\012\uffcc\021\uffcc\043\075\044\070\045\073\046" +
    "\074\047\uffcc\050\uffcc\051\uffcc\052\uffcc\053\uffcc\054\uffcc" +
    "\056\067\057\101\001\002\000\036\012\uffd0\021\uffd0\043" +
    "\075\044\070\045\073\046\074\047\uffd0\050\uffd0\051\uffd0" +
    "\052\uffd0\053\uffd0\054\uffd0\056\067\057\101\001\002\000" +
    "\036\012\uffce\021\uffce\043\075\044\070\045\073\046\074" +
    "\047\uffce\050\uffce\051\uffce\052\uffce\053\uffce\054\uffce\056" +
    "\067\057\101\001\002\000\036\012\uffd6\021\uffd6\043\uffd6" +
    "\044\uffd6\045\073\046\074\047\uffd6\050\uffd6\051\uffd6\052" +
    "\uffd6\053\uffd6\054\uffd6\056\uffd6\057\uffd6\001\002\000\036" +
    "\012\uffd3\021\uffd3\043\uffd3\044\uffd3\045\uffd3\046\uffd3\047" +
    "\uffd3\050\uffd3\051\uffd3\052\uffd3\053\uffd3\054\uffd3\056\uffd3" +
    "\057\uffd3\001\002\000\036\012\uffd4\021\uffd4\043\uffd4\044" +
    "\uffd4\045\uffd4\046\uffd4\047\uffd4\050\uffd4\051\uffd4\052\uffd4" +
    "\053\uffd4\054\uffd4\056\uffd4\057\uffd4\001\002\000\036\012" +
    "\uffcb\021\uffcb\043\075\044\070\045\073\046\074\047\uffcb" +
    "\050\uffcb\051\uffcb\052\uffcb\053\uffcb\054\uffcb\056\067\057" +
    "\101\001\002\000\036\012\uffcf\021\uffcf\043\075\044\070" +
    "\045\073\046\074\047\uffcf\050\uffcf\051\uffcf\052\uffcf\053" +
    "\uffcf\054\uffcf\056\067\057\101\001\002\000\036\012\uffd5" +
    "\021\uffd5\043\uffd5\044\uffd5\045\073\046\074\047\uffd5\050" +
    "\uffd5\051\uffd5\052\uffd5\053\uffd5\054\uffd5\056\uffd5\057\uffd5" +
    "\001\002\000\036\012\uffca\021\uffca\043\075\044\070\045" +
    "\073\046\074\047\uffca\050\uffca\051\uffca\052\uffca\053\uffca" +
    "\054\uffca\056\uffca\057\uffca\001\002\000\036\012\uffcd\021" +
    "\uffcd\043\075\044\070\045\073\046\074\047\uffcd\050\uffcd" +
    "\051\uffcd\052\uffcd\053\uffcd\054\uffcd\056\067\057\101\001" +
    "\002\000\036\005\uffe6\010\uffe6\014\uffe6\022\uffe6\023\uffe6" +
    "\024\uffe6\040\uffe6\062\uffe6\065\uffe6\066\uffe6\067\uffe6\070" +
    "\uffe6\071\uffe6\073\uffe6\001\002\000\034\012\120\043\075" +
    "\044\070\045\073\046\074\047\077\050\071\051\076\052" +
    "\066\053\100\054\072\056\067\057\101\001\002\000\036" +
    "\012\uffdc\021\uffdc\043\uffdc\044\uffdc\045\uffdc\046\uffdc\047" +
    "\uffdc\050\uffdc\051\uffdc\052\uffdc\053\uffdc\054\uffdc\056\uffdc" +
    "\057\uffdc\001\002\000\036\012\uffc8\021\uffc8\043\uffc8\044" +
    "\uffc8\045\uffc8\046\uffc8\047\uffc8\050\uffc8\051\uffc8\052\uffc8" +
    "\053\uffc8\054\uffc8\056\uffc8\057\uffc8\001\002\000\004\013" +
    "\240\001\002\000\004\013\213\001\002\000\004\013\125" +
    "\001\002\000\004\012\126\001\002\000\004\004\127\001" +
    "\002\000\006\023\130\024\132\001\002\000\004\031\174" +
    "\001\002\000\010\005\uffa3\023\uffa3\024\uffa3\001\002\000" +
    "\006\031\137\033\136\001\002\000\010\005\135\023\130" +
    "\024\132\001\002\000\010\005\uffa4\023\uffa4\024\uffa4\001" +
    "\002\000\036\005\uffa5\010\uffa5\014\uffa5\022\uffa5\023\uffa5" +
    "\024\uffa5\040\uffa5\062\uffa5\065\uffa5\066\uffa5\067\uffa5\070" +
    "\uffa5\071\uffa5\073\uffa5\001\002\000\004\015\165\001\002" +
    "\000\004\032\140\001\002\000\004\034\141\001\002\000" +
    "\004\015\142\001\002\000\004\004\143\001\002\000\010" +
    "\006\151\014\146\027\144\001\002\000\004\004\156\001" +
    "\002\000\006\005\uff97\030\uff97\001\002\000\006\005\uff98" +
    "\030\uff98\001\002\000\006\005\153\030\152\001\002\000" +
    "\006\005\uff9c\030\uff9c\001\002\000\006\005\uff99\030\uff99" +
    "\001\002\000\010\006\151\014\146\027\144\001\002\000" +
    "\004\021\154\001\002\000\010\005\uff9f\023\uff9f\024\uff9f" +
    "\001\002\000\006\005\uff9d\030\uff9d\001\002\000\004\026" +
    "\157\001\002\000\004\030\160\001\002\000\004\006\161" +
    "\001\002\000\004\030\162\001\002\000\004\006\163\001" +
    "\002\000\004\005\164\001\002\000\010\005\uffbf\021\uffbf" +
    "\030\uffbf\001\002\000\010\006\170\014\167\027\144\001" +
    "\002\000\004\021\173\001\002\000\004\021\172\001\002" +
    "\000\004\021\171\001\002\000\010\005\uffa1\023\uffa1\024" +
    "\uffa1\001\002\000\010\005\uffa2\023\uffa2\024\uffa2\001\002" +
    "\000\010\005\uffa0\023\uffa0\024\uffa0\001\002\000\004\032" +
    "\175\001\002\000\004\035\176\001\002\000\004\015\177" +
    "\001\002\000\004\004\200\001\002\000\012\007\205\014" +
    "\202\025\206\027\144\001\002\000\006\005\uff94\030\uff94" +
    "\001\002\000\006\005\uff95\030\uff95\001\002\000\006\005" +
    "\210\030\207\001\002\000\006\005\uff9a\030\uff9a\001\002" +
    "\000\006\005\uff96\030\uff96\001\002\000\006\005\uff93\030" +
    "\uff93\001\002\000\012\007\205\014\202\025\206\027\144" +
    "\001\002\000\004\021\211\001\002\000\010\005\uff9e\023" +
    "\uff9e\024\uff9e\001\002\000\006\005\uff9b\030\uff9b\001\002" +
    "\000\004\012\214\001\002\000\004\004\215\001\002\000" +
    "\006\023\217\024\216\001\002\000\004\014\232\001\002" +
    "\000\004\014\224\001\002\000\010\005\uffc4\023\uffc4\024" +
    "\uffc4\001\002\000\010\005\222\023\217\024\216\001\002" +
    "\000\036\005\uffc6\010\uffc6\014\uffc6\022\uffc6\023\uffc6\024" +
    "\uffc6\040\uffc6\062\uffc6\065\uffc6\066\uffc6\067\uffc6\070\uffc6" +
    "\071\uffc6\073\uffc6\001\002\000\010\005\uffc5\023\uffc5\024" +
    "\uffc5\001\002\000\004\015\225\001\002\000\006\007\227" +
    "\027\144\001\002\000\004\021\231\001\002\000\004\021" +
    "\230\001\002\000\010\005\uffc2\023\uffc2\024\uffc2\001\002" +
    "\000\010\005\uffc1\023\uffc1\024\uffc1\001\002\000\004\015" +
    "\233\001\002\000\006\006\235\027\144\001\002\000\004" +
    "\021\237\001\002\000\004\021\236\001\002\000\010\005" +
    "\uffc3\023\uffc3\024\uffc3\001\002\000\010\005\uffc0\023\uffc0" +
    "\024\uffc0\001\002\000\004\012\241\001\002\000\004\004" +
    "\242\001\002\000\006\023\244\024\243\001\002\000\012" +
    "\031\273\033\270\036\271\037\272\001\002\000\004\031" +
    "\251\001\002\000\010\005\uffbc\023\uffbc\024\uffbc\001\002" +
    "\000\010\005\247\023\244\024\243\001\002\000\036\005" +
    "\uffbe\010\uffbe\014\uffbe\022\uffbe\023\uffbe\024\uffbe\040\uffbe" +
    "\062\uffbe\065\uffbe\066\uffbe\067\uffbe\070\uffbe\071\uffbe\073" +
    "\uffbe\001\002\000\010\005\uffbd\023\uffbd\024\uffbd\001\002" +
    "\000\004\032\252\001\002\000\004\035\253\001\002\000" +
    "\004\015\254\001\002\000\004\004\255\001\002\000\012" +
    "\007\261\014\257\025\262\027\144\001\002\000\006\005" +
    "\uffa7\030\uffa7\001\002\000\006\005\uffa8\030\uffa8\001\002" +
    "\000\006\005\265\030\264\001\002\000\006\005\uffa9\030" +
    "\uffa9\001\002\000\006\005\uffa6\030\uffa6\001\002\000\006" +
    "\005\uffaa\030\uffaa\001\002\000\012\007\261\014\257\025" +
    "\262\027\144\001\002\000\004\021\266\001\002\000\010" +
    "\005\uffb1\023\uffb1\024\uffb1\001\002\000\006\005\uffab\030" +
    "\uffab\001\002\000\004\015\327\001\002\000\004\015\320" +
    "\001\002\000\004\015\311\001\002\000\004\032\274\001" +
    "\002\000\004\034\275\001\002\000\004\015\276\001\002" +
    "\000\004\004\277\001\002\000\010\006\304\014\302\027" +
    "\144\001\002\000\006\005\uffac\030\uffac\001\002\000\006" +
    "\005\306\030\305\001\002\000\006\005\uffad\030\uffad\001" +
    "\002\000\006\005\uffaf\030\uffaf\001\002\000\006\005\uffae" +
    "\030\uffae\001\002\000\010\006\304\014\302\027\144\001" +
    "\002\000\004\021\307\001\002\000\010\005\uffb2\023\uffb2" +
    "\024\uffb2\001\002\000\006\005\uffb0\030\uffb0\001\002\000" +
    "\010\006\314\014\313\027\144\001\002\000\004\021\317" +
    "\001\002\000\004\021\316\001\002\000\004\021\315\001" +
    "\002\000\010\005\uffb7\023\uffb7\024\uffb7\001\002\000\010" +
    "\005\uffb8\023\uffb8\024\uffb8\001\002\000\010\005\uffb6\023" +
    "\uffb6\024\uffb6\001\002\000\010\006\323\014\322\027\144" +
    "\001\002\000\004\021\326\001\002\000\004\021\325\001" +
    "\002\000\004\021\324\001\002\000\010\005\uffb4\023\uffb4" +
    "\024\uffb4\001\002\000\010\005\uffb5\023\uffb5\024\uffb5\001" +
    "\002\000\010\005\uffb3\023\uffb3\024\uffb3\001\002\000\010" +
    "\006\332\014\331\027\144\001\002\000\004\021\335\001" +
    "\002\000\004\021\334\001\002\000\004\021\333\001\002" +
    "\000\010\005\uffba\023\uffba\024\uffba\001\002\000\010\005" +
    "\uffbb\023\uffbb\024\uffbb\001\002\000\010\005\uffb9\023\uffb9" +
    "\024\uffb9\001\002\000\006\014\337\022\340\001\002\000" +
    "\004\015\374\001\002\000\004\014\341\001\002\000\004" +
    "\015\342\001\002\000\026\006\046\007\047\013\057\014" +
    "\050\025\055\044\052\055\063\061\064\063\054\064\056" +
    "\001\002\000\034\021\344\043\075\044\070\045\073\046" +
    "\074\047\077\050\071\051\076\052\066\053\100\054\072" +
    "\056\067\057\101\001\002\000\004\014\345\001\002\000" +
    "\006\050\347\052\346\001\002\000\026\006\046\007\047" +
    "\013\057\014\050\025\055\044\052\055\063\061\064\063" +
    "\054\064\056\001\002\000\026\006\046\007\047\013\057" +
    "\014\050\025\055\044\052\055\063\061\064\063\054\064" +
    "\056\001\002\000\034\021\351\043\075\044\070\045\073" +
    "\046\074\047\077\050\071\051\076\052\066\053\100\054" +
    "\072\056\067\057\101\001\002\000\004\014\352\001\002" +
    "\000\004\043\353\001\002\000\004\043\354\001\002\000" +
    "\004\012\355\001\002\000\004\004\356\001\002\000\032" +
    "\014\015\022\017\023\043\024\031\040\024\062\034\065" +
    "\040\066\025\067\014\070\041\071\021\073\027\001\002" +
    "\000\034\005\uffe8\014\uffe8\022\uffe8\023\uffe8\024\uffe8\040" +
    "\uffe8\062\uffe8\065\uffe8\066\uffe8\067\uffe8\070\uffe8\071\uffe8" +
    "\073\uffe8\001\002\000\034\005\361\014\015\022\017\023" +
    "\043\024\031\040\024\062\034\065\040\066\025\067\014" +
    "\070\041\071\021\073\027\001\002\000\036\005\uffef\010" +
    "\uffef\014\uffef\022\uffef\023\uffef\024\uffef\040\uffef\062\uffef" +
    "\065\uffef\066\uffef\067\uffef\070\uffef\071\uffef\073\uffef\001" +
    "\002\000\034\005\uffe9\014\uffe9\022\uffe9\023\uffe9\024\uffe9" +
    "\040\uffe9\062\uffe9\065\uffe9\066\uffe9\067\uffe9\070\uffe9\071" +
    "\uffe9\073\uffe9\001\002\000\034\021\364\043\075\044\070" +
    "\045\073\046\074\047\077\050\071\051\076\052\066\053" +
    "\100\054\072\056\067\057\101\001\002\000\004\014\365" +
    "\001\002\000\004\043\366\001\002\000\004\043\367\001" +
    "\002\000\004\012\370\001\002\000\004\004\371\001\002" +
    "\000\032\014\015\022\017\023\043\024\031\040\024\062" +
    "\034\065\040\066\025\067\014\070\041\071\021\073\027" +
    "\001\002\000\034\005\373\014\015\022\017\023\043\024" +
    "\031\040\024\062\034\065\040\066\025\067\014\070\041" +
    "\071\021\073\027\001\002\000\036\005\uffee\010\uffee\014" +
    "\uffee\022\uffee\023\uffee\024\uffee\040\uffee\062\uffee\065\uffee" +
    "\066\uffee\067\uffee\070\uffee\071\uffee\073\uffee\001\002\000" +
    "\026\006\046\007\047\013\057\014\050\025\055\044\052" +
    "\055\063\061\064\063\054\064\056\001\002\000\034\021" +
    "\376\043\075\044\070\045\073\046\074\047\077\050\071" +
    "\051\076\052\066\053\100\054\072\056\067\057\101\001" +
    "\002\000\004\014\377\001\002\000\006\050\u0101\052\u0100" +
    "\001\002\000\026\006\046\007\047\013\057\014\050\025" +
    "\055\044\052\055\063\061\064\063\054\064\056\001\002" +
    "\000\026\006\046\007\047\013\057\014\050\025\055\044" +
    "\052\055\063\061\064\063\054\064\056\001\002\000\034" +
    "\021\u0103\043\075\044\070\045\073\046\074\047\077\050" +
    "\071\051\076\052\066\053\100\054\072\056\067\057\101" +
    "\001\002\000\004\014\u0104\001\002\000\004\043\u0105\001" +
    "\002\000\004\043\u0106\001\002\000\004\012\u0107\001\002" +
    "\000\004\004\u0108\001\002\000\032\014\015\022\017\023" +
    "\043\024\031\040\024\062\034\065\040\066\025\067\014" +
    "\070\041\071\021\073\027\001\002\000\034\005\u010a\014" +
    "\015\022\017\023\043\024\031\040\024\062\034\065\040" +
    "\066\025\067\014\070\041\071\021\073\027\001\002\000" +
    "\036\005\uffed\010\uffed\014\uffed\022\uffed\023\uffed\024\uffed" +
    "\040\uffed\062\uffed\065\uffed\066\uffed\067\uffed\070\uffed\071" +
    "\uffed\073\uffed\001\002\000\034\021\u010c\043\075\044\070" +
    "\045\073\046\074\047\077\050\071\051\076\052\066\053" +
    "\100\054\072\056\067\057\101\001\002\000\004\014\u010d" +
    "\001\002\000\004\043\u010e\001\002\000\004\043\u010f\001" +
    "\002\000\004\012\u0110\001\002\000\004\004\u0111\001\002" +
    "\000\032\014\015\022\017\023\043\024\031\040\024\062" +
    "\034\065\040\066\025\067\014\070\041\071\021\073\027" +
    "\001\002\000\034\005\u0113\014\015\022\017\023\043\024" +
    "\031\040\024\062\034\065\040\066\025\067\014\070\041" +
    "\071\021\073\027\001\002\000\036\005\uffec\010\uffec\014" +
    "\uffec\022\uffec\023\uffec\024\uffec\040\uffec\062\uffec\065\uffec" +
    "\066\uffec\067\uffec\070\uffec\071\uffec\073\uffec\001\002\000" +
    "\004\015\u0115\001\002\000\026\006\046\007\047\013\057" +
    "\014\050\025\055\044\052\055\063\061\064\063\054\064" +
    "\056\001\002\000\034\021\u0117\043\075\044\070\045\073" +
    "\046\074\047\077\050\071\051\076\052\066\053\100\054" +
    "\072\056\067\057\101\001\002\000\036\005\uffe3\010\uffe3" +
    "\014\uffe3\022\uffe3\023\uffe3\024\uffe3\040\uffe3\062\uffe3\065" +
    "\uffe3\066\uffe3\067\uffe3\070\uffe3\071\uffe3\073\uffe3\001\002" +
    "\000\004\015\u0119\001\002\000\026\006\046\007\047\013" +
    "\057\014\050\025\055\044\052\055\063\061\064\063\054" +
    "\064\056\001\002\000\034\021\u011b\043\075\044\070\045" +
    "\073\046\074\047\077\050\071\051\076\052\066\053\100" +
    "\054\072\056\067\057\101\001\002\000\036\005\uffe4\010" +
    "\uffe4\014\uffe4\022\uffe4\023\uffe4\024\uffe4\040\uffe4\062\uffe4" +
    "\065\uffe4\066\uffe4\067\uffe4\070\uffe4\071\uffe4\073\uffe4\001" +
    "\002\000\036\005\uffff\010\uffff\014\uffff\022\uffff\023\uffff" +
    "\024\uffff\040\uffff\062\uffff\065\uffff\066\uffff\067\uffff\070" +
    "\uffff\071\uffff\073\uffff\001\002\000\004\002\000\001\002" +
    "\000\004\015\u011f\001\002\000\026\006\046\007\047\013" +
    "\057\014\050\025\055\044\052\055\063\061\064\063\054" +
    "\064\056\001\002\000\034\021\u0121\043\075\044\070\045" +
    "\073\046\074\047\077\050\071\051\076\052\066\053\100" +
    "\054\072\056\067\057\101\001\002\000\036\005\uffe5\010" +
    "\uffe5\014\uffe5\022\uffe5\023\uffe5\024\uffe5\040\uffe5\062\uffe5" +
    "\065\uffe5\066\uffe5\067\uffe5\070\uffe5\071\uffe5\073\uffe5\001" +
    "\002\000\032\014\015\022\017\023\043\024\031\040\024" +
    "\062\034\065\040\066\025\067\014\070\041\071\021\073" +
    "\027\001\002\000\034\005\u0124\014\015\022\017\023\043" +
    "\024\031\040\024\062\034\065\040\066\025\067\014\070" +
    "\041\071\021\073\027\001\002\000\004\071\u0125\001\002" +
    "\000\004\013\u0126\001\002\000\004\014\u0127\001\002\000" +
    "\006\050\u0129\052\u0128\001\002\000\026\006\046\007\047" +
    "\013\057\014\050\025\055\044\052\055\063\061\064\063" +
    "\054\064\056\001\002\000\026\006\046\007\047\013\057" +
    "\014\050\025\055\044\052\055\063\061\064\063\054\064" +
    "\056\001\002\000\034\012\u012b\043\075\044\070\045\073" +
    "\046\074\047\077\050\071\051\076\052\066\053\100\054" +
    "\072\056\067\057\101\001\002\000\004\021\u012c\001\002" +
    "\000\036\005\uffeb\010\uffeb\014\uffeb\022\uffeb\023\uffeb\024" +
    "\uffeb\040\uffeb\062\uffeb\065\uffeb\066\uffeb\067\uffeb\070\uffeb" +
    "\071\uffeb\073\uffeb\001\002\000\034\012\u012e\043\075\044" +
    "\070\045\073\046\074\047\077\050\071\051\076\052\066" +
    "\053\100\054\072\056\067\057\101\001\002\000\004\021" +
    "\u012f\001\002\000\036\005\uffea\010\uffea\014\uffea\022\uffea" +
    "\023\uffea\024\uffea\040\uffea\062\uffea\065\uffea\066\uffea\067" +
    "\uffea\070\uffea\071\uffea\073\uffea\001\002\000\026\006\046" +
    "\007\047\013\057\014\050\025\055\044\052\055\063\061" +
    "\064\063\054\064\056\001\002\000\034\012\u0132\043\075" +
    "\044\070\045\073\046\074\047\077\050\071\051\076\052" +
    "\066\053\100\054\072\056\067\057\101\001\002\000\004" +
    "\004\u0133\001\002\000\032\014\015\022\017\023\043\024" +
    "\031\040\024\062\034\065\040\066\025\067\014\070\041" +
    "\071\021\073\027\001\002\000\034\005\u0135\014\015\022" +
    "\017\023\043\024\031\040\024\062\034\065\040\066\025" +
    "\067\014\070\041\071\021\073\027\001\002\000\036\005" +
    "\ufff3\010\ufff3\014\ufff3\022\ufff3\023\ufff3\024\ufff3\040\ufff3" +
    "\062\ufff3\065\ufff3\066\ufff3\067\ufff3\070\ufff3\071\ufff3\073" +
    "\ufff3\001\002\000\004\041\u0137\001\002\000\004\013\u0138" +
    "\001\002\000\026\006\046\007\047\013\057\014\050\025" +
    "\055\044\052\055\063\061\064\063\054\064\056\001\002" +
    "\000\034\012\u013a\043\075\044\070\045\073\046\074\047" +
    "\077\050\071\051\076\052\066\053\100\054\072\056\067" +
    "\057\101\001\002\000\004\021\u013b\001\002\000\036\005" +
    "\uffe1\010\uffe1\014\uffe1\022\uffe1\023\uffe1\024\uffe1\040\uffe1" +
    "\062\uffe1\065\uffe1\066\uffe1\067\uffe1\070\uffe1\071\uffe1\073" +
    "\uffe1\001\002\000\026\006\046\007\047\013\057\014\050" +
    "\025\055\044\052\055\063\061\064\063\054\064\056\001" +
    "\002\000\034\012\u013e\043\075\044\070\045\073\046\074" +
    "\047\077\050\071\051\076\052\066\053\100\054\072\056" +
    "\067\057\101\001\002\000\004\004\u013f\001\002\000\032" +
    "\014\015\022\017\023\043\024\031\040\024\062\034\065" +
    "\040\066\025\067\014\070\041\071\021\073\027\001\002" +
    "\000\034\005\u0141\014\015\022\017\023\043\024\031\040" +
    "\024\062\034\065\040\066\025\067\014\070\041\071\021" +
    "\073\027\001\002\000\036\005\ufff0\010\ufff0\014\ufff0\022" +
    "\ufff0\023\ufff0\024\ufff0\040\ufff0\062\ufff0\065\ufff0\066\ufff0" +
    "\067\ufff0\070\ufff0\071\ufff0\073\ufff0\001\002\000\004\015" +
    "\u0143\001\002\000\026\006\046\007\047\013\057\014\050" +
    "\025\055\044\052\055\063\061\064\063\054\064\056\001" +
    "\002\000\034\021\u0145\043\075\044\070\045\073\046\074" +
    "\047\077\050\071\051\076\052\066\053\100\054\072\056" +
    "\067\057\101\001\002\000\036\005\uffe7\010\uffe7\014\uffe7" +
    "\022\uffe7\023\uffe7\024\uffe7\040\uffe7\062\uffe7\065\uffe7\066" +
    "\uffe7\067\uffe7\070\uffe7\071\uffe7\073\uffe7\001\002\000\004" +
    "\043\u0147\001\002\000\004\021\u0148\001\002\000\036\005" +
    "\uffe2\010\uffe2\014\uffe2\022\uffe2\023\uffe2\024\uffe2\040\uffe2" +
    "\062\uffe2\065\uffe2\066\uffe2\067\uffe2\070\uffe2\071\uffe2\073" +
    "\uffe2\001\002\000\032\014\015\022\017\023\043\024\031" +
    "\040\024\062\034\065\040\066\025\067\014\070\041\071" +
    "\021\073\027\001\002\000\004\013\u014b\001\002\000\026" +
    "\006\046\007\047\013\057\014\050\025\055\044\052\055" +
    "\063\061\064\063\054\064\056\001\002\000\034\012\u014d" +
    "\043\075\044\070\045\073\046\074\047\077\050\071\051" +
    "\076\052\066\053\100\054\072\056\067\057\101\001\002" +
    "\000\004\004\u014e\001\002\000\032\014\015\022\017\023" +
    "\043\024\031\040\024\062\034\065\040\066\025\067\014" +
    "\070\041\071\021\073\027\001\002\000\034\005\u0150\014" +
    "\015\022\017\023\043\024\031\040\024\062\034\065\040" +
    "\066\025\067\014\070\041\071\021\073\027\001\002\000" +
    "\036\005\ufff2\010\ufff2\014\ufff2\022\ufff2\023\ufff2\024\ufff2" +
    "\040\ufff2\062\ufff2\065\ufff2\066\ufff2\067\ufff2\070\ufff2\071" +
    "\ufff2\073\ufff2\001\002\000\034\005\u0152\014\015\022\017" +
    "\023\043\024\031\040\024\062\034\065\040\066\025\067" +
    "\014\070\041\071\021\073\027\001\002\000\036\005\ufff1" +
    "\010\ufff1\014\ufff1\022\ufff1\023\ufff1\024\ufff1\040\ufff1\062" +
    "\ufff1\065\ufff1\066\ufff1\067\ufff1\070\ufff1\071\ufff1\073\ufff1" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0150\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\003\012\004\021\005" +
    "\025\006\032\007\031\034\027\035\015\036\034\037\017" +
    "\040\035\041\036\042\022\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\003\u011b\004\021\005\025\006\032" +
    "\034\027\035\015\036\034\037\017\040\035\041\036\042" +
    "\022\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\012\057\030\060\031\061\032" +
    "\050\033\052\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\012\120\030" +
    "\060\031\061\032\050\033\052\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\012\116\030\060\031\061\032\050\033\052\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\012\064\030\060\031\061\032\050\033\052\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\012\114\030" +
    "\060\031\061\032\050\033\052\001\001\000\014\012\113" +
    "\030\060\031\061\032\050\033\052\001\001\000\014\012" +
    "\112\030\060\031\061\032\050\033\052\001\001\000\014" +
    "\012\111\030\060\031\061\032\050\033\052\001\001\000" +
    "\014\012\110\030\060\031\061\032\050\033\052\001\001" +
    "\000\014\012\107\030\060\031\061\032\050\033\052\001" +
    "\001\000\014\012\106\030\060\031\061\032\050\033\052" +
    "\001\001\000\014\012\105\030\060\031\061\032\050\033" +
    "\052\001\001\000\014\012\104\030\060\031\061\032\050" +
    "\033\052\001\001\000\014\012\103\030\060\031\061\032" +
    "\050\033\052\001\001\000\014\012\102\030\060\031\061" +
    "\032\050\033\052\001\001\000\014\012\101\030\060\031" +
    "\061\032\050\033\052\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\022\132\023\130\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\023\133\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\013\144\024\146\025\147\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\013" +
    "\144\025\154\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\165\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\013\200\026\202\027\203\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\013\200\027" +
    "\211\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\010" +
    "\220\011\217\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\222\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\225" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\233" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\014\245\015\244\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\247\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\013\255\020\257\021\262\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\013\255\021\266\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\013\277\016\300\017\302\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\013\277\017\307\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\311\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\320\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\327\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\012\342\030\060\031\061\032\050\033" +
    "\052\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\012\362\030\060\031\061\032\050\033" +
    "\052\001\001\000\014\012\347\030\060\031\061\032\050" +
    "\033\052\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\034\027\035\015\036\034\037\356\040" +
    "\035\041\036\042\022\043\357\001\001\000\002\001\001" +
    "\000\020\034\027\035\015\036\034\037\361\040\035\041" +
    "\036\042\022\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\034\027\035\015\036\034\037\356\040\035\041\036\042" +
    "\022\043\371\001\001\000\020\034\027\035\015\036\034" +
    "\037\361\040\035\041\036\042\022\001\001\000\002\001" +
    "\001\000\014\012\374\030\060\031\061\032\050\033\052" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\012\u010a\030\060\031\061\032\050\033\052" +
    "\001\001\000\014\012\u0101\030\060\031\061\032\050\033" +
    "\052\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\034\027\035\015\036\034\037\356\040\035" +
    "\041\036\042\022\043\u0108\001\001\000\020\034\027\035" +
    "\015\036\034\037\361\040\035\041\036\042\022\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\034\027\035\015\036\034\037\356\040" +
    "\035\041\036\042\022\043\u0111\001\001\000\020\034\027" +
    "\035\015\036\034\037\361\040\035\041\036\042\022\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\012\u0115" +
    "\030\060\031\061\032\050\033\052\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\012\u0119" +
    "\030\060\031\061\032\050\033\052\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\012\u011f\030\060\031\061\032" +
    "\050\033\052\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\034\027\035\015\036\034\037\356\040\035\041" +
    "\036\042\022\043\u0122\001\001\000\020\034\027\035\015" +
    "\036\034\037\361\040\035\041\036\042\022\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\012\u012c\030\060\031\061\032\050\033" +
    "\052\001\001\000\014\012\u0129\030\060\031\061\032\050" +
    "\033\052\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\012\u0130\030\060\031\061\032\050\033" +
    "\052\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\034\027\035\015\036\034\037\356\040\035\041\036\042" +
    "\022\043\u0133\001\001\000\020\034\027\035\015\036\034" +
    "\037\361\040\035\041\036\042\022\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\012\u0138" +
    "\030\060\031\061\032\050\033\052\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\012\u013c" +
    "\030\060\031\061\032\050\033\052\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\034\027\035\015\036\034" +
    "\037\356\040\035\041\036\042\022\043\u013f\001\001\000" +
    "\020\034\027\035\015\036\034\037\361\040\035\041\036" +
    "\042\022\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\012\u0143\030\060\031\061\032\050\033\052\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\034\027\035\015" +
    "\036\034\037\356\040\035\041\036\042\022\043\u0150\001" +
    "\001\000\002\001\001\000\014\012\u014b\030\060\031\061" +
    "\032\050\033\052\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\034\027\035\015\036\034\037\356\040\035" +
    "\041\036\042\022\043\u014e\001\001\000\020\034\027\035" +
    "\015\036\034\037\361\040\035\041\036\042\022\001\001" +
    "\000\002\001\001\000\020\034\027\035\015\036\034\037" +
    "\361\040\035\041\036\042\022\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticoStatPy$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticoStatPy$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticoStatPy$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    public void syntax_error(Symbol s){ 
        System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
    } 

    
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido."); 
    } 

    //Tabla de Variables y Tokens
    public HashMap<String, Object> t_variables = new HashMap<String, Object>();
    public String Titulo_Barras,TituloEjeX_Barras,TituloEjeY_Barras;
    public List<String> EjeX= new ArrayList<String>();
    public List<Double> Valores= new ArrayList<Double>();
    
    public String Titulo_Pie;
    public List<String> EjeX_Pie= new ArrayList<String>();
    public List<Double> Valores_Pie= new ArrayList<Double>();
    

    public String Traduccion="";
    



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SintacticoStatPy$actions {
  private final SintacticoStatPy parser;

  /** Constructor */
  CUP$SintacticoStatPy$actions(SintacticoStatPy parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SintacticoStatPy$do_action_part00000000(
    int                        CUP$SintacticoStatPy$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoStatPy$parser,
    java.util.Stack            CUP$SintacticoStatPy$stack,
    int                        CUP$SintacticoStatPy$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticoStatPy$result;

      /* select the action based on the action number */
      switch (CUP$SintacticoStatPy$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).value;
		RESULT = start_val;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintacticoStatPy$parser.done_parsing();
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= VOID MAIN PARIZQ PARDER BRAIZQ listainstrucciones BRADER 
            {
              Object RESULT =null;

              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // listainstrucciones ::= listainstrucciones instrucciones 
            {
              Object RESULT =null;

              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("listainstrucciones",5, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // listainstrucciones ::= instrucciones 
            {
              Object RESULT =null;

              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("listainstrucciones",5, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instrucciones ::= sentencias 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		System.out.println(a);Traduccion+=a+"\n";
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instrucciones ::= globales 
            {
              Object RESULT =null;

              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instrucciones ::= barras 
            {
              Object RESULT =null;

              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instrucciones ::= pie 
            {
              Object RESULT =null;

              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sentencias ::= declaracion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("sentencias",29, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sentencias ::= print 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("sentencias",29, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // sentencias ::= if 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("sentencias",29, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // sentencias ::= while 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("sentencias",29, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // sentencias ::= for 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("sentencias",29, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sentencias ::= dowhile 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("sentencias",29, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // if ::= IF PARIZQ expresion PARDER BRAIZQ listasentencias BRADER 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).value;
		String ide=Variable.formatCodeWithIndentation(s);RESULT="if "+a+":\n"+ide;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("if",28, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // if ::= ELSE IF PARIZQ expresion PARDER BRAIZQ listasentencias BRADER 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).value;
		String ide=Variable.formatCodeWithIndentation(s);RESULT="elif "+a+":\n"+ide;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("if",28, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // if ::= ELSE BRAIZQ listasentencias BRADER 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).value;
		String ide=Variable.formatCodeWithIndentation(s);RESULT="else:\n"+ide;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("if",28, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // while ::= WHILE PARIZQ expresion PARDER BRAIZQ listasentencias BRADER 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).value;
		String ide=Variable.formatCodeWithIndentation(s);RESULT="while "+a+":\n"+ide;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("while",30, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // for ::= FOR PARIZQ INT IDENT IGUAL expresion PTOCOMA IDENT MENOR expresion PTOCOMA IDENT MAS MAS PARDER BRAIZQ listasentencias BRADER 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-14)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-14)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-14)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-12)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-12)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-12)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-8)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-8)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-8)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).value;
		
String ide=Variable.formatCodeWithIndentation(s);
RESULT="for "+a+" in range("+b+","+d+"):\n"+ide;

              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("for",31, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-17)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // for ::= FOR PARIZQ INT IDENT IGUAL expresion PTOCOMA IDENT MENORIGUAL expresion PTOCOMA IDENT MAS MAS PARDER BRAIZQ listasentencias BRADER 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-14)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-14)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-14)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-12)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-12)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-12)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-8)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-8)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-8)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).value;
		
String ide=Variable.formatCodeWithIndentation(s);
int sup = Integer.parseInt(d);
sup++;
RESULT="for "+a+" in range("+b+","+sup+"):\n"+ide;

              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("for",31, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-17)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // for ::= FOR PARIZQ IDENT IGUAL expresion PTOCOMA IDENT MENOR expresion PTOCOMA IDENT MAS MAS PARDER BRAIZQ listasentencias BRADER 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-14)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-14)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-14)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-12)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-12)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-12)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-8)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-8)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-8)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).value;
		
String ide=Variable.formatCodeWithIndentation(s);
RESULT="for "+a+" in range("+b+","+d+"):\n"+ide;

              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("for",31, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-16)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // for ::= FOR PARIZQ IDENT IGUAL expresion PTOCOMA IDENT MENORIGUAL expresion PTOCOMA IDENT MAS MAS PARDER BRAIZQ listasentencias BRADER 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-14)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-14)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-14)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-12)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-12)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-12)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-8)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-8)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-8)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).value;
		
String ide=Variable.formatCodeWithIndentation(s);
int sup = Integer.parseInt(d);
sup++;
RESULT="for "+a+" in range("+b+","+sup+"):\n"+ide;

              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("for",31, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-16)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // dowhile ::= DO BRAIZQ listasentencias BRADER WHILE PARIZQ IDENT MENOR expresion PARDER PTOCOMA 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-8)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-8)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).value;
		
String ide=Variable.formatCodeWithIndentation(s);
RESULT="While True:\n"+ide+"\n    if "+a+" == "+d+":\n        break";

              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("dowhile",32, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-10)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // dowhile ::= DO BRAIZQ listasentencias BRADER WHILE PARIZQ IDENT MENORIGUAL expresion PARDER PTOCOMA 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-8)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-8)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).value;
		
String ide=Variable.formatCodeWithIndentation(s);
int sup = Integer.parseInt(d);
sup++;
RESULT="While True:\n"+ide+"\n    if "+a+" == "+sup+":\n        break";

              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("dowhile",32, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-10)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // listasentencias ::= listasentencias sentencias 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		RESULT=b+"\n"+a;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("listasentencias",33, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // listasentencias ::= sentencias 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("listasentencias",33, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // declaracion ::= INT IDENT IGUAL expresion PTOCOMA 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		RESULT=b+c+exp;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("declaracion",26, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // declaracion ::= DOUBLE IDENT IGUAL expresion PTOCOMA 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		RESULT=b+c+exp;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("declaracion",26, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // declaracion ::= STRING IDENT IGUAL expresion PTOCOMA 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		RESULT=b+c+exp;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("declaracion",26, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // declaracion ::= PCHAR IDENT IGUAL expresion PTOCOMA 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		RESULT=b+c+exp;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("declaracion",26, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // declaracion ::= BOOL IDENT IGUAL expresion PTOCOMA 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		RESULT=b+c+exp;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("declaracion",26, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // declaracion ::= IDENT MAS MAS PTOCOMA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).value;
		RESULT=a+"="+a+"+1";
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("declaracion",26, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // print ::= CONSOLE PUNTO WRITE PARIZQ expresion PARDER PTOCOMA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-4)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-3)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		
if(exp.contains("\"")){
if(exp.contains("+")){
exp=exp.replace("+",",");
}
}
RESULT="print("+exp+")";

              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("print",27, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expresion ::= symbols 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("expresion",8, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expresion ::= uno 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("expresion",8, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expresion ::= aritmetica 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("expresion",8, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expresion ::= logica 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("expresion",8, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expresion ::= PARIZQ expresion PARDER 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).value;
		RESULT="("+a+")";
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("expresion",8, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // symbols ::= IDENT 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("symbols",24, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // symbols ::= CADENA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("symbols",24, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // symbols ::= CHAR 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("symbols",24, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // symbols ::= TRUE 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		RESULT="True";
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("symbols",24, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // symbols ::= FALSE 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		RESULT="False";
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("symbols",24, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // aritmetica ::= expresion MAS expresion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		RESULT=a+"+"+b;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("aritmetica",22, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // aritmetica ::= expresion MENOS expresion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		RESULT=a+"-"+b;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("aritmetica",22, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // aritmetica ::= expresion POR expresion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		RESULT=a+"*"+b;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("aritmetica",22, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // aritmetica ::= expresion DIVIDIDO expresion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		RESULT=a+"/"+b;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("aritmetica",22, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // aritmetica ::= DECIMAL 
            {
              String RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String dec = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		RESULT=dec;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("aritmetica",22, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // aritmetica ::= ENTERO 
            {
              String RESULT =null;
		int enleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int enright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String en = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		RESULT=en;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("aritmetica",22, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // logica ::= expresion MAYOR expresion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		RESULT=a+" "+b+" "+c;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("logica",23, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // logica ::= expresion MENOR expresion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		RESULT=a+" "+b+" "+c;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("logica",23, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // logica ::= expresion MAYORIGUAL expresion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		RESULT=a+" "+b+" "+c;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("logica",23, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // logica ::= expresion MENORIGUAL expresion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		RESULT=a+" "+b+" "+c;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("logica",23, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // logica ::= expresion EQUALS expresion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		RESULT=a+" "+b+" "+c;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("logica",23, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // logica ::= expresion NOTEQUALS expresion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		RESULT=a+" "+b+" "+c;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("logica",23, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // logica ::= expresion AND expresion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		RESULT=a+" and "+c;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("logica",23, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // logica ::= expresion OR expresion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		RESULT=a+" or "+c;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("logica",23, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // uno ::= MENOS expresion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		RESULT=a+b;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("uno",25, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // uno ::= NOT expresion 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		RESULT="not "+b;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("uno",25, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // globales ::= VOID DEFGLOB PARIZQ PARDER BRAIZQ listaglobales BRADER 
            {
              Object RESULT =null;

              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("globales",2, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // listaglobales ::= listaglobales variablesglobales 
            {
              Object RESULT =null;

              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("listaglobales",6, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // listaglobales ::= variablesglobales 
            {
              Object RESULT =null;

              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("listaglobales",6, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // variablesglobales ::= STRING IDENT IGUAL CADENA PTOCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).value;
		t_variables.put(a,b.replace("\"",""));
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("variablesglobales",7, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // variablesglobales ::= DOUBLE IDENT IGUAL DECIMAL PTOCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).value;
		t_variables.put(a,b);
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("variablesglobales",7, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // variablesglobales ::= DOUBLE IDENT IGUAL variablesjson PTOCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).value;
		t_variables.put(a,b);
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("variablesglobales",7, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // variablesglobales ::= STRING IDENT IGUAL variablesjson PTOCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).value;
		t_variables.put(a,b);
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("variablesglobales",7, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // variablesjson ::= DOLAR BRAIZQ NEWVAL COMA CADENA COMA CADENA BRADER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).value;
		
Object var=Variable.BuscarVariable(a.replace("\"",""),b.replace("\"",""));
RESULT=var;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("variablesjson",9, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // barras ::= VOID GRAFBAR PARIZQ PARDER BRAIZQ listabarras BRADER 
            {
              Object RESULT =null;

              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("barras",3, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // listabarras ::= listabarras instruccionesbarras 
            {
              Object RESULT =null;

              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("listabarras",10, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // listabarras ::= instruccionesbarras 
            {
              Object RESULT =null;

              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("listabarras",10, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // instruccionesbarras ::= STRING TITULO IGUAL IDENT PTOCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).value;
		Titulo_Barras=t_variables.get(a).toString();
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("instruccionesbarras",11, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // instruccionesbarras ::= STRING TITULO IGUAL CADENA PTOCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).value;
		Titulo_Barras=a.replace("\"","");
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("instruccionesbarras",11, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // instruccionesbarras ::= STRING TITULO IGUAL variablesjson PTOCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).value;
		Titulo_Barras=a.toString();
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("instruccionesbarras",11, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // instruccionesbarras ::= STRING TITULOX IGUAL IDENT PTOCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).value;
		TituloEjeX_Barras=t_variables.get(a).toString();
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("instruccionesbarras",11, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // instruccionesbarras ::= STRING TITULOX IGUAL CADENA PTOCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).value;
		TituloEjeX_Barras=a.replace("\"","");
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("instruccionesbarras",11, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // instruccionesbarras ::= STRING TITULOX IGUAL variablesjson PTOCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).value;
		TituloEjeX_Barras=a.toString();
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("instruccionesbarras",11, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // instruccionesbarras ::= STRING TITULOY IGUAL IDENT PTOCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).value;
		TituloEjeY_Barras=t_variables.get(a).toString();
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("instruccionesbarras",11, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // instruccionesbarras ::= STRING TITULOY IGUAL CADENA PTOCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).value;
		TituloEjeY_Barras=a.replace("\"","");
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("instruccionesbarras",11, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // instruccionesbarras ::= STRING TITULOY IGUAL variablesjson PTOCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).value;
		TituloEjeY_Barras=a.toString();
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("instruccionesbarras",11, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // instruccionesbarras ::= STRING LLAIZQ LLADER EJEX IGUAL BRAIZQ listastring BRADER PTOCOMA 
            {
              Object RESULT =null;

              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("instruccionesbarras",11, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // instruccionesbarras ::= DOUBLE LLAIZQ LLADER VALORES IGUAL BRAIZQ listadouble BRADER PTOCOMA 
            {
              Object RESULT =null;

              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("instruccionesbarras",11, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // listastring ::= listastring COMA arreglostring 
            {
              Object RESULT =null;

              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("listastring",12, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // listastring ::= arreglostring 
            {
              Object RESULT =null;

              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("listastring",12, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // arreglostring ::= CADENA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		EjeX.add(a.replace("\"",""));
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("arreglostring",13, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // arreglostring ::= IDENT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		EjeX.add(t_variables.get(a).toString());
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("arreglostring",13, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // arreglostring ::= variablesjson 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		EjeX.add(a.toString());
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("arreglostring",13, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // listadouble ::= listadouble COMA arreglodouble 
            {
              Object RESULT =null;

              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("listadouble",14, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // listadouble ::= arreglodouble 
            {
              Object RESULT =null;

              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("listadouble",14, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // arreglodouble ::= DECIMAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		Valores.add(Double.parseDouble(a));
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("arreglodouble",15, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // arreglodouble ::= IDENT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		String numero=t_variables.get(a).toString();
                          Valores.add(Double.parseDouble(numero));
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("arreglodouble",15, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // arreglodouble ::= variablesjson 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		String numero=a.toString();
                                  Valores.add(Double.parseDouble(numero));
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("arreglodouble",15, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // arreglodouble ::= ENTERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		Valores.add(Double.parseDouble(a));
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("arreglodouble",15, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // pie ::= VOID GRAFPI PARIZQ PARDER BRAIZQ listapie BRADER 
            {
              Object RESULT =null;

              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("pie",4, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // listapie ::= listapie instruccionespie 
            {
              Object RESULT =null;

              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("listapie",16, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // listapie ::= instruccionespie 
            {
              Object RESULT =null;

              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("listapie",16, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // instruccionespie ::= STRING TITULO IGUAL IDENT PTOCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).value;
		Titulo_Pie=t_variables.get(a).toString();
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("instruccionespie",17, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // instruccionespie ::= STRING TITULO IGUAL CADENA PTOCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).value;
		Titulo_Pie=a.replace("\"","");
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("instruccionespie",17, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // instruccionespie ::= STRING TITULO IGUAL variablesjson PTOCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).value;
		Titulo_Pie=a.toString();
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("instruccionespie",17, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // instruccionespie ::= STRING LLAIZQ LLADER EJEX IGUAL BRAIZQ listastringpie BRADER PTOCOMA 
            {
              Object RESULT =null;

              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("instruccionespie",17, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // instruccionespie ::= DOUBLE LLAIZQ LLADER VALORES IGUAL BRAIZQ listadoublepie BRADER PTOCOMA 
            {
              Object RESULT =null;

              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("instruccionespie",17, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // listastringpie ::= listastringpie COMA arreglostringpie 
            {
              Object RESULT =null;

              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("listastringpie",18, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // listastringpie ::= arreglostringpie 
            {
              Object RESULT =null;

              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("listastringpie",18, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // listadoublepie ::= listadoublepie COMA arreglodoublepie 
            {
              Object RESULT =null;

              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("listadoublepie",20, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // listadoublepie ::= arreglodoublepie 
            {
              Object RESULT =null;

              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("listadoublepie",20, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // arreglostringpie ::= CADENA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		EjeX_Pie.add(a.replace("\"",""));
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("arreglostringpie",19, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // arreglostringpie ::= IDENT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		EjeX_Pie.add(t_variables.get(a).toString());
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("arreglostringpie",19, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // arreglostringpie ::= variablesjson 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		EjeX_Pie.add(a.toString());
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("arreglostringpie",19, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // arreglodoublepie ::= DECIMAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		Valores_Pie.add(Double.parseDouble(a));
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("arreglodoublepie",21, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // arreglodoublepie ::= IDENT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		String numero=t_variables.get(a).toString();
                          Valores_Pie.add(Double.parseDouble(numero));
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("arreglodoublepie",21, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // arreglodoublepie ::= variablesjson 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		String numero=a.toString();
                                  Valores_Pie.add(Double.parseDouble(numero));
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("arreglodoublepie",21, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // arreglodoublepie ::= ENTERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		Valores_Pie.add(Double.parseDouble(a));
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("arreglodoublepie",21, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SintacticoStatPy$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SintacticoStatPy$do_action(
    int                        CUP$SintacticoStatPy$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoStatPy$parser,
    java.util.Stack            CUP$SintacticoStatPy$stack,
    int                        CUP$SintacticoStatPy$top)
    throws java.lang.Exception
    {
              return CUP$SintacticoStatPy$do_action_part00000000(
                               CUP$SintacticoStatPy$act_num,
                               CUP$SintacticoStatPy$parser,
                               CUP$SintacticoStatPy$stack,
                               CUP$SintacticoStatPy$top);
    }
}

}
