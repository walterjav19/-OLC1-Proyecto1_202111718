
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores;

import java_cup.runtime.*;
import java.util.HashMap;
import Estructuras.Variable;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SintacticoStatPy extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public SintacticoStatPy() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SintacticoStatPy(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticoStatPy(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\132\000\002\002\004\000\002\002\011\000\002\010" +
    "\004\000\002\010\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\004\003\000" +
    "\002\004\003\000\002\035\007\000\002\035\007\000\002" +
    "\036\011\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\005\000\002\033\003" +
    "\000\002\033\003\000\002\033\003\000\002\033\003\000" +
    "\002\031\005\000\002\031\005\000\002\031\005\000\002" +
    "\031\005\000\002\031\003\000\002\031\003\000\002\032" +
    "\005\000\002\032\005\000\002\032\005\000\002\032\005" +
    "\000\002\032\005\000\002\032\005\000\002\032\005\000" +
    "\002\032\005\000\002\034\004\000\002\034\004\000\002" +
    "\005\011\000\002\011\004\000\002\011\003\000\002\012" +
    "\007\000\002\012\007\000\002\012\007\000\002\012\007" +
    "\000\002\014\012\000\002\006\011\000\002\015\004\000" +
    "\002\015\003\000\002\016\007\000\002\016\007\000\002" +
    "\016\007\000\002\016\007\000\002\016\007\000\002\016" +
    "\007\000\002\016\007\000\002\016\007\000\002\016\007" +
    "\000\002\016\013\000\002\016\013\000\002\017\005\000" +
    "\002\017\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\021\005\000\002\021\003\000\002\022" +
    "\003\000\002\022\003\000\002\022\003\000\002\022\003" +
    "\000\002\007\011\000\002\023\004\000\002\023\003\000" +
    "\002\024\007\000\002\024\007\000\002\024\007\000\002" +
    "\024\013\000\002\024\013\000\002\025\005\000\002\025" +
    "\003\000\002\027\005\000\002\027\003\000\002\026\003" +
    "\000\002\026\003\000\002\026\003\000\002\030\003\000" +
    "\002\030\003\000\002\030\003\000\002\030\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\331\000\004\010\004\001\002\000\004\011\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\013\010\001\002\000\004\012\011\001\002\000" +
    "\004\004\012\001\002\000\012\010\016\022\014\023\021" +
    "\040\024\001\002\000\014\005\ufff8\010\ufff8\022\ufff8\023" +
    "\ufff8\040\ufff8\001\002\000\004\014\330\001\002\000\014" +
    "\005\326\010\016\022\014\023\021\040\024\001\002\000" +
    "\010\016\113\017\112\020\114\001\002\000\014\005\ufffe" +
    "\010\ufffe\022\ufffe\023\ufffe\040\ufffe\001\002\000\014\005" +
    "\ufffa\010\ufffa\022\ufffa\023\ufffa\040\ufffa\001\002\000\004" +
    "\014\106\001\002\000\014\005\ufffc\010\ufffc\022\ufffc\023" +
    "\ufffc\040\ufffc\001\002\000\014\005\ufff9\010\ufff9\022\ufff9" +
    "\023\ufff9\040\ufff9\001\002\000\004\042\027\001\002\000" +
    "\014\005\ufffd\010\ufffd\022\ufffd\023\ufffd\040\ufffd\001\002" +
    "\000\014\005\ufffb\010\ufffb\022\ufffb\023\ufffb\040\ufffb\001" +
    "\002\000\004\041\030\001\002\000\004\013\031\001\002" +
    "\000\024\006\032\007\033\013\041\014\034\025\037\044" +
    "\036\055\046\061\047\063\044\001\002\000\036\012\uffee" +
    "\021\uffee\043\uffee\044\uffee\045\uffee\046\uffee\047\uffee\050" +
    "\uffee\051\uffee\052\uffee\053\uffee\054\uffee\056\uffee\057\uffee" +
    "\001\002\000\036\012\uffe7\021\uffe7\043\uffe7\044\uffe7\045" +
    "\uffe7\046\uffe7\047\uffe7\050\uffe7\051\uffe7\052\uffe7\053\uffe7" +
    "\054\uffe7\056\uffe7\057\uffe7\001\002\000\036\012\uffef\021" +
    "\uffef\043\uffef\044\uffef\045\uffef\046\uffef\047\uffef\050\uffef" +
    "\051\uffef\052\uffef\053\uffef\054\uffef\056\uffef\057\uffef\001" +
    "\002\000\036\012\ufff4\021\ufff4\043\ufff4\044\ufff4\045\ufff4" +
    "\046\ufff4\047\ufff4\050\ufff4\051\ufff4\052\ufff4\053\ufff4\054" +
    "\ufff4\056\ufff4\057\ufff4\001\002\000\024\006\032\007\033" +
    "\013\041\014\034\025\037\044\036\055\046\061\047\063" +
    "\044\001\002\000\036\012\uffe6\021\uffe6\043\uffe6\044\uffe6" +
    "\045\uffe6\046\uffe6\047\uffe6\050\uffe6\051\uffe6\052\uffe6\053" +
    "\uffe6\054\uffe6\056\uffe6\057\uffe6\001\002\000\036\012\ufff3" +
    "\021\ufff3\043\ufff3\044\ufff3\045\ufff3\046\ufff3\047\ufff3\050" +
    "\ufff3\051\ufff3\052\ufff3\053\ufff3\054\ufff3\056\ufff3\057\ufff3" +
    "\001\002\000\024\006\032\007\033\013\041\014\034\025" +
    "\037\044\036\055\046\061\047\063\044\001\002\000\034" +
    "\012\101\043\060\044\053\045\056\046\057\047\062\050" +
    "\054\051\061\052\052\053\063\054\055\056\051\057\064" +
    "\001\002\000\036\012\ufff2\021\ufff2\043\ufff2\044\ufff2\045" +
    "\ufff2\046\ufff2\047\ufff2\050\ufff2\051\ufff2\052\ufff2\053\ufff2" +
    "\054\ufff2\056\ufff2\057\ufff2\001\002\000\036\012\uffec\021" +
    "\uffec\043\uffec\044\uffec\045\uffec\046\uffec\047\uffec\050\uffec" +
    "\051\uffec\052\uffec\053\uffec\054\uffec\056\uffec\057\uffec\001" +
    "\002\000\036\012\ufff1\021\ufff1\043\ufff1\044\ufff1\045\ufff1" +
    "\046\ufff1\047\ufff1\050\ufff1\051\ufff1\052\ufff1\053\ufff1\054" +
    "\ufff1\056\ufff1\057\ufff1\001\002\000\024\006\032\007\033" +
    "\013\041\014\034\025\037\044\036\055\046\061\047\063" +
    "\044\001\002\000\036\012\uffed\021\uffed\043\uffed\044\uffed" +
    "\045\uffed\046\uffed\047\uffed\050\uffed\051\uffed\052\uffed\053" +
    "\uffed\054\uffed\056\uffed\057\uffed\001\002\000\036\012\uffdc" +
    "\021\uffdc\043\uffdc\044\uffdc\045\uffdc\046\uffdc\047\uffdc\050" +
    "\uffdc\051\uffdc\052\uffdc\053\uffdc\054\uffdc\056\uffdc\057\uffdc" +
    "\001\002\000\024\006\032\007\033\013\041\014\034\025" +
    "\037\044\036\055\046\061\047\063\044\001\002\000\024" +
    "\006\032\007\033\013\041\014\034\025\037\044\036\055" +
    "\046\061\047\063\044\001\002\000\024\006\032\007\033" +
    "\013\041\014\034\025\037\044\036\055\046\061\047\063" +
    "\044\001\002\000\024\006\032\007\033\013\041\014\034" +
    "\025\037\044\036\055\046\061\047\063\044\001\002\000" +
    "\024\006\032\007\033\013\041\014\034\025\037\044\036" +
    "\055\046\061\047\063\044\001\002\000\024\006\032\007" +
    "\033\013\041\014\034\025\037\044\036\055\046\061\047" +
    "\063\044\001\002\000\024\006\032\007\033\013\041\014" +
    "\034\025\037\044\036\055\046\061\047\063\044\001\002" +
    "\000\024\006\032\007\033\013\041\014\034\025\037\044" +
    "\036\055\046\061\047\063\044\001\002\000\024\006\032" +
    "\007\033\013\041\014\034\025\037\044\036\055\046\061" +
    "\047\063\044\001\002\000\024\006\032\007\033\013\041" +
    "\014\034\025\037\044\036\055\046\061\047\063\044\001" +
    "\002\000\024\006\032\007\033\013\041\014\034\025\037" +
    "\044\036\055\046\061\047\063\044\001\002\000\024\006" +
    "\032\007\033\013\041\014\034\025\037\044\036\055\046" +
    "\061\047\063\044\001\002\000\036\012\uffde\021\uffde\043" +
    "\060\044\053\045\056\046\057\047\uffde\050\uffde\051\uffde" +
    "\052\uffde\053\uffde\054\uffde\056\uffde\057\uffde\001\002\000" +
    "\036\012\uffe1\021\uffe1\043\060\044\053\045\056\046\057" +
    "\047\uffe1\050\uffe1\051\uffe1\052\uffe1\053\uffe1\054\uffe1\056" +
    "\051\057\064\001\002\000\036\012\uffe5\021\uffe5\043\060" +
    "\044\053\045\056\046\057\047\uffe5\050\uffe5\051\uffe5\052" +
    "\uffe5\053\uffe5\054\uffe5\056\051\057\064\001\002\000\036" +
    "\012\uffe3\021\uffe3\043\060\044\053\045\056\046\057\047" +
    "\uffe3\050\uffe3\051\uffe3\052\uffe3\053\uffe3\054\uffe3\056\051" +
    "\057\064\001\002\000\036\012\uffeb\021\uffeb\043\uffeb\044" +
    "\uffeb\045\056\046\057\047\uffeb\050\uffeb\051\uffeb\052\uffeb" +
    "\053\uffeb\054\uffeb\056\uffeb\057\uffeb\001\002\000\036\012" +
    "\uffe8\021\uffe8\043\uffe8\044\uffe8\045\uffe8\046\uffe8\047\uffe8" +
    "\050\uffe8\051\uffe8\052\uffe8\053\uffe8\054\uffe8\056\uffe8\057" +
    "\uffe8\001\002\000\036\012\uffe9\021\uffe9\043\uffe9\044\uffe9" +
    "\045\uffe9\046\uffe9\047\uffe9\050\uffe9\051\uffe9\052\uffe9\053" +
    "\uffe9\054\uffe9\056\uffe9\057\uffe9\001\002\000\036\012\uffe0" +
    "\021\uffe0\043\060\044\053\045\056\046\057\047\uffe0\050" +
    "\uffe0\051\uffe0\052\uffe0\053\uffe0\054\uffe0\056\051\057\064" +
    "\001\002\000\036\012\uffe4\021\uffe4\043\060\044\053\045" +
    "\056\046\057\047\uffe4\050\uffe4\051\uffe4\052\uffe4\053\uffe4" +
    "\054\uffe4\056\051\057\064\001\002\000\036\012\uffea\021" +
    "\uffea\043\uffea\044\uffea\045\056\046\057\047\uffea\050\uffea" +
    "\051\uffea\052\uffea\053\uffea\054\uffea\056\uffea\057\uffea\001" +
    "\002\000\036\012\uffe2\021\uffe2\043\060\044\053\045\056" +
    "\046\057\047\uffe2\050\uffe2\051\uffe2\052\uffe2\053\uffe2\054" +
    "\uffe2\056\051\057\064\001\002\000\036\012\uffdf\021\uffdf" +
    "\043\060\044\053\045\056\046\057\047\uffdf\050\uffdf\051" +
    "\uffdf\052\uffdf\053\uffdf\054\uffdf\056\uffdf\057\uffdf\001\002" +
    "\000\004\021\102\001\002\000\014\005\ufff5\010\ufff5\022" +
    "\ufff5\023\ufff5\040\ufff5\001\002\000\034\012\104\043\060" +
    "\044\053\045\056\046\057\047\062\050\054\051\061\052" +
    "\052\053\063\054\055\056\051\057\064\001\002\000\036" +
    "\012\ufff0\021\ufff0\043\ufff0\044\ufff0\045\ufff0\046\ufff0\047" +
    "\ufff0\050\ufff0\051\ufff0\052\ufff0\053\ufff0\054\ufff0\056\ufff0" +
    "\057\ufff0\001\002\000\036\012\uffdd\021\uffdd\043\uffdd\044" +
    "\uffdd\045\uffdd\046\uffdd\047\uffdd\050\uffdd\051\uffdd\052\uffdd" +
    "\053\uffdd\054\uffdd\056\uffdd\057\uffdd\001\002\000\004\015" +
    "\107\001\002\000\024\006\032\007\033\013\041\014\034" +
    "\025\037\044\036\055\046\061\047\063\044\001\002\000" +
    "\034\021\111\043\060\044\053\045\056\046\057\047\062" +
    "\050\054\051\061\052\052\053\063\054\055\056\051\057" +
    "\064\001\002\000\014\005\ufff6\010\ufff6\022\ufff6\023\ufff6" +
    "\040\ufff6\001\002\000\004\013\230\001\002\000\004\013" +
    "\203\001\002\000\004\013\115\001\002\000\004\012\116" +
    "\001\002\000\004\004\117\001\002\000\006\023\120\024" +
    "\122\001\002\000\004\031\164\001\002\000\010\005\uffb8" +
    "\023\uffb8\024\uffb8\001\002\000\006\031\127\033\126\001" +
    "\002\000\010\005\125\023\120\024\122\001\002\000\010" +
    "\005\uffb9\023\uffb9\024\uffb9\001\002\000\014\005\uffba\010" +
    "\uffba\022\uffba\023\uffba\040\uffba\001\002\000\004\015\155" +
    "\001\002\000\004\032\130\001\002\000\004\034\131\001" +
    "\002\000\004\015\132\001\002\000\004\004\133\001\002" +
    "\000\010\006\141\014\136\027\134\001\002\000\004\004" +
    "\146\001\002\000\006\005\uffac\030\uffac\001\002\000\006" +
    "\005\uffad\030\uffad\001\002\000\006\005\uffb1\030\uffb1\001" +
    "\002\000\006\005\143\030\142\001\002\000\006\005\uffae" +
    "\030\uffae\001\002\000\010\006\141\014\136\027\134\001" +
    "\002\000\004\021\144\001\002\000\010\005\uffb4\023\uffb4" +
    "\024\uffb4\001\002\000\006\005\uffb2\030\uffb2\001\002\000" +
    "\004\026\147\001\002\000\004\030\150\001\002\000\004" +
    "\006\151\001\002\000\004\030\152\001\002\000\004\006" +
    "\153\001\002\000\004\005\154\001\002\000\010\005\uffd4" +
    "\021\uffd4\030\uffd4\001\002\000\010\006\160\014\157\027" +
    "\134\001\002\000\004\021\163\001\002\000\004\021\162" +
    "\001\002\000\004\021\161\001\002\000\010\005\uffb6\023" +
    "\uffb6\024\uffb6\001\002\000\010\005\uffb7\023\uffb7\024\uffb7" +
    "\001\002\000\010\005\uffb5\023\uffb5\024\uffb5\001\002\000" +
    "\004\032\165\001\002\000\004\035\166\001\002\000\004" +
    "\015\167\001\002\000\004\004\170\001\002\000\012\007" +
    "\174\014\172\025\176\027\134\001\002\000\006\005\uffa9" +
    "\030\uffa9\001\002\000\006\005\uffaa\030\uffaa\001\002\000" +
    "\006\005\200\030\177\001\002\000\006\005\uffab\030\uffab" +
    "\001\002\000\006\005\uffaf\030\uffaf\001\002\000\006\005" +
    "\uffa8\030\uffa8\001\002\000\012\007\174\014\172\025\176" +
    "\027\134\001\002\000\004\021\201\001\002\000\010\005" +
    "\uffb3\023\uffb3\024\uffb3\001\002\000\006\005\uffb0\030\uffb0" +
    "\001\002\000\004\012\204\001\002\000\004\004\205\001" +
    "\002\000\006\023\206\024\207\001\002\000\004\014\222" +
    "\001\002\000\004\014\214\001\002\000\010\005\uffd9\023" +
    "\uffd9\024\uffd9\001\002\000\010\005\212\023\206\024\207" +
    "\001\002\000\014\005\uffdb\010\uffdb\022\uffdb\023\uffdb\040" +
    "\uffdb\001\002\000\010\005\uffda\023\uffda\024\uffda\001\002" +
    "\000\004\015\215\001\002\000\006\006\217\027\134\001" +
    "\002\000\004\021\221\001\002\000\004\021\220\001\002" +
    "\000\010\005\uffd8\023\uffd8\024\uffd8\001\002\000\010\005" +
    "\uffd5\023\uffd5\024\uffd5\001\002\000\004\015\223\001\002" +
    "\000\006\007\225\027\134\001\002\000\004\021\227\001" +
    "\002\000\004\021\226\001\002\000\010\005\uffd7\023\uffd7" +
    "\024\uffd7\001\002\000\010\005\uffd6\023\uffd6\024\uffd6\001" +
    "\002\000\004\012\231\001\002\000\004\004\232\001\002" +
    "\000\006\023\233\024\234\001\002\000\004\031\307\001" +
    "\002\000\012\031\244\033\241\036\242\037\243\001\002" +
    "\000\010\005\uffd1\023\uffd1\024\uffd1\001\002\000\010\005" +
    "\237\023\233\024\234\001\002\000\014\005\uffd3\010\uffd3" +
    "\022\uffd3\023\uffd3\040\uffd3\001\002\000\010\005\uffd2\023" +
    "\uffd2\024\uffd2\001\002\000\004\015\300\001\002\000\004" +
    "\015\271\001\002\000\004\015\262\001\002\000\004\032" +
    "\245\001\002\000\004\034\246\001\002\000\004\015\247" +
    "\001\002\000\004\004\250\001\002\000\010\006\255\014" +
    "\253\027\134\001\002\000\006\005\uffc1\030\uffc1\001\002" +
    "\000\006\005\257\030\256\001\002\000\006\005\uffc2\030" +
    "\uffc2\001\002\000\006\005\uffc4\030\uffc4\001\002\000\006" +
    "\005\uffc3\030\uffc3\001\002\000\010\006\255\014\253\027" +
    "\134\001\002\000\004\021\260\001\002\000\010\005\uffc7" +
    "\023\uffc7\024\uffc7\001\002\000\006\005\uffc5\030\uffc5\001" +
    "\002\000\010\006\265\014\264\027\134\001\002\000\004" +
    "\021\270\001\002\000\004\021\267\001\002\000\004\021" +
    "\266\001\002\000\010\005\uffcc\023\uffcc\024\uffcc\001\002" +
    "\000\010\005\uffcd\023\uffcd\024\uffcd\001\002\000\010\005" +
    "\uffcb\023\uffcb\024\uffcb\001\002\000\010\006\274\014\273" +
    "\027\134\001\002\000\004\021\277\001\002\000\004\021" +
    "\276\001\002\000\004\021\275\001\002\000\010\005\uffc9" +
    "\023\uffc9\024\uffc9\001\002\000\010\005\uffca\023\uffca\024" +
    "\uffca\001\002\000\010\005\uffc8\023\uffc8\024\uffc8\001\002" +
    "\000\010\006\303\014\302\027\134\001\002\000\004\021" +
    "\306\001\002\000\004\021\305\001\002\000\004\021\304" +
    "\001\002\000\010\005\uffcf\023\uffcf\024\uffcf\001\002\000" +
    "\010\005\uffd0\023\uffd0\024\uffd0\001\002\000\010\005\uffce" +
    "\023\uffce\024\uffce\001\002\000\004\032\310\001\002\000" +
    "\004\035\311\001\002\000\004\015\312\001\002\000\004" +
    "\004\313\001\002\000\012\007\317\014\316\025\321\027" +
    "\134\001\002\000\006\005\uffbc\030\uffbc\001\002\000\006" +
    "\005\323\030\322\001\002\000\006\005\uffbd\030\uffbd\001" +
    "\002\000\006\005\uffbe\030\uffbe\001\002\000\006\005\uffbf" +
    "\030\uffbf\001\002\000\006\005\uffbb\030\uffbb\001\002\000" +
    "\012\007\317\014\316\025\321\027\134\001\002\000\004" +
    "\021\324\001\002\000\010\005\uffc6\023\uffc6\024\uffc6\001" +
    "\002\000\006\005\uffc0\030\uffc0\001\002\000\004\002\000" +
    "\001\002\000\014\005\uffff\010\uffff\022\uffff\023\uffff\040" +
    "\uffff\001\002\000\004\015\331\001\002\000\024\006\032" +
    "\007\033\013\041\014\034\025\037\044\036\055\046\061" +
    "\047\063\044\001\002\000\034\021\333\043\060\044\053" +
    "\045\056\046\057\047\062\050\054\051\061\052\052\053" +
    "\063\054\055\056\051\057\064\001\002\000\014\005\ufff7" +
    "\010\ufff7\022\ufff7\023\ufff7\040\ufff7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\331\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\003\016\004\024\005" +
    "\021\006\025\007\017\010\014\035\022\036\012\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\003\326\004" +
    "\024\005\021\006\025\007\017\035\022\036\012\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\013\041\031\042\032\044" +
    "\033\034\034\037\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\013\104" +
    "\031\042\032\044\033\034\034\037\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\013\102\031\042\032\044" +
    "\033\034\034\037\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\013\047" +
    "\031\042\032\044\033\034\034\037\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\013\077\031\042\032\044" +
    "\033\034\034\037\001\001\000\014\013\076\031\042\032" +
    "\044\033\034\034\037\001\001\000\014\013\075\031\042" +
    "\032\044\033\034\034\037\001\001\000\014\013\074\031" +
    "\042\032\044\033\034\034\037\001\001\000\014\013\073" +
    "\031\042\032\044\033\034\034\037\001\001\000\014\013" +
    "\072\031\042\032\044\033\034\034\037\001\001\000\014" +
    "\013\071\031\042\032\044\033\034\034\037\001\001\000" +
    "\014\013\070\031\042\032\044\033\034\034\037\001\001" +
    "\000\014\013\067\031\042\032\044\033\034\034\037\001" +
    "\001\000\014\013\066\031\042\032\044\033\034\034\037" +
    "\001\001\000\014\013\065\031\042\032\044\033\034\034" +
    "\037\001\001\000\014\013\064\031\042\032\044\033\034" +
    "\034\037\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\013\107\031\042\032\044\033\034\034\037\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\023\122\024\120\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\024\123\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\014\134\025\137\026\136\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\014\134\026\144\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\014\155\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\014\170\027\172\030\174\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\014\170" +
    "\030\201\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\011\210\012\207\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\212\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\014" +
    "\215\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\014" +
    "\223\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\015\235\016\234\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\016\237\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\014\250\017\251\020\253\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\014\250\020\260\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\014\262" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\271\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\014\300\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\014\313\021\314\022\317\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\014\313\022\324\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\013\331\031\042\032\044\033\034\034\037\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticoStatPy$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticoStatPy$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticoStatPy$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    public void syntax_error(Symbol s){ 
        System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
    } 

    
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido."); 
    } 

    //Tabla de Variables y Tokens
    public HashMap<String, Object> t_variables = new HashMap<String, Object>();
    public String Titulo_Barras,TituloEjeX_Barras,TituloEjeY_Barras;
    public List<String> EjeX= new ArrayList<String>();
    public List<Double> Valores= new ArrayList<Double>();
    
    public String Titulo_Pie;
    public List<String> EjeX_Pie= new ArrayList<String>();
    public List<Double> Valores_Pie= new ArrayList<Double>();
    public List<String> Traducciones= new ArrayList<String>();


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SintacticoStatPy$actions {
  private final SintacticoStatPy parser;

  /** Constructor */
  CUP$SintacticoStatPy$actions(SintacticoStatPy parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SintacticoStatPy$do_action_part00000000(
    int                        CUP$SintacticoStatPy$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoStatPy$parser,
    java.util.Stack            CUP$SintacticoStatPy$stack,
    int                        CUP$SintacticoStatPy$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticoStatPy$result;

      /* select the action based on the action number */
      switch (CUP$SintacticoStatPy$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).value;
		RESULT = start_val;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintacticoStatPy$parser.done_parsing();
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= VOID MAIN PARIZQ PARDER BRAIZQ listainstrucciones BRADER 
            {
              Object RESULT =null;

              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // listainstrucciones ::= listainstrucciones instrucciones 
            {
              Object RESULT =null;

              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("listainstrucciones",6, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // listainstrucciones ::= instrucciones 
            {
              Object RESULT =null;

              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("listainstrucciones",6, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instrucciones ::= sentencias 
            {
              Object RESULT =null;

              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instrucciones ::= globales 
            {
              Object RESULT =null;

              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instrucciones ::= barras 
            {
              Object RESULT =null;

              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instrucciones ::= pie 
            {
              Object RESULT =null;

              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sentencias ::= declaracion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		Traducciones.add(a);
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("sentencias",2, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sentencias ::= print 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		Traducciones.add(a);
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("sentencias",2, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaracion ::= INT IDENT IGUAL expresion PTOCOMA 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		RESULT=b+c+exp;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("declaracion",27, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declaracion ::= DOUBLE IDENT IGUAL expresion PTOCOMA 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		RESULT=b+c+exp;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("declaracion",27, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // print ::= CONSOLE PUNTO WRITE PARIZQ expresion PARDER PTOCOMA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-4)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-3)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		RESULT="print("+exp+")";
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("print",28, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expresion ::= symbols 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("expresion",9, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expresion ::= uno 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("expresion",9, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expresion ::= aritmetica 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("expresion",9, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expresion ::= logica 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("expresion",9, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expresion ::= PARIZQ expresion PARDER 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).value;
		RESULT="("+a+")";
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("expresion",9, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // symbols ::= IDENT 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("symbols",25, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // symbols ::= CADENA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("symbols",25, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // symbols ::= CHAR 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("symbols",25, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // symbols ::= TF 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("symbols",25, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // aritmetica ::= expresion MAS expresion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		RESULT=a+"+"+b;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("aritmetica",23, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // aritmetica ::= expresion MENOS expresion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		RESULT=a+"-"+b;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("aritmetica",23, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // aritmetica ::= expresion POR expresion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		RESULT=a+"*"+b;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("aritmetica",23, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // aritmetica ::= expresion DIVIDIDO expresion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		RESULT=a+"/"+b;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("aritmetica",23, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // aritmetica ::= DECIMAL 
            {
              String RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String dec = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		RESULT=dec;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("aritmetica",23, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // aritmetica ::= ENTERO 
            {
              String RESULT =null;
		int enleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int enright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String en = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		RESULT=en;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("aritmetica",23, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // logica ::= expresion MAYOR expresion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		RESULT=a+b+c;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("logica",24, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // logica ::= expresion MENOR expresion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		RESULT=a+b+c;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("logica",24, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // logica ::= expresion MAYORIGUAL expresion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		RESULT=a+b+c;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("logica",24, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // logica ::= expresion MENORIGUAL expresion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		RESULT=a+b+c;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("logica",24, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // logica ::= expresion EQUALS expresion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		RESULT=a+b+c;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("logica",24, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // logica ::= expresion NOTEQUALS expresion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		RESULT=a+b+c;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("logica",24, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // logica ::= expresion AND expresion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		RESULT=a+" and "+c;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("logica",24, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // logica ::= expresion OR expresion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		RESULT=a+" or "+c;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("logica",24, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // uno ::= MENOS expresion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		RESULT=a+b;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("uno",26, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // uno ::= NOT expresion 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		RESULT="not "+b;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("uno",26, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // globales ::= VOID DEFGLOB PARIZQ PARDER BRAIZQ listaglobales BRADER 
            {
              Object RESULT =null;

              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("globales",3, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // listaglobales ::= listaglobales variablesglobales 
            {
              Object RESULT =null;

              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("listaglobales",7, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // listaglobales ::= variablesglobales 
            {
              Object RESULT =null;

              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("listaglobales",7, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // variablesglobales ::= STRING IDENT IGUAL CADENA PTOCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).value;
		t_variables.put(a,b.replace("\"",""));
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("variablesglobales",8, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // variablesglobales ::= DOUBLE IDENT IGUAL DECIMAL PTOCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).value;
		t_variables.put(a,b);
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("variablesglobales",8, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // variablesglobales ::= DOUBLE IDENT IGUAL variablesjson PTOCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).value;
		t_variables.put(a,b);
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("variablesglobales",8, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // variablesglobales ::= STRING IDENT IGUAL variablesjson PTOCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).value;
		t_variables.put(a,b);
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("variablesglobales",8, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // variablesjson ::= DOLAR BRAIZQ NEWVAL COMA CADENA COMA CADENA BRADER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).value;
		
Object var=Variable.BuscarVariable(a.replace("\"",""),b.replace("\"",""));
RESULT=var;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("variablesjson",10, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // barras ::= VOID GRAFBAR PARIZQ PARDER BRAIZQ listabarras BRADER 
            {
              Object RESULT =null;

              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("barras",4, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // listabarras ::= listabarras instruccionesbarras 
            {
              Object RESULT =null;

              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("listabarras",11, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // listabarras ::= instruccionesbarras 
            {
              Object RESULT =null;

              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("listabarras",11, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // instruccionesbarras ::= STRING TITULO IGUAL IDENT PTOCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).value;
		Titulo_Barras=t_variables.get(a).toString();
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("instruccionesbarras",12, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // instruccionesbarras ::= STRING TITULO IGUAL CADENA PTOCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).value;
		Titulo_Barras=a.replace("\"","");
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("instruccionesbarras",12, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // instruccionesbarras ::= STRING TITULO IGUAL variablesjson PTOCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).value;
		Titulo_Barras=a.toString();
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("instruccionesbarras",12, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // instruccionesbarras ::= STRING TITULOX IGUAL IDENT PTOCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).value;
		TituloEjeX_Barras=t_variables.get(a).toString();
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("instruccionesbarras",12, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // instruccionesbarras ::= STRING TITULOX IGUAL CADENA PTOCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).value;
		TituloEjeX_Barras=a.replace("\"","");
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("instruccionesbarras",12, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // instruccionesbarras ::= STRING TITULOX IGUAL variablesjson PTOCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).value;
		TituloEjeX_Barras=a.toString();
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("instruccionesbarras",12, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // instruccionesbarras ::= STRING TITULOY IGUAL IDENT PTOCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).value;
		TituloEjeY_Barras=t_variables.get(a).toString();
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("instruccionesbarras",12, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // instruccionesbarras ::= STRING TITULOY IGUAL CADENA PTOCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).value;
		TituloEjeY_Barras=a.replace("\"","");
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("instruccionesbarras",12, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // instruccionesbarras ::= STRING TITULOY IGUAL variablesjson PTOCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).value;
		TituloEjeY_Barras=a.toString();
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("instruccionesbarras",12, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // instruccionesbarras ::= STRING LLAIZQ LLADER EJEX IGUAL BRAIZQ listastring BRADER PTOCOMA 
            {
              Object RESULT =null;

              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("instruccionesbarras",12, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // instruccionesbarras ::= DOUBLE LLAIZQ LLADER VALORES IGUAL BRAIZQ listadouble BRADER PTOCOMA 
            {
              Object RESULT =null;

              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("instruccionesbarras",12, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // listastring ::= listastring COMA arreglostring 
            {
              Object RESULT =null;

              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("listastring",13, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // listastring ::= arreglostring 
            {
              Object RESULT =null;

              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("listastring",13, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // arreglostring ::= CADENA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		EjeX.add(a.replace("\"",""));
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("arreglostring",14, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // arreglostring ::= IDENT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		EjeX.add(t_variables.get(a).toString());
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("arreglostring",14, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // arreglostring ::= variablesjson 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		EjeX.add(a.toString());
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("arreglostring",14, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // listadouble ::= listadouble COMA arreglodouble 
            {
              Object RESULT =null;

              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("listadouble",15, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // listadouble ::= arreglodouble 
            {
              Object RESULT =null;

              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("listadouble",15, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // arreglodouble ::= DECIMAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		Valores.add(Double.parseDouble(a));
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("arreglodouble",16, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // arreglodouble ::= IDENT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		String numero=t_variables.get(a).toString();
                          Valores.add(Double.parseDouble(numero));
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("arreglodouble",16, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // arreglodouble ::= variablesjson 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		String numero=a.toString();
                                  Valores.add(Double.parseDouble(numero));
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("arreglodouble",16, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // arreglodouble ::= ENTERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		Valores.add(Double.parseDouble(a));
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("arreglodouble",16, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // pie ::= VOID GRAFPI PARIZQ PARDER BRAIZQ listapie BRADER 
            {
              Object RESULT =null;

              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("pie",5, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // listapie ::= listapie instruccionespie 
            {
              Object RESULT =null;

              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("listapie",17, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // listapie ::= instruccionespie 
            {
              Object RESULT =null;

              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("listapie",17, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // instruccionespie ::= STRING TITULO IGUAL IDENT PTOCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).value;
		Titulo_Pie=t_variables.get(a).toString();
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("instruccionespie",18, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // instruccionespie ::= STRING TITULO IGUAL CADENA PTOCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).value;
		Titulo_Pie=a.replace("\"","");
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("instruccionespie",18, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // instruccionespie ::= STRING TITULO IGUAL variablesjson PTOCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).value;
		Titulo_Pie=a.toString();
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("instruccionespie",18, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // instruccionespie ::= STRING LLAIZQ LLADER EJEX IGUAL BRAIZQ listastringpie BRADER PTOCOMA 
            {
              Object RESULT =null;

              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("instruccionespie",18, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // instruccionespie ::= DOUBLE LLAIZQ LLADER VALORES IGUAL BRAIZQ listadoublepie BRADER PTOCOMA 
            {
              Object RESULT =null;

              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("instruccionespie",18, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // listastringpie ::= listastringpie COMA arreglostringpie 
            {
              Object RESULT =null;

              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("listastringpie",19, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // listastringpie ::= arreglostringpie 
            {
              Object RESULT =null;

              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("listastringpie",19, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // listadoublepie ::= listadoublepie COMA arreglodoublepie 
            {
              Object RESULT =null;

              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("listadoublepie",21, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // listadoublepie ::= arreglodoublepie 
            {
              Object RESULT =null;

              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("listadoublepie",21, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // arreglostringpie ::= CADENA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		EjeX_Pie.add(a.replace("\"",""));
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("arreglostringpie",20, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // arreglostringpie ::= IDENT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		EjeX_Pie.add(t_variables.get(a).toString());
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("arreglostringpie",20, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // arreglostringpie ::= variablesjson 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		EjeX_Pie.add(a.toString());
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("arreglostringpie",20, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // arreglodoublepie ::= DECIMAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		Valores_Pie.add(Double.parseDouble(a));
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("arreglodoublepie",22, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // arreglodoublepie ::= IDENT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		String numero=t_variables.get(a).toString();
                          Valores_Pie.add(Double.parseDouble(numero));
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("arreglodoublepie",22, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // arreglodoublepie ::= variablesjson 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		String numero=a.toString();
                                  Valores_Pie.add(Double.parseDouble(numero));
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("arreglodoublepie",22, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // arreglodoublepie ::= ENTERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		Valores_Pie.add(Double.parseDouble(a));
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("arreglodoublepie",22, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SintacticoStatPy$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SintacticoStatPy$do_action(
    int                        CUP$SintacticoStatPy$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoStatPy$parser,
    java.util.Stack            CUP$SintacticoStatPy$stack,
    int                        CUP$SintacticoStatPy$top)
    throws java.lang.Exception
    {
              return CUP$SintacticoStatPy$do_action_part00000000(
                               CUP$SintacticoStatPy$act_num,
                               CUP$SintacticoStatPy$parser,
                               CUP$SintacticoStatPy$stack,
                               CUP$SintacticoStatPy$top);
    }
}

}
