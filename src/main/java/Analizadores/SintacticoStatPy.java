
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores;

import java_cup.runtime.*;
import java.util.HashMap;
import Estructuras.Variable;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SintacticoStatPy extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public SintacticoStatPy() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SintacticoStatPy(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticoStatPy(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\176\000\002\002\004\000\002\002\011\000\002\007" +
    "\004\000\002\007\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\037\003\000" +
    "\002\037\003\000\002\037\003\000\002\037\003\000\002" +
    "\037\003\000\002\037\003\000\002\037\003\000\002\037" +
    "\004\000\002\037\004\000\002\037\004\000\002\037\004" +
    "\000\002\037\004\000\002\037\004\000\002\037\004\000" +
    "\002\036\011\000\002\036\012\000\002\036\006\000\002" +
    "\040\011\000\002\041\024\000\002\041\024\000\002\041" +
    "\023\000\002\041\023\000\002\042\013\000\002\043\011" +
    "\000\002\045\004\000\002\045\003\000\002\046\006\000" +
    "\002\046\005\000\002\044\004\000\002\044\003\000\002" +
    "\034\007\000\002\034\007\000\002\034\007\000\002\034" +
    "\007\000\002\034\007\000\002\034\006\000\002\034\006" +
    "\000\002\034\004\000\002\034\004\000\002\035\011\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\012\005\000\002\032\003\000\002\032" +
    "\003\000\002\032\003\000\002\032\003\000\002\032\003" +
    "\000\002\030\005\000\002\030\005\000\002\030\005\000" +
    "\002\030\005\000\002\030\003\000\002\030\003\000\002" +
    "\031\005\000\002\031\005\000\002\031\005\000\002\031" +
    "\005\000\002\031\005\000\002\031\005\000\002\031\005" +
    "\000\002\031\005\000\002\033\004\000\002\033\004\000" +
    "\002\004\011\000\002\010\004\000\002\010\003\000\002" +
    "\011\007\000\002\011\007\000\002\011\007\000\002\011" +
    "\007\000\002\013\012\000\002\005\011\000\002\014\004" +
    "\000\002\014\003\000\002\015\007\000\002\015\007\000" +
    "\002\015\007\000\002\015\007\000\002\015\007\000\002" +
    "\015\007\000\002\015\007\000\002\015\007\000\002\015" +
    "\007\000\002\015\013\000\002\015\013\000\002\016\005" +
    "\000\002\016\003\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\020\005\000\002\020\003\000\002" +
    "\021\003\000\002\021\003\000\002\021\003\000\002\021" +
    "\003\000\002\006\011\000\002\022\004\000\002\022\003" +
    "\000\002\023\007\000\002\023\007\000\002\023\007\000" +
    "\002\023\013\000\002\023\013\000\002\024\005\000\002" +
    "\024\003\000\002\026\005\000\002\026\003\000\002\025" +
    "\003\000\002\025\003\000\002\025\003\000\002\027\003" +
    "\000\002\027\003\000\002\027\003\000\002\027\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u016a\000\004\010\004\001\002\000\004\011\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\013\010\001\002\000\004\012\011\001\002\000" +
    "\004\004\012\001\002\000\042\003\041\010\046\014\015" +
    "\022\017\023\047\024\032\040\025\063\035\066\043\067" +
    "\026\070\014\071\045\072\022\073\040\074\030\076\024" +
    "\001\002\000\044\003\ufffe\005\ufffe\010\ufffe\014\ufffe\022" +
    "\ufffe\023\ufffe\024\ufffe\040\ufffe\063\ufffe\066\ufffe\067\ufffe" +
    "\070\ufffe\071\ufffe\072\ufffe\073\ufffe\074\ufffe\076\ufffe\001" +
    "\002\000\006\004\u0163\067\u0164\001\002\000\006\015\u015e" +
    "\044\u015d\001\002\000\050\003\ufff8\005\ufff8\010\ufff8\014" +
    "\ufff8\022\ufff8\023\ufff8\024\ufff8\040\ufff8\063\ufff8\066\ufff8" +
    "\067\ufff8\070\ufff8\071\ufff8\072\ufff8\073\ufff8\074\ufff8\075" +
    "\ufff8\076\ufff8\077\ufff8\001\002\000\004\014\u0159\001\002" +
    "\000\044\003\ufffd\005\ufffd\010\ufffd\014\ufffd\022\ufffd\023" +
    "\ufffd\024\ufffd\040\ufffd\063\ufffd\066\ufffd\067\ufffd\070\ufffd" +
    "\071\ufffd\072\ufffd\073\ufffd\074\ufffd\076\ufffd\001\002\000" +
    "\044\003\ufffc\005\ufffc\010\ufffc\014\ufffc\022\ufffc\023\ufffc" +
    "\024\ufffc\040\ufffc\063\ufffc\066\ufffc\067\ufffc\070\ufffc\071" +
    "\ufffc\072\ufffc\073\ufffc\074\ufffc\076\ufffc\001\002\000\004" +
    "\013\u0153\001\002\000\050\003\ufff4\005\ufff4\010\ufff4\014" +
    "\ufff4\022\ufff4\023\ufff4\024\ufff4\040\ufff4\063\ufff4\066\ufff4" +
    "\067\ufff4\070\ufff4\071\ufff4\072\ufff4\073\ufff4\074\ufff4\075" +
    "\ufff4\076\ufff4\077\ufff4\001\002\000\004\013\u0144\001\002" +
    "\000\004\042\u013e\001\002\000\004\013\u0138\001\002\000" +
    "\044\003\ufffb\005\ufffb\010\ufffb\014\ufffb\022\ufffb\023\ufffb" +
    "\024\ufffb\040\ufffb\063\ufffb\066\ufffb\067\ufffb\070\ufffb\071" +
    "\ufffb\072\ufffb\073\ufffb\074\ufffb\076\ufffb\001\002\000\004" +
    "\004\u0130\001\002\000\050\003\ufff9\005\ufff9\010\ufff9\014" +
    "\ufff9\022\ufff9\023\ufff9\024\ufff9\040\ufff9\063\ufff9\066\ufff9" +
    "\067\ufff9\070\ufff9\071\ufff9\072\ufff9\073\ufff9\074\ufff9\075" +
    "\ufff9\076\ufff9\077\ufff9\001\002\000\004\014\u012c\001\002" +
    "\000\044\003\041\005\u012b\010\046\014\015\022\017\023" +
    "\047\024\032\040\025\063\035\066\043\067\026\070\014" +
    "\071\045\072\022\073\040\074\030\076\024\001\002\000" +
    "\044\003\ufffa\005\ufffa\010\ufffa\014\ufffa\022\ufffa\023\ufffa" +
    "\024\ufffa\040\ufffa\063\ufffa\066\ufffa\067\ufffa\070\ufffa\071" +
    "\ufffa\072\ufffa\073\ufffa\074\ufffa\076\ufffa\001\002\000\004" +
    "\014\u0126\001\002\000\050\003\ufff7\005\ufff7\010\ufff7\014" +
    "\ufff7\022\ufff7\023\ufff7\024\ufff7\040\ufff7\063\ufff7\066\ufff7" +
    "\067\ufff7\070\ufff7\071\ufff7\072\ufff7\073\ufff7\074\ufff7\075" +
    "\ufff7\076\ufff7\077\ufff7\001\002\000\050\003\ufff6\005\ufff6" +
    "\010\ufff6\014\ufff6\022\ufff6\023\ufff6\024\ufff6\040\ufff6\063" +
    "\ufff6\066\ufff6\067\ufff6\070\ufff6\071\ufff6\072\ufff6\073\ufff6" +
    "\074\ufff6\075\ufff6\076\ufff6\077\ufff6\001\002\000\004\021" +
    "\u0125\001\002\000\042\003\u0121\014\015\021\u0122\022\017" +
    "\023\047\024\032\040\025\063\035\066\043\067\026\070" +
    "\014\071\045\072\022\073\040\074\030\076\024\001\002" +
    "\000\050\003\ufff5\005\ufff5\010\ufff5\014\ufff5\022\ufff5\023" +
    "\ufff5\024\ufff5\040\ufff5\063\ufff5\066\ufff5\067\ufff5\070\ufff5" +
    "\071\ufff5\072\ufff5\073\ufff5\074\ufff5\075\ufff5\076\ufff5\077" +
    "\ufff5\001\002\000\004\014\u0118\001\002\000\050\003\ufff3" +
    "\005\ufff3\010\ufff3\014\ufff3\022\ufff3\023\ufff3\024\ufff3\040" +
    "\ufff3\063\ufff3\066\ufff3\067\ufff3\070\ufff3\071\ufff3\072\ufff3" +
    "\073\ufff3\074\ufff3\075\ufff3\076\ufff3\077\ufff3\001\002\000" +
    "\004\013\342\001\002\000\010\016\127\017\126\020\130" +
    "\001\002\000\004\014\050\001\002\000\004\015\051\001" +
    "\002\000\026\006\052\007\053\013\064\014\054\025\061" +
    "\045\056\056\067\062\070\064\060\065\063\001\002\000" +
    "\040\012\uffcb\021\uffcb\043\uffcb\044\uffcb\045\uffcb\046\uffcb" +
    "\047\uffcb\050\uffcb\051\uffcb\052\uffcb\053\uffcb\054\uffcb\055" +
    "\uffcb\057\uffcb\060\uffcb\001\002\000\040\012\uffc3\021\uffc3" +
    "\043\uffc3\044\uffc3\045\uffc3\046\uffc3\047\uffc3\050\uffc3\051" +
    "\uffc3\052\uffc3\053\uffc3\054\uffc3\055\uffc3\057\uffc3\060\uffc3" +
    "\001\002\000\040\012\uffcc\021\uffcc\043\uffcc\044\uffcc\045" +
    "\uffcc\046\uffcc\047\uffcc\050\uffcc\051\uffcc\052\uffcc\053\uffcc" +
    "\054\uffcc\055\uffcc\057\uffcc\060\uffcc\001\002\000\040\012" +
    "\uffd1\021\uffd1\043\uffd1\044\uffd1\045\uffd1\046\uffd1\047\uffd1" +
    "\050\uffd1\051\uffd1\052\uffd1\053\uffd1\054\uffd1\055\uffd1\057" +
    "\uffd1\060\uffd1\001\002\000\026\006\052\007\053\013\064" +
    "\014\054\025\061\045\056\056\067\062\070\064\060\065" +
    "\063\001\002\000\040\012\uffd0\021\uffd0\043\uffd0\044\uffd0" +
    "\045\uffd0\046\uffd0\047\uffd0\050\uffd0\051\uffd0\052\uffd0\053" +
    "\uffd0\054\uffd0\055\uffd0\057\uffd0\060\uffd0\001\002\000\040" +
    "\012\uffc9\021\uffc9\043\uffc9\044\uffc9\045\uffc9\046\uffc9\047" +
    "\uffc9\050\uffc9\051\uffc9\052\uffc9\053\uffc9\054\uffc9\055\uffc9" +
    "\057\uffc9\060\uffc9\001\002\000\040\012\uffc2\021\uffc2\043" +
    "\uffc2\044\uffc2\045\uffc2\046\uffc2\047\uffc2\050\uffc2\051\uffc2" +
    "\052\uffc2\053\uffc2\054\uffc2\055\uffc2\057\uffc2\060\uffc2\001" +
    "\002\000\034\021\124\044\102\045\074\046\077\047\100" +
    "\050\103\051\076\052\101\053\073\054\104\055\075\057" +
    "\072\060\105\001\002\000\040\012\uffc8\021\uffc8\043\uffc8" +
    "\044\uffc8\045\uffc8\046\uffc8\047\uffc8\050\uffc8\051\uffc8\052" +
    "\uffc8\053\uffc8\054\uffc8\055\uffc8\057\uffc8\060\uffc8\001\002" +
    "\000\026\006\052\007\053\013\064\014\054\025\061\045" +
    "\056\056\067\062\070\064\060\065\063\001\002\000\040" +
    "\012\uffcf\021\uffcf\043\uffcf\044\uffcf\045\uffcf\046\uffcf\047" +
    "\uffcf\050\uffcf\051\uffcf\052\uffcf\053\uffcf\054\uffcf\055\uffcf" +
    "\057\uffcf\060\uffcf\001\002\000\040\012\uffce\021\uffce\043" +
    "\uffce\044\uffce\045\uffce\046\uffce\047\uffce\050\uffce\051\uffce" +
    "\052\uffce\053\uffce\054\uffce\055\uffce\057\uffce\060\uffce\001" +
    "\002\000\026\006\052\007\053\013\064\014\054\025\061" +
    "\045\056\056\067\062\070\064\060\065\063\001\002\000" +
    "\040\012\uffca\021\uffca\043\uffca\044\uffca\045\uffca\046\uffca" +
    "\047\uffca\050\uffca\051\uffca\052\uffca\053\uffca\054\uffca\055" +
    "\uffca\057\uffca\060\uffca\001\002\000\040\012\uffb8\021\uffb8" +
    "\043\uffb8\044\uffb8\045\uffb8\046\uffb8\047\uffb8\050\uffb8\051" +
    "\uffb8\052\uffb8\053\uffb8\054\uffb8\055\uffb8\057\uffb8\060\uffb8" +
    "\001\002\000\026\006\052\007\053\013\064\014\054\025" +
    "\061\045\056\056\067\062\070\064\060\065\063\001\002" +
    "\000\026\006\052\007\053\013\064\014\054\025\061\045" +
    "\056\056\067\062\070\064\060\065\063\001\002\000\026" +
    "\006\052\007\053\013\064\014\054\025\061\045\056\056" +
    "\067\062\070\064\060\065\063\001\002\000\026\006\052" +
    "\007\053\013\064\014\054\025\061\045\056\056\067\062" +
    "\070\064\060\065\063\001\002\000\026\006\052\007\053" +
    "\013\064\014\054\025\061\045\056\056\067\062\070\064" +
    "\060\065\063\001\002\000\026\006\052\007\053\013\064" +
    "\014\054\025\061\045\056\056\067\062\070\064\060\065" +
    "\063\001\002\000\026\006\052\007\053\013\064\014\054" +
    "\025\061\045\056\056\067\062\070\064\060\065\063\001" +
    "\002\000\026\006\052\007\053\013\064\014\054\025\061" +
    "\045\056\056\067\062\070\064\060\065\063\001\002\000" +
    "\026\006\052\007\053\013\064\014\054\025\061\045\056" +
    "\056\067\062\070\064\060\065\063\001\002\000\026\006" +
    "\052\007\053\013\064\014\054\025\061\045\056\056\067" +
    "\062\070\064\060\065\063\001\002\000\026\006\052\007" +
    "\053\013\064\014\054\025\061\045\056\056\067\062\070" +
    "\064\060\065\063\001\002\000\026\006\052\007\053\013" +
    "\064\014\054\025\061\045\056\056\067\062\070\064\060" +
    "\065\063\001\002\000\040\012\uffba\021\uffba\043\uffba\044" +
    "\102\045\074\046\077\047\100\050\uffba\051\uffba\052\uffba" +
    "\053\uffba\054\uffba\055\uffba\057\uffba\060\uffba\001\002\000" +
    "\040\012\uffbd\021\uffbd\043\uffbd\044\102\045\074\046\077" +
    "\047\100\050\uffbd\051\uffbd\052\uffbd\053\uffbd\054\uffbd\055" +
    "\uffbd\057\072\060\105\001\002\000\040\012\uffc1\021\uffc1" +
    "\043\uffc1\044\102\045\074\046\077\047\100\050\uffc1\051" +
    "\uffc1\052\uffc1\053\uffc1\054\uffc1\055\uffc1\057\072\060\105" +
    "\001\002\000\040\012\uffc7\021\uffc7\043\uffc7\044\uffc7\045" +
    "\uffc7\046\077\047\100\050\uffc7\051\uffc7\052\uffc7\053\uffc7" +
    "\054\uffc7\055\uffc7\057\uffc7\060\uffc7\001\002\000\040\012" +
    "\uffbf\021\uffbf\043\uffbf\044\102\045\074\046\077\047\100" +
    "\050\uffbf\051\uffbf\052\uffbf\053\uffbf\054\uffbf\055\uffbf\057" +
    "\072\060\105\001\002\000\040\012\uffc4\021\uffc4\043\uffc4" +
    "\044\uffc4\045\uffc4\046\uffc4\047\uffc4\050\uffc4\051\uffc4\052" +
    "\uffc4\053\uffc4\054\uffc4\055\uffc4\057\uffc4\060\uffc4\001\002" +
    "\000\040\012\uffc5\021\uffc5\043\uffc5\044\uffc5\045\uffc5\046" +
    "\uffc5\047\uffc5\050\uffc5\051\uffc5\052\uffc5\053\uffc5\054\uffc5" +
    "\055\uffc5\057\uffc5\060\uffc5\001\002\000\040\012\uffc0\021" +
    "\uffc0\043\uffc0\044\102\045\074\046\077\047\100\050\uffc0" +
    "\051\uffc0\052\uffc0\053\uffc0\054\uffc0\055\uffc0\057\072\060" +
    "\105\001\002\000\040\012\uffbc\021\uffbc\043\uffbc\044\102" +
    "\045\074\046\077\047\100\050\uffbc\051\uffbc\052\uffbc\053" +
    "\uffbc\054\uffbc\055\uffbc\057\072\060\105\001\002\000\040" +
    "\012\uffc6\021\uffc6\043\uffc6\044\uffc6\045\uffc6\046\077\047" +
    "\100\050\uffc6\051\uffc6\052\uffc6\053\uffc6\054\uffc6\055\uffc6" +
    "\057\uffc6\060\uffc6\001\002\000\040\012\uffbe\021\uffbe\043" +
    "\uffbe\044\102\045\074\046\077\047\100\050\uffbe\051\uffbe" +
    "\052\uffbe\053\uffbe\054\uffbe\055\uffbe\057\072\060\105\001" +
    "\002\000\040\012\uffbb\021\uffbb\043\uffbb\044\102\045\074" +
    "\046\077\047\100\050\uffbb\051\uffbb\052\uffbb\053\uffbb\054" +
    "\uffbb\055\uffbb\057\uffbb\060\uffbb\001\002\000\034\012\123" +
    "\044\102\045\074\046\077\047\100\050\103\051\076\052" +
    "\101\053\073\054\104\055\075\057\072\060\105\001\002" +
    "\000\040\012\uffcd\021\uffcd\043\uffcd\044\uffcd\045\uffcd\046" +
    "\uffcd\047\uffcd\050\uffcd\051\uffcd\052\uffcd\053\uffcd\054\uffcd" +
    "\055\uffcd\057\uffcd\060\uffcd\001\002\000\050\003\uffda\005" +
    "\uffda\010\uffda\014\uffda\022\uffda\023\uffda\024\uffda\040\uffda" +
    "\063\uffda\066\uffda\067\uffda\070\uffda\071\uffda\072\uffda\073" +
    "\uffda\074\uffda\075\uffda\076\uffda\077\uffda\001\002\000\040" +
    "\012\uffb9\021\uffb9\043\uffb9\044\uffb9\045\uffb9\046\uffb9\047" +
    "\uffb9\050\uffb9\051\uffb9\052\uffb9\053\uffb9\054\uffb9\055\uffb9" +
    "\057\uffb9\060\uffb9\001\002\000\004\013\244\001\002\000" +
    "\004\013\217\001\002\000\004\013\131\001\002\000\004" +
    "\012\132\001\002\000\004\004\133\001\002\000\006\023" +
    "\134\024\136\001\002\000\004\031\200\001\002\000\010" +
    "\005\uff94\023\uff94\024\uff94\001\002\000\006\031\143\033" +
    "\142\001\002\000\010\005\141\023\134\024\136\001\002" +
    "\000\010\005\uff95\023\uff95\024\uff95\001\002\000\044\003" +
    "\uff96\005\uff96\010\uff96\014\uff96\022\uff96\023\uff96\024\uff96" +
    "\040\uff96\063\uff96\066\uff96\067\uff96\070\uff96\071\uff96\072" +
    "\uff96\073\uff96\074\uff96\076\uff96\001\002\000\004\015\171" +
    "\001\002\000\004\032\144\001\002\000\004\034\145\001" +
    "\002\000\004\015\146\001\002\000\004\004\147\001\002" +
    "\000\010\006\155\014\152\027\151\001\002\000\006\005" +
    "\uff88\030\uff88\001\002\000\004\004\162\001\002\000\006" +
    "\005\uff89\030\uff89\001\002\000\006\005\uff8d\030\uff8d\001" +
    "\002\000\006\005\157\030\156\001\002\000\006\005\uff8a" +
    "\030\uff8a\001\002\000\010\006\155\014\152\027\151\001" +
    "\002\000\004\021\160\001\002\000\010\005\uff90\023\uff90" +
    "\024\uff90\001\002\000\006\005\uff8e\030\uff8e\001\002\000" +
    "\004\026\163\001\002\000\004\030\164\001\002\000\004" +
    "\006\165\001\002\000\004\030\166\001\002\000\004\006" +
    "\167\001\002\000\004\005\170\001\002\000\010\005\uffb0" +
    "\021\uffb0\030\uffb0\001\002\000\010\006\174\014\173\027" +
    "\151\001\002\000\004\021\177\001\002\000\004\021\176" +
    "\001\002\000\004\021\175\001\002\000\010\005\uff92\023" +
    "\uff92\024\uff92\001\002\000\010\005\uff93\023\uff93\024\uff93" +
    "\001\002\000\010\005\uff91\023\uff91\024\uff91\001\002\000" +
    "\004\032\201\001\002\000\004\035\202\001\002\000\004" +
    "\015\203\001\002\000\004\004\204\001\002\000\012\007" +
    "\210\014\207\025\212\027\151\001\002\000\006\005\uff85" +
    "\030\uff85\001\002\000\006\005\214\030\213\001\002\000" +
    "\006\005\uff86\030\uff86\001\002\000\006\005\uff87\030\uff87" +
    "\001\002\000\006\005\uff8b\030\uff8b\001\002\000\006\005" +
    "\uff84\030\uff84\001\002\000\012\007\210\014\207\025\212" +
    "\027\151\001\002\000\004\021\215\001\002\000\010\005" +
    "\uff8f\023\uff8f\024\uff8f\001\002\000\006\005\uff8c\030\uff8c" +
    "\001\002\000\004\012\220\001\002\000\004\004\221\001" +
    "\002\000\006\023\223\024\222\001\002\000\004\014\236" +
    "\001\002\000\004\014\230\001\002\000\010\005\uffb5\023" +
    "\uffb5\024\uffb5\001\002\000\010\005\226\023\223\024\222" +
    "\001\002\000\044\003\uffb7\005\uffb7\010\uffb7\014\uffb7\022" +
    "\uffb7\023\uffb7\024\uffb7\040\uffb7\063\uffb7\066\uffb7\067\uffb7" +
    "\070\uffb7\071\uffb7\072\uffb7\073\uffb7\074\uffb7\076\uffb7\001" +
    "\002\000\010\005\uffb6\023\uffb6\024\uffb6\001\002\000\004" +
    "\015\231\001\002\000\006\007\233\027\151\001\002\000" +
    "\004\021\235\001\002\000\004\021\234\001\002\000\010" +
    "\005\uffb3\023\uffb3\024\uffb3\001\002\000\010\005\uffb2\023" +
    "\uffb2\024\uffb2\001\002\000\004\015\237\001\002\000\006" +
    "\006\241\027\151\001\002\000\004\021\243\001\002\000" +
    "\004\021\242\001\002\000\010\005\uffb4\023\uffb4\024\uffb4" +
    "\001\002\000\010\005\uffb1\023\uffb1\024\uffb1\001\002\000" +
    "\004\012\245\001\002\000\004\004\246\001\002\000\006" +
    "\023\247\024\250\001\002\000\004\031\323\001\002\000" +
    "\012\031\260\033\255\036\256\037\257\001\002\000\010" +
    "\005\uffad\023\uffad\024\uffad\001\002\000\010\005\253\023" +
    "\247\024\250\001\002\000\044\003\uffaf\005\uffaf\010\uffaf" +
    "\014\uffaf\022\uffaf\023\uffaf\024\uffaf\040\uffaf\063\uffaf\066" +
    "\uffaf\067\uffaf\070\uffaf\071\uffaf\072\uffaf\073\uffaf\074\uffaf" +
    "\076\uffaf\001\002\000\010\005\uffae\023\uffae\024\uffae\001" +
    "\002\000\004\015\314\001\002\000\004\015\305\001\002" +
    "\000\004\015\276\001\002\000\004\032\261\001\002\000" +
    "\004\034\262\001\002\000\004\015\263\001\002\000\004" +
    "\004\264\001\002\000\010\006\271\014\266\027\151\001" +
    "\002\000\006\005\uff9d\030\uff9d\001\002\000\006\005\uff9e" +
    "\030\uff9e\001\002\000\006\005\273\030\272\001\002\000" +
    "\006\005\uffa0\030\uffa0\001\002\000\006\005\uff9f\030\uff9f" +
    "\001\002\000\010\006\271\014\266\027\151\001\002\000" +
    "\004\021\274\001\002\000\010\005\uffa3\023\uffa3\024\uffa3" +
    "\001\002\000\006\005\uffa1\030\uffa1\001\002\000\010\006" +
    "\301\014\300\027\151\001\002\000\004\021\304\001\002" +
    "\000\004\021\303\001\002\000\004\021\302\001\002\000" +
    "\010\005\uffa8\023\uffa8\024\uffa8\001\002\000\010\005\uffa9" +
    "\023\uffa9\024\uffa9\001\002\000\010\005\uffa7\023\uffa7\024" +
    "\uffa7\001\002\000\010\006\310\014\307\027\151\001\002" +
    "\000\004\021\313\001\002\000\004\021\312\001\002\000" +
    "\004\021\311\001\002\000\010\005\uffa5\023\uffa5\024\uffa5" +
    "\001\002\000\010\005\uffa6\023\uffa6\024\uffa6\001\002\000" +
    "\010\005\uffa4\023\uffa4\024\uffa4\001\002\000\010\006\317" +
    "\014\316\027\151\001\002\000\004\021\322\001\002\000" +
    "\004\021\321\001\002\000\004\021\320\001\002\000\010" +
    "\005\uffab\023\uffab\024\uffab\001\002\000\010\005\uffac\023" +
    "\uffac\024\uffac\001\002\000\010\005\uffaa\023\uffaa\024\uffaa" +
    "\001\002\000\004\032\324\001\002\000\004\035\325\001" +
    "\002\000\004\015\326\001\002\000\004\004\327\001\002" +
    "\000\012\007\333\014\332\025\335\027\151\001\002\000" +
    "\006\005\uff98\030\uff98\001\002\000\006\005\337\030\336" +
    "\001\002\000\006\005\uff99\030\uff99\001\002\000\006\005" +
    "\uff9a\030\uff9a\001\002\000\006\005\uff9b\030\uff9b\001\002" +
    "\000\006\005\uff97\030\uff97\001\002\000\012\007\333\014" +
    "\332\025\335\027\151\001\002\000\004\021\340\001\002" +
    "\000\010\005\uffa2\023\uffa2\024\uffa2\001\002\000\006\005" +
    "\uff9c\030\uff9c\001\002\000\006\014\343\022\344\001\002" +
    "\000\004\015\u0100\001\002\000\004\014\345\001\002\000" +
    "\004\015\346\001\002\000\026\006\052\007\053\013\064" +
    "\014\054\025\061\045\056\056\067\062\070\064\060\065" +
    "\063\001\002\000\034\021\350\044\102\045\074\046\077" +
    "\047\100\050\103\051\076\052\101\053\073\054\104\055" +
    "\075\057\072\060\105\001\002\000\004\014\351\001\002" +
    "\000\006\051\353\053\352\001\002\000\026\006\052\007" +
    "\053\013\064\014\054\025\061\045\056\056\067\062\070" +
    "\064\060\065\063\001\002\000\026\006\052\007\053\013" +
    "\064\014\054\025\061\045\056\056\067\062\070\064\060" +
    "\065\063\001\002\000\034\021\355\044\102\045\074\046" +
    "\077\047\100\050\103\051\076\052\101\053\073\054\104" +
    "\055\075\057\072\060\105\001\002\000\004\014\356\001" +
    "\002\000\004\044\357\001\002\000\004\044\360\001\002" +
    "\000\004\012\361\001\002\000\004\004\362\001\002\000" +
    "\040\003\041\014\015\022\017\023\047\024\032\040\025" +
    "\063\035\066\043\067\026\070\014\071\045\072\022\073" +
    "\040\074\030\076\024\001\002\000\046\003\uffdc\005\uffdc" +
    "\014\uffdc\022\uffdc\023\uffdc\024\uffdc\040\uffdc\063\uffdc\066" +
    "\uffdc\067\uffdc\070\uffdc\071\uffdc\072\uffdc\073\uffdc\074\uffdc" +
    "\075\uffdc\076\uffdc\077\uffdc\001\002\000\042\003\041\005" +
    "\365\014\015\022\017\023\047\024\032\040\025\063\035" +
    "\066\043\067\026\070\014\071\045\072\022\073\040\074" +
    "\030\076\024\001\002\000\050\003\uffe7\005\uffe7\010\uffe7" +
    "\014\uffe7\022\uffe7\023\uffe7\024\uffe7\040\uffe7\063\uffe7\066" +
    "\uffe7\067\uffe7\070\uffe7\071\uffe7\072\uffe7\073\uffe7\074\uffe7" +
    "\075\uffe7\076\uffe7\077\uffe7\001\002\000\046\003\uffdd\005" +
    "\uffdd\014\uffdd\022\uffdd\023\uffdd\024\uffdd\040\uffdd\063\uffdd" +
    "\066\uffdd\067\uffdd\070\uffdd\071\uffdd\072\uffdd\073\uffdd\074" +
    "\uffdd\075\uffdd\076\uffdd\077\uffdd\001\002\000\034\021\370" +
    "\044\102\045\074\046\077\047\100\050\103\051\076\052" +
    "\101\053\073\054\104\055\075\057\072\060\105\001\002" +
    "\000\004\014\371\001\002\000\004\044\372\001\002\000" +
    "\004\044\373\001\002\000\004\012\374\001\002\000\004" +
    "\004\375\001\002\000\040\003\041\014\015\022\017\023" +
    "\047\024\032\040\025\063\035\066\043\067\026\070\014" +
    "\071\045\072\022\073\040\074\030\076\024\001\002\000" +
    "\042\003\041\005\377\014\015\022\017\023\047\024\032" +
    "\040\025\063\035\066\043\067\026\070\014\071\045\072" +
    "\022\073\040\074\030\076\024\001\002\000\050\003\uffe6" +
    "\005\uffe6\010\uffe6\014\uffe6\022\uffe6\023\uffe6\024\uffe6\040" +
    "\uffe6\063\uffe6\066\uffe6\067\uffe6\070\uffe6\071\uffe6\072\uffe6" +
    "\073\uffe6\074\uffe6\075\uffe6\076\uffe6\077\uffe6\001\002\000" +
    "\026\006\052\007\053\013\064\014\054\025\061\045\056" +
    "\056\067\062\070\064\060\065\063\001\002\000\034\021" +
    "\u0102\044\102\045\074\046\077\047\100\050\103\051\076" +
    "\052\101\053\073\054\104\055\075\057\072\060\105\001" +
    "\002\000\004\014\u0103\001\002\000\006\051\u0105\053\u0104" +
    "\001\002\000\026\006\052\007\053\013\064\014\054\025" +
    "\061\045\056\056\067\062\070\064\060\065\063\001\002" +
    "\000\026\006\052\007\053\013\064\014\054\025\061\045" +
    "\056\056\067\062\070\064\060\065\063\001\002\000\034" +
    "\021\u0107\044\102\045\074\046\077\047\100\050\103\051" +
    "\076\052\101\053\073\054\104\055\075\057\072\060\105" +
    "\001\002\000\004\014\u0108\001\002\000\004\044\u0109\001" +
    "\002\000\004\044\u010a\001\002\000\004\012\u010b\001\002" +
    "\000\004\004\u010c\001\002\000\040\003\041\014\015\022" +
    "\017\023\047\024\032\040\025\063\035\066\043\067\026" +
    "\070\014\071\045\072\022\073\040\074\030\076\024\001" +
    "\002\000\042\003\041\005\u010e\014\015\022\017\023\047" +
    "\024\032\040\025\063\035\066\043\067\026\070\014\071" +
    "\045\072\022\073\040\074\030\076\024\001\002\000\050" +
    "\003\uffe5\005\uffe5\010\uffe5\014\uffe5\022\uffe5\023\uffe5\024" +
    "\uffe5\040\uffe5\063\uffe5\066\uffe5\067\uffe5\070\uffe5\071\uffe5" +
    "\072\uffe5\073\uffe5\074\uffe5\075\uffe5\076\uffe5\077\uffe5\001" +
    "\002\000\034\021\u0110\044\102\045\074\046\077\047\100" +
    "\050\103\051\076\052\101\053\073\054\104\055\075\057" +
    "\072\060\105\001\002\000\004\014\u0111\001\002\000\004" +
    "\044\u0112\001\002\000\004\044\u0113\001\002\000\004\012" +
    "\u0114\001\002\000\004\004\u0115\001\002\000\040\003\041" +
    "\014\015\022\017\023\047\024\032\040\025\063\035\066" +
    "\043\067\026\070\014\071\045\072\022\073\040\074\030" +
    "\076\024\001\002\000\042\003\041\005\u0117\014\015\022" +
    "\017\023\047\024\032\040\025\063\035\066\043\067\026" +
    "\070\014\071\045\072\022\073\040\074\030\076\024\001" +
    "\002\000\050\003\uffe4\005\uffe4\010\uffe4\014\uffe4\022\uffe4" +
    "\023\uffe4\024\uffe4\040\uffe4\063\uffe4\066\uffe4\067\uffe4\070" +
    "\uffe4\071\uffe4\072\uffe4\073\uffe4\074\uffe4\075\uffe4\076\uffe4" +
    "\077\uffe4\001\002\000\004\015\u0119\001\002\000\026\006" +
    "\052\007\053\013\064\014\054\025\061\045\056\056\067" +
    "\062\070\064\060\065\063\001\002\000\034\021\u011b\044" +
    "\102\045\074\046\077\047\100\050\103\051\076\052\101" +
    "\053\073\054\104\055\075\057\072\060\105\001\002\000" +
    "\050\003\uffd7\005\uffd7\010\uffd7\014\uffd7\022\uffd7\023\uffd7" +
    "\024\uffd7\040\uffd7\063\uffd7\066\uffd7\067\uffd7\070\uffd7\071" +
    "\uffd7\072\uffd7\073\uffd7\074\uffd7\075\uffd7\076\uffd7\077\uffd7" +
    "\001\002\000\050\003\ufff1\005\ufff1\010\ufff1\014\ufff1\022" +
    "\ufff1\023\ufff1\024\ufff1\040\ufff1\063\ufff1\066\ufff1\067\ufff1" +
    "\070\ufff1\071\ufff1\072\ufff1\073\ufff1\074\ufff1\075\ufff1\076" +
    "\ufff1\077\ufff1\001\002\000\050\003\uffed\005\uffed\010\uffed" +
    "\014\uffed\022\uffed\023\uffed\024\uffed\040\uffed\063\uffed\066" +
    "\uffed\067\uffed\070\uffed\071\uffed\072\uffed\073\uffed\074\uffed" +
    "\075\uffed\076\uffed\077\uffed\001\002\000\050\003\ufff2\005" +
    "\ufff2\010\ufff2\014\ufff2\022\ufff2\023\ufff2\024\ufff2\040\ufff2" +
    "\063\ufff2\066\ufff2\067\ufff2\070\ufff2\071\ufff2\072\ufff2\073" +
    "\ufff2\074\ufff2\075\ufff2\076\ufff2\077\ufff2\001\002\000\050" +
    "\003\ufff0\005\ufff0\010\ufff0\014\ufff0\022\ufff0\023\ufff0\024" +
    "\ufff0\040\ufff0\063\ufff0\066\ufff0\067\ufff0\070\ufff0\071\ufff0" +
    "\072\ufff0\073\ufff0\074\ufff0\075\ufff0\076\ufff0\077\ufff0\001" +
    "\002\000\050\003\uffef\005\uffef\010\uffef\014\uffef\022\uffef" +
    "\023\uffef\024\uffef\040\uffef\063\uffef\066\uffef\067\uffef\070" +
    "\uffef\071\uffef\072\uffef\073\uffef\074\uffef\075\uffef\076\uffef" +
    "\077\uffef\001\002\000\004\021\u0122\001\002\000\050\003" +
    "\uffd3\005\uffd3\010\uffd3\014\uffd3\022\uffd3\023\uffd3\024\uffd3" +
    "\040\uffd3\063\uffd3\066\uffd3\067\uffd3\070\uffd3\071\uffd3\072" +
    "\uffd3\073\uffd3\074\uffd3\075\uffd3\076\uffd3\077\uffd3\001\002" +
    "\000\050\003\uffee\005\uffee\010\uffee\014\uffee\022\uffee\023" +
    "\uffee\024\uffee\040\uffee\063\uffee\066\uffee\067\uffee\070\uffee" +
    "\071\uffee\072\uffee\073\uffee\074\uffee\075\uffee\076\uffee\077" +
    "\uffee\001\002\000\050\003\uffec\005\uffec\010\uffec\014\uffec" +
    "\022\uffec\023\uffec\024\uffec\040\uffec\063\uffec\066\uffec\067" +
    "\uffec\070\uffec\071\uffec\072\uffec\073\uffec\074\uffec\075\uffec" +
    "\076\uffec\077\uffec\001\002\000\050\003\uffd4\005\uffd4\010" +
    "\uffd4\014\uffd4\022\uffd4\023\uffd4\024\uffd4\040\uffd4\063\uffd4" +
    "\066\uffd4\067\uffd4\070\uffd4\071\uffd4\072\uffd4\073\uffd4\074" +
    "\uffd4\075\uffd4\076\uffd4\077\uffd4\001\002\000\004\015\u0127" +
    "\001\002\000\026\006\052\007\053\013\064\014\054\025" +
    "\061\045\056\056\067\062\070\064\060\065\063\001\002" +
    "\000\034\021\u0129\044\102\045\074\046\077\047\100\050" +
    "\103\051\076\052\101\053\073\054\104\055\075\057\072" +
    "\060\105\001\002\000\050\003\uffd8\005\uffd8\010\uffd8\014" +
    "\uffd8\022\uffd8\023\uffd8\024\uffd8\040\uffd8\063\uffd8\066\uffd8" +
    "\067\uffd8\070\uffd8\071\uffd8\072\uffd8\073\uffd8\074\uffd8\075" +
    "\uffd8\076\uffd8\077\uffd8\001\002\000\044\003\uffff\005\uffff" +
    "\010\uffff\014\uffff\022\uffff\023\uffff\024\uffff\040\uffff\063" +
    "\uffff\066\uffff\067\uffff\070\uffff\071\uffff\072\uffff\073\uffff" +
    "\074\uffff\076\uffff\001\002\000\004\002\000\001\002\000" +
    "\004\015\u012d\001\002\000\026\006\052\007\053\013\064" +
    "\014\054\025\061\045\056\056\067\062\070\064\060\065" +
    "\063\001\002\000\034\021\u012f\044\102\045\074\046\077" +
    "\047\100\050\103\051\076\052\101\053\073\054\104\055" +
    "\075\057\072\060\105\001\002\000\050\003\uffd9\005\uffd9" +
    "\010\uffd9\014\uffd9\022\uffd9\023\uffd9\024\uffd9\040\uffd9\063" +
    "\uffd9\066\uffd9\067\uffd9\070\uffd9\071\uffd9\072\uffd9\073\uffd9" +
    "\074\uffd9\075\uffd9\076\uffd9\077\uffd9\001\002\000\040\003" +
    "\041\014\015\022\017\023\047\024\032\040\025\063\035" +
    "\066\043\067\026\070\014\071\045\072\022\073\040\074" +
    "\030\076\024\001\002\000\042\003\041\005\u0132\014\015" +
    "\022\017\023\047\024\032\040\025\063\035\066\043\067" +
    "\026\070\014\071\045\072\022\073\040\074\030\076\024" +
    "\001\002\000\004\072\u0133\001\002\000\004\013\u0134\001" +
    "\002\000\026\006\052\007\053\013\064\014\054\025\061" +
    "\045\056\056\067\062\070\064\060\065\063\001\002\000" +
    "\034\012\u0136\044\102\045\074\046\077\047\100\050\103" +
    "\051\076\052\101\053\073\054\104\055\075\057\072\060" +
    "\105\001\002\000\004\021\u0137\001\002\000\050\003\uffe3" +
    "\005\uffe3\010\uffe3\014\uffe3\022\uffe3\023\uffe3\024\uffe3\040" +
    "\uffe3\063\uffe3\066\uffe3\067\uffe3\070\uffe3\071\uffe3\072\uffe3" +
    "\073\uffe3\074\uffe3\075\uffe3\076\uffe3\077\uffe3\001\002\000" +
    "\026\006\052\007\053\013\064\014\054\025\061\045\056" +
    "\056\067\062\070\064\060\065\063\001\002\000\034\012" +
    "\u013a\044\102\045\074\046\077\047\100\050\103\051\076" +
    "\052\101\053\073\054\104\055\075\057\072\060\105\001" +
    "\002\000\004\004\u013b\001\002\000\040\003\041\014\015" +
    "\022\017\023\047\024\032\040\025\063\035\066\043\067" +
    "\026\070\014\071\045\072\022\073\040\074\030\076\024" +
    "\001\002\000\042\003\041\005\u013d\014\015\022\017\023" +
    "\047\024\032\040\025\063\035\066\043\067\026\070\014" +
    "\071\045\072\022\073\040\074\030\076\024\001\002\000" +
    "\050\003\uffeb\005\uffeb\010\uffeb\014\uffeb\022\uffeb\023\uffeb" +
    "\024\uffeb\040\uffeb\063\uffeb\066\uffeb\067\uffeb\070\uffeb\071" +
    "\uffeb\072\uffeb\073\uffeb\074\uffeb\075\uffeb\076\uffeb\077\uffeb" +
    "\001\002\000\004\041\u013f\001\002\000\004\013\u0140\001" +
    "\002\000\026\006\052\007\053\013\064\014\054\025\061" +
    "\045\056\056\067\062\070\064\060\065\063\001\002\000" +
    "\034\012\u0142\044\102\045\074\046\077\047\100\050\103" +
    "\051\076\052\101\053\073\054\104\055\075\057\072\060" +
    "\105\001\002\000\004\021\u0143\001\002\000\050\003\uffd2" +
    "\005\uffd2\010\uffd2\014\uffd2\022\uffd2\023\uffd2\024\uffd2\040" +
    "\uffd2\063\uffd2\066\uffd2\067\uffd2\070\uffd2\071\uffd2\072\uffd2" +
    "\073\uffd2\074\uffd2\075\uffd2\076\uffd2\077\uffd2\001\002\000" +
    "\026\006\052\007\053\013\064\014\054\025\061\045\056" +
    "\056\067\062\070\064\060\065\063\001\002\000\034\012" +
    "\u0146\044\102\045\074\046\077\047\100\050\103\051\076" +
    "\052\101\053\073\054\104\055\075\057\072\060\105\001" +
    "\002\000\004\004\u0147\001\002\000\006\075\u014b\077\u0148" +
    "\001\002\000\004\043\u0151\001\002\000\010\005\u014f\075" +
    "\u014b\077\u0148\001\002\000\010\005\uffe0\075\uffe0\077\uffe0" +
    "\001\002\000\026\006\052\007\053\013\064\014\054\025" +
    "\061\045\056\056\067\062\070\064\060\065\063\001\002" +
    "\000\034\043\u014d\044\102\045\074\046\077\047\100\050" +
    "\103\051\076\052\101\053\073\054\104\055\075\057\072" +
    "\060\105\001\002\000\040\003\041\014\015\022\017\023" +
    "\047\024\032\040\025\063\035\066\043\067\026\070\014" +
    "\071\045\072\022\073\040\074\030\076\024\001\002\000" +
    "\046\003\041\005\uffdf\014\015\022\017\023\047\024\032" +
    "\040\025\063\035\066\043\067\026\070\014\071\045\072" +
    "\022\073\040\074\030\075\uffdf\076\024\077\uffdf\001\002" +
    "\000\050\003\uffe2\005\uffe2\010\uffe2\014\uffe2\022\uffe2\023" +
    "\uffe2\024\uffe2\040\uffe2\063\uffe2\066\uffe2\067\uffe2\070\uffe2" +
    "\071\uffe2\072\uffe2\073\uffe2\074\uffe2\075\uffe2\076\uffe2\077" +
    "\uffe2\001\002\000\010\005\uffe1\075\uffe1\077\uffe1\001\002" +
    "\000\040\003\041\014\015\022\017\023\047\024\032\040" +
    "\025\063\035\066\043\067\026\070\014\071\045\072\022" +
    "\073\040\074\030\076\024\001\002\000\046\003\041\005" +
    "\uffde\014\015\022\017\023\047\024\032\040\025\063\035" +
    "\066\043\067\026\070\014\071\045\072\022\073\040\074" +
    "\030\075\uffde\076\024\077\uffde\001\002\000\026\006\052" +
    "\007\053\013\064\014\054\025\061\045\056\056\067\062" +
    "\070\064\060\065\063\001\002\000\034\012\u0155\044\102" +
    "\045\074\046\077\047\100\050\103\051\076\052\101\053" +
    "\073\054\104\055\075\057\072\060\105\001\002\000\004" +
    "\004\u0156\001\002\000\040\003\041\014\015\022\017\023" +
    "\047\024\032\040\025\063\035\066\043\067\026\070\014" +
    "\071\045\072\022\073\040\074\030\076\024\001\002\000" +
    "\042\003\041\005\u0158\014\015\022\017\023\047\024\032" +
    "\040\025\063\035\066\043\067\026\070\014\071\045\072" +
    "\022\073\040\074\030\076\024\001\002\000\050\003\uffe8" +
    "\005\uffe8\010\uffe8\014\uffe8\022\uffe8\023\uffe8\024\uffe8\040" +
    "\uffe8\063\uffe8\066\uffe8\067\uffe8\070\uffe8\071\uffe8\072\uffe8" +
    "\073\uffe8\074\uffe8\075\uffe8\076\uffe8\077\uffe8\001\002\000" +
    "\004\015\u015a\001\002\000\026\006\052\007\053\013\064" +
    "\014\054\025\061\045\056\056\067\062\070\064\060\065" +
    "\063\001\002\000\034\021\u015c\044\102\045\074\046\077" +
    "\047\100\050\103\051\076\052\101\053\073\054\104\055" +
    "\075\057\072\060\105\001\002\000\050\003\uffdb\005\uffdb" +
    "\010\uffdb\014\uffdb\022\uffdb\023\uffdb\024\uffdb\040\uffdb\063" +
    "\uffdb\066\uffdb\067\uffdb\070\uffdb\071\uffdb\072\uffdb\073\uffdb" +
    "\074\uffdb\075\uffdb\076\uffdb\077\uffdb\001\002\000\004\044" +
    "\u0161\001\002\000\026\006\052\007\053\013\064\014\054" +
    "\025\061\045\056\056\067\062\070\064\060\065\063\001" +
    "\002\000\034\021\u0160\044\102\045\074\046\077\047\100" +
    "\050\103\051\076\052\101\053\073\054\104\055\075\057" +
    "\072\060\105\001\002\000\050\003\uffd6\005\uffd6\010\uffd6" +
    "\014\uffd6\022\uffd6\023\uffd6\024\uffd6\040\uffd6\063\uffd6\066" +
    "\uffd6\067\uffd6\070\uffd6\071\uffd6\072\uffd6\073\uffd6\074\uffd6" +
    "\075\uffd6\076\uffd6\077\uffd6\001\002\000\004\021\u0162\001" +
    "\002\000\050\003\uffd5\005\uffd5\010\uffd5\014\uffd5\022\uffd5" +
    "\023\uffd5\024\uffd5\040\uffd5\063\uffd5\066\uffd5\067\uffd5\070" +
    "\uffd5\071\uffd5\072\uffd5\073\uffd5\074\uffd5\075\uffd5\076\uffd5" +
    "\077\uffd5\001\002\000\040\003\041\014\015\022\017\023" +
    "\047\024\032\040\025\063\035\066\043\067\026\070\014" +
    "\071\045\072\022\073\040\074\030\076\024\001\002\000" +
    "\004\013\u0165\001\002\000\026\006\052\007\053\013\064" +
    "\014\054\025\061\045\056\056\067\062\070\064\060\065" +
    "\063\001\002\000\034\012\u0167\044\102\045\074\046\077" +
    "\047\100\050\103\051\076\052\101\053\073\054\104\055" +
    "\075\057\072\060\105\001\002\000\004\004\u0168\001\002" +
    "\000\040\003\041\014\015\022\017\023\047\024\032\040" +
    "\025\063\035\066\043\067\026\070\014\071\045\072\022" +
    "\073\040\074\030\076\024\001\002\000\042\003\041\005" +
    "\u016a\014\015\022\017\023\047\024\032\040\025\063\035" +
    "\066\043\067\026\070\014\071\045\072\022\073\040\074" +
    "\030\076\024\001\002\000\050\003\uffea\005\uffea\010\uffea" +
    "\014\uffea\022\uffea\023\uffea\024\uffea\040\uffea\063\uffea\066" +
    "\uffea\067\uffea\070\uffea\071\uffea\072\uffea\073\uffea\074\uffea" +
    "\075\uffea\076\uffea\077\uffea\001\002\000\042\003\041\005" +
    "\u016c\014\015\022\017\023\047\024\032\040\025\063\035" +
    "\066\043\067\026\070\014\071\045\072\022\073\040\074" +
    "\030\076\024\001\002\000\050\003\uffe9\005\uffe9\010\uffe9" +
    "\014\uffe9\022\uffe9\023\uffe9\024\uffe9\040\uffe9\063\uffe9\066" +
    "\uffe9\067\uffe9\070\uffe9\071\uffe9\072\uffe9\073\uffe9\074\uffe9" +
    "\075\uffe9\076\uffe9\077\uffe9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u016a\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\003\012\004\020\005" +
    "\026\006\033\007\032\034\030\035\015\036\035\037\017" +
    "\040\036\041\041\042\022\043\043\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\003\u0129" +
    "\004\020\005\026\006\033\034\030\035\015\036\035\037" +
    "\017\040\036\041\041\042\022\043\043\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\034\u011d\035\u011b\036\u011e" +
    "\040\u011f\041\u0122\042\u011c\043\u0123\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\012\061\030\064\031\065\032\054\033\056\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\012\124\030\064\031\065\032\054" +
    "\033\056\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\012\121\030\064\031\065\032\054\033\056\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\012\070\030\064" +
    "\031\065\032\054\033\056\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\012\120\030\064\031\065\032\054" +
    "\033\056\001\001\000\014\012\117\030\064\031\065\032" +
    "\054\033\056\001\001\000\014\012\116\030\064\031\065" +
    "\032\054\033\056\001\001\000\014\012\115\030\064\031" +
    "\065\032\054\033\056\001\001\000\014\012\114\030\064" +
    "\031\065\032\054\033\056\001\001\000\014\012\113\030" +
    "\064\031\065\032\054\033\056\001\001\000\014\012\112" +
    "\030\064\031\065\032\054\033\056\001\001\000\014\012" +
    "\111\030\064\031\065\032\054\033\056\001\001\000\014" +
    "\012\110\030\064\031\065\032\054\033\056\001\001\000" +
    "\014\012\107\030\064\031\065\032\054\033\056\001\001" +
    "\000\014\012\106\030\064\031\065\032\054\033\056\001" +
    "\001\000\014\012\105\030\064\031\065\032\054\033\056" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\022\136\023" +
    "\134\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\137\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\013" +
    "\147\024\153\025\152\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\013\147\025\160\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\171\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\013\204\026" +
    "\205\027\210\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\013\204\027\215\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\010\224\011\223\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\226\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\231\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\237\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\014\251\015" +
    "\250\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\253\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\013\264\016\266\017\267" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\013\264" +
    "\017\274\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\276\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\305\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\314\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\013\327\020\330\021\333" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\013\327\021\340\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\012" +
    "\346\030\064\031\065\032\054\033\056\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\012" +
    "\366\030\064\031\065\032\054\033\056\001\001\000\014" +
    "\012\353\030\064\031\065\032\054\033\056\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\034" +
    "\030\035\015\036\035\037\362\040\036\041\041\042\022" +
    "\043\043\044\363\001\001\000\002\001\001\000\022\034" +
    "\030\035\015\036\035\037\365\040\036\041\041\042\022" +
    "\043\043\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\034" +
    "\030\035\015\036\035\037\362\040\036\041\041\042\022" +
    "\043\043\044\375\001\001\000\022\034\030\035\015\036" +
    "\035\037\365\040\036\041\041\042\022\043\043\001\001" +
    "\000\002\001\001\000\014\012\u0100\030\064\031\065\032" +
    "\054\033\056\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\012\u010e\030\064\031\065\032" +
    "\054\033\056\001\001\000\014\012\u0105\030\064\031\065" +
    "\032\054\033\056\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\034\030\035\015\036\035\037" +
    "\362\040\036\041\041\042\022\043\043\044\u010c\001\001" +
    "\000\022\034\030\035\015\036\035\037\365\040\036\041" +
    "\041\042\022\043\043\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\034\030" +
    "\035\015\036\035\037\362\040\036\041\041\042\022\043" +
    "\043\044\u0115\001\001\000\022\034\030\035\015\036\035" +
    "\037\365\040\036\041\041\042\022\043\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\012\u0119\030\064" +
    "\031\065\032\054\033\056\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\012\u0127\030" +
    "\064\031\065\032\054\033\056\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\012\u012d\030\064\031\065\032\054" +
    "\033\056\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\034\030\035\015\036\035\037\362\040\036\041\041" +
    "\042\022\043\043\044\u0130\001\001\000\022\034\030\035" +
    "\015\036\035\037\365\040\036\041\041\042\022\043\043" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\012" +
    "\u0134\030\064\031\065\032\054\033\056\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\012" +
    "\u0138\030\064\031\065\032\054\033\056\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\034\030\035\015\036" +
    "\035\037\362\040\036\041\041\042\022\043\043\044\u013b" +
    "\001\001\000\022\034\030\035\015\036\035\037\365\040" +
    "\036\041\041\042\022\043\043\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\012\u0140\030" +
    "\064\031\065\032\054\033\056\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\012\u0144\030" +
    "\064\031\065\032\054\033\056\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\045\u0148\046\u0149\001\001\000" +
    "\002\001\001\000\004\046\u014f\001\001\000\002\001\001" +
    "\000\014\012\u014b\030\064\031\065\032\054\033\056\001" +
    "\001\000\002\001\001\000\024\034\030\035\015\036\035" +
    "\037\362\040\036\041\041\042\022\043\043\044\u014d\001" +
    "\001\000\022\034\030\035\015\036\035\037\365\040\036" +
    "\041\041\042\022\043\043\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\034\030\035\015\036\035\037\362" +
    "\040\036\041\041\042\022\043\043\044\u0151\001\001\000" +
    "\022\034\030\035\015\036\035\037\365\040\036\041\041" +
    "\042\022\043\043\001\001\000\014\012\u0153\030\064\031" +
    "\065\032\054\033\056\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\034\030\035\015\036\035\037\362\040" +
    "\036\041\041\042\022\043\043\044\u0156\001\001\000\022" +
    "\034\030\035\015\036\035\037\365\040\036\041\041\042" +
    "\022\043\043\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\012\u015a\030\064\031\065\032\054\033\056\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\012\u015e\030\064\031\065\032\054\033\056\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\034\030\035\015\036\035\037" +
    "\362\040\036\041\041\042\022\043\043\044\u016a\001\001" +
    "\000\002\001\001\000\014\012\u0165\030\064\031\065\032" +
    "\054\033\056\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\034\030\035\015\036\035\037\362\040\036\041" +
    "\041\042\022\043\043\044\u0168\001\001\000\022\034\030" +
    "\035\015\036\035\037\365\040\036\041\041\042\022\043" +
    "\043\001\001\000\002\001\001\000\022\034\030\035\015" +
    "\036\035\037\365\040\036\041\041\042\022\043\043\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticoStatPy$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticoStatPy$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticoStatPy$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    public void syntax_error(Symbol s){ 
        System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value); 

        Traduccion="Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ " No se esperaba este componente: " +s.value;
    } 

    
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido.");
        
        Traduccion="Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido.";
        
    } 

    //Tabla de Variables y Tokens
    public HashMap<String, Object> t_variables = new HashMap<String, Object>();
    public String Titulo_Barras,TituloEjeX_Barras,TituloEjeY_Barras;
    public List<String> EjeX= new ArrayList<String>();
    public List<Double> Valores= new ArrayList<Double>();
    
    public String Titulo_Pie;
    public List<String> EjeX_Pie= new ArrayList<String>();
    public List<Double> Valores_Pie= new ArrayList<Double>();
    

    public String Traduccion="";



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SintacticoStatPy$actions {
  private final SintacticoStatPy parser;

  /** Constructor */
  CUP$SintacticoStatPy$actions(SintacticoStatPy parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SintacticoStatPy$do_action_part00000000(
    int                        CUP$SintacticoStatPy$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoStatPy$parser,
    java.util.Stack            CUP$SintacticoStatPy$stack,
    int                        CUP$SintacticoStatPy$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticoStatPy$result;

      /* select the action based on the action number */
      switch (CUP$SintacticoStatPy$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).value;
		RESULT = start_val;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintacticoStatPy$parser.done_parsing();
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= VOID MAIN PARIZQ PARDER BRAIZQ listainstrucciones BRADER 
            {
              Object RESULT =null;

              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // listainstrucciones ::= listainstrucciones instrucciones 
            {
              Object RESULT =null;

              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("listainstrucciones",5, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // listainstrucciones ::= instrucciones 
            {
              Object RESULT =null;

              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("listainstrucciones",5, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instrucciones ::= sentencias 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		System.out.println(a);Traduccion+=a+"\n";
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instrucciones ::= globales 
            {
              Object RESULT =null;

              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instrucciones ::= barras 
            {
              Object RESULT =null;

              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instrucciones ::= pie 
            {
              Object RESULT =null;

              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sentencias ::= declaracion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("sentencias",29, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sentencias ::= print 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("sentencias",29, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // sentencias ::= if 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("sentencias",29, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // sentencias ::= while 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("sentencias",29, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // sentencias ::= for 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("sentencias",29, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sentencias ::= dowhile 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("sentencias",29, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // sentencias ::= switch 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("sentencias",29, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // sentencias ::= error declaracion 
            {
              String RESULT =null;

              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("sentencias",29, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // sentencias ::= error print 
            {
              String RESULT =null;

              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("sentencias",29, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // sentencias ::= error if 
            {
              String RESULT =null;

              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("sentencias",29, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // sentencias ::= error while 
            {
              String RESULT =null;

              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("sentencias",29, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // sentencias ::= error for 
            {
              String RESULT =null;

              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("sentencias",29, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // sentencias ::= error dowhile 
            {
              String RESULT =null;

              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("sentencias",29, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // sentencias ::= error switch 
            {
              String RESULT =null;

              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("sentencias",29, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // if ::= IF PARIZQ expresion PARDER BRAIZQ listasentencias BRADER 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).value;
		String ide=Variable.formatCodeWithIndentation(s);RESULT="if "+a+":\n"+ide;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("if",28, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // if ::= ELSE IF PARIZQ expresion PARDER BRAIZQ listasentencias BRADER 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).value;
		String ide=Variable.formatCodeWithIndentation(s);RESULT="elif "+a+":\n"+ide;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("if",28, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // if ::= ELSE BRAIZQ listasentencias BRADER 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).value;
		String ide=Variable.formatCodeWithIndentation(s);RESULT="else:\n"+ide;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("if",28, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // while ::= WHILE PARIZQ expresion PARDER BRAIZQ listasentencias BRADER 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).value;
		String ide=Variable.formatCodeWithIndentation(s);RESULT="while "+a+":\n"+ide;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("while",30, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // for ::= FOR PARIZQ INT IDENT IGUAL expresion PTOCOMA IDENT MENOR expresion PTOCOMA IDENT MAS MAS PARDER BRAIZQ listasentencias BRADER 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-14)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-14)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-14)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-12)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-12)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-12)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-8)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-8)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-8)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).value;
		
String ide=Variable.formatCodeWithIndentation(s);
RESULT="for "+a+" in range("+b+","+d+"):\n"+ide;

              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("for",31, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-17)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // for ::= FOR PARIZQ INT IDENT IGUAL expresion PTOCOMA IDENT MENORIGUAL expresion PTOCOMA IDENT MAS MAS PARDER BRAIZQ listasentencias BRADER 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-14)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-14)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-14)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-12)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-12)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-12)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-8)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-8)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-8)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).value;
		
String ide=Variable.formatCodeWithIndentation(s);
int sup = Integer.parseInt(d);
sup++;
RESULT="for "+a+" in range("+b+","+sup+"):\n"+ide;

              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("for",31, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-17)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // for ::= FOR PARIZQ IDENT IGUAL expresion PTOCOMA IDENT MENOR expresion PTOCOMA IDENT MAS MAS PARDER BRAIZQ listasentencias BRADER 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-14)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-14)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-14)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-12)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-12)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-12)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-8)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-8)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-8)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).value;
		
String ide=Variable.formatCodeWithIndentation(s);
RESULT="for "+a+" in range("+b+","+d+"):\n"+ide;

              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("for",31, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-16)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // for ::= FOR PARIZQ IDENT IGUAL expresion PTOCOMA IDENT MENORIGUAL expresion PTOCOMA IDENT MAS MAS PARDER BRAIZQ listasentencias BRADER 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-14)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-14)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-14)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-12)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-12)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-12)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-8)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-8)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-8)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).value;
		
String ide=Variable.formatCodeWithIndentation(s);
int sup = Integer.parseInt(d);
sup++;
RESULT="for "+a+" in range("+b+","+sup+"):\n"+ide;

              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("for",31, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-16)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // dowhile ::= DO BRAIZQ listasentencias BRADER WHILE PARIZQ expresion PARDER PTOCOMA 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-6)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-6)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).value;
		
String ide=Variable.formatCodeWithIndentation(s);
RESULT="While True:\n"+ide+"\n    if "+d+":\n        break";

              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("dowhile",32, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // switch ::= SWITCH PARIZQ expresion PARDER BRAIZQ listacasos BRADER 
            {
              String RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-4)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-4)).right;
		String ex = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).value;
		String ide=Variable.formatCodeWithIndentation(l);RESULT="def switch("+ex+"):\n    switcher={\n"+ide+"\n}";
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("switch",33, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // listacasos ::= listacasos caso 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		RESULT=a+"\n"+b;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("listacasos",35, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // listacasos ::= caso 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("listacasos",35, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // caso ::= CASE expresion DOSPTO listasentencias 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		String ide=Variable.formatcase(s);RESULT="        "+e+":\n"+ide+",";
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("caso",36, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // caso ::= DEFAULT DOSPTO listasentencias 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		String ide=Variable.formatcase(s);RESULT="        \"default\":\n"+ide;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("caso",36, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // listasentencias ::= listasentencias sentencias 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		RESULT=b+"\n"+a;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("listasentencias",34, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // listasentencias ::= sentencias 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("listasentencias",34, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // declaracion ::= INT IDENT IGUAL expresion PTOCOMA 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		RESULT=b+c+exp;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("declaracion",26, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // declaracion ::= DOUBLE IDENT IGUAL expresion PTOCOMA 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		RESULT=b+c+exp;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("declaracion",26, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // declaracion ::= STRING IDENT IGUAL expresion PTOCOMA 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		RESULT=b+c+exp;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("declaracion",26, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // declaracion ::= PCHAR IDENT IGUAL expresion PTOCOMA 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		RESULT=b+c+exp;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("declaracion",26, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // declaracion ::= BOOL IDENT IGUAL expresion PTOCOMA 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		RESULT=b+c+exp;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("declaracion",26, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // declaracion ::= IDENT IGUAL expresion PTOCOMA 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		RESULT=b+c+exp;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("declaracion",26, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // declaracion ::= IDENT MAS MAS PTOCOMA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).value;
		RESULT=a+"="+a+"+1";
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("declaracion",26, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // declaracion ::= BREAK PTOCOMA 
            {
              String RESULT =null;
		RESULT="break";
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("declaracion",26, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // declaracion ::= error PTOCOMA 
            {
              String RESULT =null;

              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("declaracion",26, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // print ::= CONSOLE PUNTO WRITE PARIZQ expresion PARDER PTOCOMA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-4)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-3)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		
if(exp.contains("\"")){
if(exp.contains("+")){
exp=exp.replace("+",",");
}
}
RESULT="print("+exp+")";

              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("print",27, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expresion ::= symbols 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("expresion",8, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expresion ::= uno 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("expresion",8, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expresion ::= aritmetica 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("expresion",8, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expresion ::= logica 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("expresion",8, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expresion ::= PARIZQ expresion PARDER 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).value;
		RESULT="("+a+")";
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("expresion",8, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // symbols ::= IDENT 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("symbols",24, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // symbols ::= CADENA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("symbols",24, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // symbols ::= CHAR 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		RESULT=a;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("symbols",24, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // symbols ::= TRUE 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		RESULT="True";
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("symbols",24, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // symbols ::= FALSE 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		RESULT="False";
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("symbols",24, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // aritmetica ::= expresion MAS expresion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		RESULT=a+"+"+b;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("aritmetica",22, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // aritmetica ::= expresion MENOS expresion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		RESULT=a+"-"+b;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("aritmetica",22, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // aritmetica ::= expresion POR expresion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		RESULT=a+"*"+b;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("aritmetica",22, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // aritmetica ::= expresion DIVIDIDO expresion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		RESULT=a+"/"+b;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("aritmetica",22, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // aritmetica ::= DECIMAL 
            {
              String RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String dec = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		RESULT=dec;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("aritmetica",22, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // aritmetica ::= ENTERO 
            {
              String RESULT =null;
		int enleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int enright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String en = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		RESULT=en;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("aritmetica",22, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // logica ::= expresion MAYOR expresion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		RESULT=a+" "+b+" "+c;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("logica",23, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // logica ::= expresion MENOR expresion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		RESULT=a+" "+b+" "+c;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("logica",23, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // logica ::= expresion MAYORIGUAL expresion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		RESULT=a+" "+b+" "+c;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("logica",23, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // logica ::= expresion MENORIGUAL expresion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		RESULT=a+" "+b+" "+c;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("logica",23, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // logica ::= expresion EQUALS expresion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		RESULT=a+" "+b+" "+c;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("logica",23, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // logica ::= expresion NOTEQUALS expresion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		RESULT=a+" "+b+" "+c;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("logica",23, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // logica ::= expresion AND expresion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		RESULT=a+" and "+c;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("logica",23, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // logica ::= expresion OR expresion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		RESULT=a+" or "+c;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("logica",23, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // uno ::= MENOS expresion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		RESULT=a+b;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("uno",25, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // uno ::= NOT expresion 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		RESULT="not "+b;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("uno",25, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // globales ::= VOID DEFGLOB PARIZQ PARDER BRAIZQ listaglobales BRADER 
            {
              Object RESULT =null;

              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("globales",2, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // listaglobales ::= listaglobales variablesglobales 
            {
              Object RESULT =null;

              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("listaglobales",6, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // listaglobales ::= variablesglobales 
            {
              Object RESULT =null;

              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("listaglobales",6, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // variablesglobales ::= STRING IDENT IGUAL CADENA PTOCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).value;
		t_variables.put(a,b.replace("\"",""));
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("variablesglobales",7, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // variablesglobales ::= DOUBLE IDENT IGUAL DECIMAL PTOCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).value;
		t_variables.put(a,b);
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("variablesglobales",7, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // variablesglobales ::= DOUBLE IDENT IGUAL variablesjson PTOCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).value;
		t_variables.put(a,b);
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("variablesglobales",7, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // variablesglobales ::= STRING IDENT IGUAL variablesjson PTOCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).value;
		t_variables.put(a,b);
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("variablesglobales",7, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // variablesjson ::= DOLAR BRAIZQ NEWVAL COMA CADENA COMA CADENA BRADER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).value;
		
Object var=Variable.BuscarVariable(a.replace("\"",""),b.replace("\"",""));
RESULT=var;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("variablesjson",9, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // barras ::= VOID GRAFBAR PARIZQ PARDER BRAIZQ listabarras BRADER 
            {
              Object RESULT =null;

              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("barras",3, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // listabarras ::= listabarras instruccionesbarras 
            {
              Object RESULT =null;

              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("listabarras",10, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // listabarras ::= instruccionesbarras 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;

              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("listabarras",10, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // instruccionesbarras ::= STRING TITULO IGUAL IDENT PTOCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).value;
		Titulo_Barras=t_variables.get(a).toString();
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("instruccionesbarras",11, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // instruccionesbarras ::= STRING TITULO IGUAL CADENA PTOCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).value;
		Titulo_Barras=a.replace("\"","");
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("instruccionesbarras",11, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // instruccionesbarras ::= STRING TITULO IGUAL variablesjson PTOCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).value;
		Titulo_Barras=a.toString();
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("instruccionesbarras",11, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // instruccionesbarras ::= STRING TITULOX IGUAL IDENT PTOCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).value;
		TituloEjeX_Barras=t_variables.get(a).toString();
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("instruccionesbarras",11, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // instruccionesbarras ::= STRING TITULOX IGUAL CADENA PTOCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).value;
		TituloEjeX_Barras=a.replace("\"","");
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("instruccionesbarras",11, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // instruccionesbarras ::= STRING TITULOX IGUAL variablesjson PTOCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).value;
		TituloEjeX_Barras=a.toString();
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("instruccionesbarras",11, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // instruccionesbarras ::= STRING TITULOY IGUAL IDENT PTOCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).value;
		TituloEjeY_Barras=t_variables.get(a).toString();
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("instruccionesbarras",11, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // instruccionesbarras ::= STRING TITULOY IGUAL CADENA PTOCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).value;
		TituloEjeY_Barras=a.replace("\"","");
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("instruccionesbarras",11, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // instruccionesbarras ::= STRING TITULOY IGUAL variablesjson PTOCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).value;
		TituloEjeY_Barras=a.toString();
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("instruccionesbarras",11, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // instruccionesbarras ::= STRING LLAIZQ LLADER EJEX IGUAL BRAIZQ listastring BRADER PTOCOMA 
            {
              Object RESULT =null;

              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("instruccionesbarras",11, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // instruccionesbarras ::= DOUBLE LLAIZQ LLADER VALORES IGUAL BRAIZQ listadouble BRADER PTOCOMA 
            {
              Object RESULT =null;

              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("instruccionesbarras",11, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // listastring ::= listastring COMA arreglostring 
            {
              Object RESULT =null;

              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("listastring",12, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // listastring ::= arreglostring 
            {
              Object RESULT =null;

              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("listastring",12, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // arreglostring ::= CADENA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		EjeX.add(a.replace("\"",""));
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("arreglostring",13, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // arreglostring ::= IDENT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		EjeX.add(t_variables.get(a).toString());
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("arreglostring",13, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // arreglostring ::= variablesjson 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		EjeX.add(a.toString());
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("arreglostring",13, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // listadouble ::= listadouble COMA arreglodouble 
            {
              Object RESULT =null;

              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("listadouble",14, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // listadouble ::= arreglodouble 
            {
              Object RESULT =null;

              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("listadouble",14, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // arreglodouble ::= DECIMAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		Valores.add(Double.parseDouble(a));
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("arreglodouble",15, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // arreglodouble ::= IDENT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		String numero=t_variables.get(a).toString();
                          Valores.add(Double.parseDouble(numero));
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("arreglodouble",15, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // arreglodouble ::= variablesjson 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		String numero=a.toString();
                                  Valores.add(Double.parseDouble(numero));
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("arreglodouble",15, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // arreglodouble ::= ENTERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		Valores.add(Double.parseDouble(a));
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("arreglodouble",15, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // pie ::= VOID GRAFPI PARIZQ PARDER BRAIZQ listapie BRADER 
            {
              Object RESULT =null;

              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("pie",4, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // listapie ::= listapie instruccionespie 
            {
              Object RESULT =null;

              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("listapie",16, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // listapie ::= instruccionespie 
            {
              Object RESULT =null;

              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("listapie",16, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // instruccionespie ::= STRING TITULO IGUAL IDENT PTOCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).value;
		Titulo_Pie=t_variables.get(a).toString();
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("instruccionespie",17, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // instruccionespie ::= STRING TITULO IGUAL CADENA PTOCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).value;
		Titulo_Pie=a.replace("\"","");
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("instruccionespie",17, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // instruccionespie ::= STRING TITULO IGUAL variablesjson PTOCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).value;
		Titulo_Pie=a.toString();
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("instruccionespie",17, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // instruccionespie ::= STRING LLAIZQ LLADER EJEX IGUAL BRAIZQ listastringpie BRADER PTOCOMA 
            {
              Object RESULT =null;

              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("instruccionespie",17, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // instruccionespie ::= DOUBLE LLAIZQ LLADER VALORES IGUAL BRAIZQ listadoublepie BRADER PTOCOMA 
            {
              Object RESULT =null;

              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("instruccionespie",17, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // listastringpie ::= listastringpie COMA arreglostringpie 
            {
              Object RESULT =null;

              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("listastringpie",18, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // listastringpie ::= arreglostringpie 
            {
              Object RESULT =null;

              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("listastringpie",18, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // listadoublepie ::= listadoublepie COMA arreglodoublepie 
            {
              Object RESULT =null;

              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("listadoublepie",20, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // listadoublepie ::= arreglodoublepie 
            {
              Object RESULT =null;

              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("listadoublepie",20, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // arreglostringpie ::= CADENA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		EjeX_Pie.add(a.replace("\"",""));
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("arreglostringpie",19, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // arreglostringpie ::= IDENT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		EjeX_Pie.add(t_variables.get(a).toString());
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("arreglostringpie",19, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // arreglostringpie ::= variablesjson 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		EjeX_Pie.add(a.toString());
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("arreglostringpie",19, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // arreglodoublepie ::= DECIMAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		Valores_Pie.add(Double.parseDouble(a));
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("arreglodoublepie",21, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // arreglodoublepie ::= IDENT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		String numero=t_variables.get(a).toString();
                          Valores_Pie.add(Double.parseDouble(numero));
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("arreglodoublepie",21, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // arreglodoublepie ::= variablesjson 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		String numero=a.toString();
                                  Valores_Pie.add(Double.parseDouble(numero));
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("arreglodoublepie",21, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // arreglodoublepie ::= ENTERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		Valores_Pie.add(Double.parseDouble(a));
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("arreglodoublepie",21, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SintacticoStatPy$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SintacticoStatPy$do_action(
    int                        CUP$SintacticoStatPy$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoStatPy$parser,
    java.util.Stack            CUP$SintacticoStatPy$stack,
    int                        CUP$SintacticoStatPy$top)
    throws java.lang.Exception
    {
              return CUP$SintacticoStatPy$do_action_part00000000(
                               CUP$SintacticoStatPy$act_num,
                               CUP$SintacticoStatPy$parser,
                               CUP$SintacticoStatPy$stack,
                               CUP$SintacticoStatPy$top);
    }
}

}
