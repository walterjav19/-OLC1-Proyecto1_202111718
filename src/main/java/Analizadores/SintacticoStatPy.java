
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores;

import java_cup.runtime.*;
import java.util.HashMap;
import Estructuras.Variable;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SintacticoStatPy extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public SintacticoStatPy() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SintacticoStatPy(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticoStatPy(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\037\000\002\002\004\000\002\002\011\000\002\010" +
    "\004\000\002\010\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\004\007\000" +
    "\002\004\007\000\002\013\005\000\002\013\005\000\002" +
    "\013\005\000\002\013\005\000\002\013\003\000\002\013" +
    "\003\000\002\014\005\000\002\014\005\000\002\014\005" +
    "\000\002\014\005\000\002\014\003\000\002\005\011\000" +
    "\002\011\004\000\002\011\003\000\002\012\007\000\002" +
    "\012\007\000\002\012\007\000\002\012\007\000\002\015" +
    "\012\000\002\006\010\000\002\007\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\126\000\004\010\004\001\002\000\004\011\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\013\010\001\002\000\004\012\011\001\002\000" +
    "\004\004\012\001\002\000\010\010\015\022\013\023\020" +
    "\001\002\000\004\014\114\001\002\000\012\005\112\010" +
    "\015\022\013\023\020\001\002\000\010\016\043\017\042" +
    "\020\044\001\002\000\012\005\ufffe\010\ufffe\022\ufffe\023" +
    "\ufffe\001\002\000\012\005\ufffa\010\ufffa\022\ufffa\023\ufffa" +
    "\001\002\000\004\014\024\001\002\000\012\005\ufffc\010" +
    "\ufffc\022\ufffc\023\ufffc\001\002\000\012\005\ufffd\010\ufffd" +
    "\022\ufffd\023\ufffd\001\002\000\012\005\ufffb\010\ufffb\022" +
    "\ufffb\023\ufffb\001\002\000\004\015\025\001\002\000\006" +
    "\007\027\025\030\001\002\000\014\021\031\031\032\032" +
    "\033\033\035\034\034\001\002\000\014\021\ufff3\031\ufff3" +
    "\032\ufff3\033\ufff3\034\ufff3\001\002\000\014\021\ufff2\031" +
    "\ufff2\032\ufff2\033\ufff2\034\ufff2\001\002\000\012\005\ufff8" +
    "\010\ufff8\022\ufff8\023\ufff8\001\002\000\006\007\027\025" +
    "\030\001\002\000\006\007\027\025\030\001\002\000\006" +
    "\007\027\025\030\001\002\000\006\007\027\025\030\001" +
    "\002\000\014\021\ufff5\031\ufff5\032\ufff5\033\ufff5\034\ufff5" +
    "\001\002\000\014\021\ufff4\031\ufff4\032\ufff4\033\ufff4\034" +
    "\ufff4\001\002\000\014\021\ufff6\031\ufff6\032\ufff6\033\035" +
    "\034\034\001\002\000\014\021\ufff7\031\ufff7\032\ufff7\033" +
    "\035\034\034\001\002\000\004\013\106\001\002\000\004" +
    "\013\051\001\002\000\004\013\045\001\002\000\004\012" +
    "\046\001\002\000\004\004\047\001\002\000\004\005\050" +
    "\001\002\000\012\005\uffe3\010\uffe3\022\uffe3\023\uffe3\001" +
    "\002\000\004\012\052\001\002\000\004\004\053\001\002" +
    "\000\006\023\054\024\055\001\002\000\004\014\100\001" +
    "\002\000\004\014\062\001\002\000\010\005\uffea\023\uffea" +
    "\024\uffea\001\002\000\010\005\060\023\054\024\055\001" +
    "\002\000\012\005\uffec\010\uffec\022\uffec\023\uffec\001\002" +
    "\000\010\005\uffeb\023\uffeb\024\uffeb\001\002\000\004\015" +
    "\063\001\002\000\006\006\066\027\065\001\002\000\004" +
    "\021\077\001\002\000\004\004\070\001\002\000\004\021" +
    "\067\001\002\000\010\005\uffe9\023\uffe9\024\uffe9\001\002" +
    "\000\004\026\071\001\002\000\004\030\072\001\002\000" +
    "\004\006\073\001\002\000\004\030\074\001\002\000\004" +
    "\006\075\001\002\000\004\005\076\001\002\000\004\021" +
    "\uffe5\001\002\000\010\005\uffe6\023\uffe6\024\uffe6\001\002" +
    "\000\004\015\101\001\002\000\006\007\103\027\065\001" +
    "\002\000\004\021\105\001\002\000\004\021\104\001\002" +
    "\000\010\005\uffe8\023\uffe8\024\uffe8\001\002\000\010\005" +
    "\uffe7\023\uffe7\024\uffe7\001\002\000\004\012\107\001\002" +
    "\000\004\004\110\001\002\000\004\005\111\001\002\000" +
    "\012\005\uffe4\010\uffe4\022\uffe4\023\uffe4\001\002\000\004" +
    "\002\000\001\002\000\012\005\uffff\010\uffff\022\uffff\023" +
    "\uffff\001\002\000\004\015\115\001\002\000\004\025\117" +
    "\001\002\000\014\021\120\031\121\032\123\033\124\034" +
    "\122\001\002\000\014\021\uffed\031\uffed\032\uffed\033\uffed" +
    "\034\uffed\001\002\000\012\005\ufff9\010\ufff9\022\ufff9\023" +
    "\ufff9\001\002\000\004\025\117\001\002\000\004\025\117" +
    "\001\002\000\004\025\117\001\002\000\004\025\117\001" +
    "\002\000\014\021\uffef\031\uffef\032\uffef\033\uffef\034\uffef" +
    "\001\002\000\014\021\ufff0\031\ufff0\032\ufff0\033\124\034" +
    "\122\001\002\000\014\021\uffee\031\uffee\032\uffee\033\uffee" +
    "\034\uffee\001\002\000\014\021\ufff1\031\ufff1\032\ufff1\033" +
    "\124\034\122\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\126\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\003\015\004\021\005" +
    "\020\006\022\007\016\010\013\001\001\000\002\001\001" +
    "\000\014\003\112\004\021\005\020\006\022\007\016\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\025\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\040\001\001\000\004\013\037" +
    "\001\001\000\004\013\036\001\001\000\004\013\035\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\011\056\012\055\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\060\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\063\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\101\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\014\115\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\014\127" +
    "\001\001\000\004\014\126\001\001\000\004\014\125\001" +
    "\001\000\004\014\124\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticoStatPy$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticoStatPy$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticoStatPy$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    public void syntax_error(Symbol s){ 
        System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
    } 

    
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido."); 
    } 

    //Tabla de Variables y Tokens
    public HashMap<String, Object> t_variables = new HashMap<String, Object>();
    


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SintacticoStatPy$actions {
  private final SintacticoStatPy parser;

  /** Constructor */
  CUP$SintacticoStatPy$actions(SintacticoStatPy parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SintacticoStatPy$do_action_part00000000(
    int                        CUP$SintacticoStatPy$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoStatPy$parser,
    java.util.Stack            CUP$SintacticoStatPy$stack,
    int                        CUP$SintacticoStatPy$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticoStatPy$result;

      /* select the action based on the action number */
      switch (CUP$SintacticoStatPy$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).value;
		RESULT = start_val;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintacticoStatPy$parser.done_parsing();
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= VOID MAIN PARIZQ PARDER BRAIZQ listainstrucciones BRADER 
            {
              Object RESULT =null;

              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // listainstrucciones ::= listainstrucciones instrucciones 
            {
              Object RESULT =null;

              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("listainstrucciones",6, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // listainstrucciones ::= instrucciones 
            {
              Object RESULT =null;

              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("listainstrucciones",6, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instrucciones ::= sentencias 
            {
              Object RESULT =null;

              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instrucciones ::= globales 
            {
              Object RESULT =null;

              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instrucciones ::= barras 
            {
              Object RESULT =null;

              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instrucciones ::= pie 
            {
              Object RESULT =null;

              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sentencias ::= INT IDENT IGUAL expresionentero PTOCOMA 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).value;
		System.out.println(exp);
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("sentencias",2, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sentencias ::= DOUBLE IDENT IGUAL expresiondecimal PTOCOMA 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).value;
		System.out.println(exp);
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("sentencias",2, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expresiondecimal ::= expresiondecimal MAS expresiondecimal 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		RESULT=a+"+"+b;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("expresiondecimal",9, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expresiondecimal ::= expresiondecimal MENOS expresiondecimal 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		RESULT=a+"-"+b;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("expresiondecimal",9, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expresiondecimal ::= expresiondecimal POR expresiondecimal 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		RESULT=a+"*"+b;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("expresiondecimal",9, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expresiondecimal ::= expresiondecimal DIVIDIDO expresiondecimal 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		RESULT=a+"/"+b;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("expresiondecimal",9, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expresiondecimal ::= DECIMAL 
            {
              String RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String dec = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		RESULT=dec;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("expresiondecimal",9, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expresiondecimal ::= ENTERO 
            {
              String RESULT =null;
		int enleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int enright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String en = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		RESULT=en;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("expresiondecimal",9, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expresionentero ::= expresionentero MAS expresionentero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		RESULT=a+"+"+b;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("expresionentero",10, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expresionentero ::= expresionentero MENOS expresionentero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		RESULT=a+"-"+b;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("expresionentero",10, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expresionentero ::= expresionentero POR expresionentero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		RESULT=a+"*"+b;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("expresionentero",10, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expresionentero ::= expresionentero DIVIDIDO expresionentero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		RESULT=a+"/"+b;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("expresionentero",10, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expresionentero ::= ENTERO 
            {
              String RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()).right;
		String dec = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.peek()).value;
		RESULT=dec;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("expresionentero",10, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // globales ::= VOID DEFGLOB PARIZQ PARDER BRAIZQ listaglobales BRADER 
            {
              Object RESULT =null;
		System.out.println("global");
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("globales",3, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // listaglobales ::= listaglobales variablesglobales 
            {
              Object RESULT =null;

              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("listaglobales",7, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // listaglobales ::= variablesglobales 
            {
              Object RESULT =null;

              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("listaglobales",7, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // variablesglobales ::= STRING IDENT IGUAL CADENA PTOCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).value;
		System.out.println(a+" "+b);
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("variablesglobales",8, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // variablesglobales ::= DOUBLE IDENT IGUAL DECIMAL PTOCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).value;
		System.out.println(a+" "+b);
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("variablesglobales",8, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // variablesglobales ::= DOUBLE IDENT IGUAL variablesjson PTOCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).value;
		System.out.println(b);
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("variablesglobales",8, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // variablesglobales ::= STRING IDENT IGUAL variablesjson PTOCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).value;
		System.out.println(b);
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("variablesglobales",8, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // variablesjson ::= DOLAR BRAIZQ NEWVAL COMA CADENA COMA CADENA BRADER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-1)).value;
		
Object var=Variable.BuscarVariable(a.replace("\"",""),b.replace("\"",""));
RESULT=var;
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("variablesjson",11, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // barras ::= VOID GRAFBAR PARIZQ PARDER BRAIZQ BRADER 
            {
              Object RESULT =null;
		System.out.println("barras");
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("barras",4, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // pie ::= VOID GRAFPI PARIZQ PARDER BRAIZQ BRADER 
            {
              Object RESULT =null;
		System.out.println("pie");
              CUP$SintacticoStatPy$result = parser.getSymbolFactory().newSymbol("pie",5, ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.elementAt(CUP$SintacticoStatPy$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoStatPy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatPy$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SintacticoStatPy$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SintacticoStatPy$do_action(
    int                        CUP$SintacticoStatPy$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoStatPy$parser,
    java.util.Stack            CUP$SintacticoStatPy$stack,
    int                        CUP$SintacticoStatPy$top)
    throws java.lang.Exception
    {
              return CUP$SintacticoStatPy$do_action_part00000000(
                               CUP$SintacticoStatPy$act_num,
                               CUP$SintacticoStatPy$parser,
                               CUP$SintacticoStatPy$stack,
                               CUP$SintacticoStatPy$top);
    }
}

}
